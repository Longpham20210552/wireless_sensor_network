
Relay_MCBV4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009344  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08009458  08009458  0000a458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097f4  080097f4  0000b074  2**0
                  CONTENTS
  4 .ARM          00000000  080097f4  080097f4  0000b074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080097f4  080097f4  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097f4  080097f4  0000a7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080097f8  080097f8  0000a7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080097fc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012f8  20000074  08009870  0000b074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000136c  08009870  0000b36c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014350  00000000  00000000  0000b09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034a5  00000000  00000000  0001f3ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  00022898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000edd  00000000  00000000  00023bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a57f  00000000  00000000  00024a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ac8  00000000  00000000  0003f014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091827  00000000  00000000  00055adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7303  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059c0  00000000  00000000  000e7348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000ecd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	0800943c 	.word	0x0800943c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	0800943c 	.word	0x0800943c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	@ 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_fmul>:
 8000bf8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c00:	bf1e      	ittt	ne
 8000c02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c06:	ea92 0f0c 	teqne	r2, ip
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d06f      	beq.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c10:	441a      	add	r2, r3
 8000c12:	ea80 0c01 	eor.w	ip, r0, r1
 8000c16:	0240      	lsls	r0, r0, #9
 8000c18:	bf18      	it	ne
 8000c1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1e:	d01e      	beq.n	8000c5e <__aeabi_fmul+0x66>
 8000c20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c34:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c38:	bf3e      	ittt	cc
 8000c3a:	0049      	lslcc	r1, r1, #1
 8000c3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	ea40 0001 	orr.w	r0, r0, r1
 8000c46:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c4a:	2afd      	cmp	r2, #253	@ 0xfd
 8000c4c:	d81d      	bhi.n	8000c8a <__aeabi_fmul+0x92>
 8000c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	0249      	lsleq	r1, r1, #9
 8000c6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c72:	3a7f      	subs	r2, #127	@ 0x7f
 8000c74:	bfc2      	ittt	gt
 8000c76:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7e:	4770      	bxgt	lr
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	dc5d      	bgt.n	8000d48 <__aeabi_fmul+0x150>
 8000c8c:	f112 0f19 	cmn.w	r2, #25
 8000c90:	bfdc      	itt	le
 8000c92:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c96:	4770      	bxle	lr
 8000c98:	f1c2 0200 	rsb	r2, r2, #0
 8000c9c:	0041      	lsls	r1, r0, #1
 8000c9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000ca2:	f1c2 0220 	rsb	r2, r2, #32
 8000ca6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000caa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cae:	f140 0000 	adc.w	r0, r0, #0
 8000cb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb6:	bf08      	it	eq
 8000cb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbc:	4770      	bx	lr
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xce>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xe6>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e78f      	b.n	8000c10 <__aeabi_fmul+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	bf18      	it	ne
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d00a      	beq.n	8000d16 <__aeabi_fmul+0x11e>
 8000d00:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d04:	bf18      	it	ne
 8000d06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d0a:	d1d8      	bne.n	8000cbe <__aeabi_fmul+0xc6>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	bf17      	itett	ne
 8000d1c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d20:	4608      	moveq	r0, r1
 8000d22:	f091 0f00 	teqne	r1, #0
 8000d26:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d2a:	d014      	beq.n	8000d56 <__aeabi_fmul+0x15e>
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	d101      	bne.n	8000d36 <__aeabi_fmul+0x13e>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d36:	ea93 0f0c 	teq	r3, ip
 8000d3a:	d103      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000d3c:	024b      	lsls	r3, r1, #9
 8000d3e:	bf18      	it	ne
 8000d40:	4608      	movne	r0, r1
 8000d42:	d108      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d5a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fdiv>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d069      	beq.n	8000e4c <__aeabi_fdiv+0xec>
 8000d78:	eba2 0203 	sub.w	r2, r2, r3
 8000d7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d86:	d037      	beq.n	8000df8 <__aeabi_fdiv+0x98>
 8000d88:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf38      	it	cc
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000da2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000da6:	428b      	cmp	r3, r1
 8000da8:	bf24      	itt	cs
 8000daa:	1a5b      	subcs	r3, r3, r1
 8000dac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000db0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dc2:	bf24      	itt	cs
 8000dc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000de2:	d1e0      	bne.n	8000da6 <__aeabi_fdiv+0x46>
 8000de4:	2afd      	cmp	r2, #253	@ 0xfd
 8000de6:	f63f af50 	bhi.w	8000c8a <__aeabi_fmul+0x92>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e00:	327f      	adds	r2, #127	@ 0x7f
 8000e02:	bfc2      	ittt	gt
 8000e04:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0c:	4770      	bxgt	lr
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	3a01      	subs	r2, #1
 8000e18:	e737      	b.n	8000c8a <__aeabi_fmul+0x92>
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xc2>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xda>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e795      	b.n	8000d78 <__aeabi_fdiv+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d108      	bne.n	8000e68 <__aeabi_fdiv+0x108>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	f47f af7d 	bne.w	8000d56 <__aeabi_fmul+0x15e>
 8000e5c:	ea93 0f0c 	teq	r3, ip
 8000e60:	f47f af70 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e776      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	d104      	bne.n	8000e78 <__aeabi_fdiv+0x118>
 8000e6e:	024b      	lsls	r3, r1, #9
 8000e70:	f43f af4c 	beq.w	8000d0c <__aeabi_fmul+0x114>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e76e      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e78:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e7c:	bf18      	it	ne
 8000e7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e82:	d1ca      	bne.n	8000e1a <__aeabi_fdiv+0xba>
 8000e84:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e88:	f47f af5c 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e8c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e90:	f47f af3c 	bne.w	8000d0c <__aeabi_fmul+0x114>
 8000e94:	e75f      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e96:	bf00      	nop

08000e98 <__gesf2>:
 8000e98:	f04f 3cff 	mov.w	ip, #4294967295
 8000e9c:	e006      	b.n	8000eac <__cmpsf2+0x4>
 8000e9e:	bf00      	nop

08000ea0 <__lesf2>:
 8000ea0:	f04f 0c01 	mov.w	ip, #1
 8000ea4:	e002      	b.n	8000eac <__cmpsf2+0x4>
 8000ea6:	bf00      	nop

08000ea8 <__cmpsf2>:
 8000ea8:	f04f 0c01 	mov.w	ip, #1
 8000eac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	bf18      	it	ne
 8000ebe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec2:	d011      	beq.n	8000ee8 <__cmpsf2+0x40>
 8000ec4:	b001      	add	sp, #4
 8000ec6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eca:	bf18      	it	ne
 8000ecc:	ea90 0f01 	teqne	r0, r1
 8000ed0:	bf58      	it	pl
 8000ed2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ed6:	bf88      	it	hi
 8000ed8:	17c8      	asrhi	r0, r1, #31
 8000eda:	bf38      	it	cc
 8000edc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ee0:	bf18      	it	ne
 8000ee2:	f040 0001 	orrne.w	r0, r0, #1
 8000ee6:	4770      	bx	lr
 8000ee8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eec:	d102      	bne.n	8000ef4 <__cmpsf2+0x4c>
 8000eee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ef2:	d105      	bne.n	8000f00 <__cmpsf2+0x58>
 8000ef4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef8:	d1e4      	bne.n	8000ec4 <__cmpsf2+0x1c>
 8000efa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000efe:	d0e1      	beq.n	8000ec4 <__cmpsf2+0x1c>
 8000f00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__aeabi_cfrcmple>:
 8000f08:	4684      	mov	ip, r0
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	4661      	mov	r1, ip
 8000f0e:	e7ff      	b.n	8000f10 <__aeabi_cfcmpeq>

08000f10 <__aeabi_cfcmpeq>:
 8000f10:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f12:	f7ff ffc9 	bl	8000ea8 <__cmpsf2>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	bf48      	it	mi
 8000f1a:	f110 0f00 	cmnmi.w	r0, #0
 8000f1e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f20 <__aeabi_fcmpeq>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff fff4 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f28:	bf0c      	ite	eq
 8000f2a:	2001      	moveq	r0, #1
 8000f2c:	2000      	movne	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmplt>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffea 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f3c:	bf34      	ite	cc
 8000f3e:	2001      	movcc	r0, #1
 8000f40:	2000      	movcs	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmple>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffe0 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f50:	bf94      	ite	ls
 8000f52:	2001      	movls	r0, #1
 8000f54:	2000      	movhi	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmpge>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffd2 	bl	8000f08 <__aeabi_cfrcmple>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpgt>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffc8 	bl	8000f08 <__aeabi_cfrcmple>
 8000f78:	bf34      	ite	cc
 8000f7a:	2001      	movcc	r0, #1
 8000f7c:	2000      	movcs	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000f84:	b4b0      	push	{r4, r5, r7}
 8000f86:	b08f      	sub	sp, #60	@ 0x3c
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000f8c:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000f92:	2307      	movs	r3, #7
 8000f94:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000f98:	2307      	movs	r3, #7
 8000f9a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8000fa4:	23ff      	movs	r3, #255	@ 0xff
 8000fa6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000faa:	2364      	movs	r3, #100	@ 0x64
 8000fac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	461d      	mov	r5, r3
 8000fb8:	f107 040c 	add.w	r4, r7, #12
 8000fbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fc4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000fc8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	373c      	adds	r7, #60	@ 0x3c
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bcb0      	pop	{r4, r5, r7}
 8000fd4:	4770      	bx	lr

08000fd6 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b084      	sub	sp, #16
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 fa01 	bl	80013ea <LoRa_read>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000fec:	7bbb      	ldrb	r3, [r7, #14]
 8000fee:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d107      	bne.n	8001006 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000ff6:	7bbb      	ldrb	r3, [r7, #14]
 8000ff8:	f023 0307 	bic.w	r3, r3, #7
 8000ffc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	61da      	str	r2, [r3, #28]
 8001004:	e02e      	b.n	8001064 <LoRa_gotoMode+0x8e>
	}else if (mode == STNBY_MODE){
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d10c      	bne.n	8001026 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 800100c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001010:	f023 0307 	bic.w	r3, r3, #7
 8001014:	b25b      	sxtb	r3, r3
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	b25b      	sxtb	r3, r3
 800101c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2201      	movs	r2, #1
 8001022:	61da      	str	r2, [r3, #28]
 8001024:	e01e      	b.n	8001064 <LoRa_gotoMode+0x8e>
	}else if (mode == TRANSMIT_MODE){
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	2b03      	cmp	r3, #3
 800102a:	d10c      	bne.n	8001046 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 800102c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001030:	f023 0307 	bic.w	r3, r3, #7
 8001034:	b25b      	sxtb	r3, r3
 8001036:	f043 0303 	orr.w	r3, r3, #3
 800103a:	b25b      	sxtb	r3, r3
 800103c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2203      	movs	r2, #3
 8001042:	61da      	str	r2, [r3, #28]
 8001044:	e00e      	b.n	8001064 <LoRa_gotoMode+0x8e>
	}else if (mode == RXCONTIN_MODE){
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	2b05      	cmp	r3, #5
 800104a:	d10b      	bne.n	8001064 <LoRa_gotoMode+0x8e>
		data = (read & 0xF8) | 0x05;
 800104c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001050:	f023 0307 	bic.w	r3, r3, #7
 8001054:	b25b      	sxtb	r3, r3
 8001056:	f043 0305 	orr.w	r3, r3, #5
 800105a:	b25b      	sxtb	r3, r3
 800105c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2205      	movs	r2, #5
 8001062:	61da      	str	r2, [r3, #28]
	}//else if (mode == RXSINGLE_MODE){
		//data = (read & 0xF8) | 0x06;
		//_LoRa->current_mode = RXSINGLE_MODE;
	//}

	LoRa_write(_LoRa, RegOpMode, data);
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	461a      	mov	r2, r3
 8001068:	2101      	movs	r1, #1
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f9d7 	bl	800141e <LoRa_write>
	//HAL_Delay(10);
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	4613      	mov	r3, r2
 8001086:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	889b      	ldrh	r3, [r3, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	4619      	mov	r1, r3
 8001094:	f002 f834 	bl	8003100 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6998      	ldr	r0, [r3, #24]
 800109c:	88fa      	ldrh	r2, [r7, #6]
 800109e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80010a2:	68b9      	ldr	r1, [r7, #8]
 80010a4:	f003 fd3e 	bl	8004b24 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY);
 80010a8:	bf00      	nop
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f004 f93e 	bl	8005330 <HAL_SPI_GetState>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d1f7      	bne.n	80010aa <LoRa_readReg+0x32>
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6998      	ldr	r0, [r3, #24]
 80010be:	8b3a      	ldrh	r2, [r7, #24]
 80010c0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80010c4:	6839      	ldr	r1, [r7, #0]
 80010c6:	f003 fe71 	bl	8004dac <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80010ca:	bf00      	nop
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f004 f92d 	bl	8005330 <HAL_SPI_GetState>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d1f7      	bne.n	80010cc <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	889b      	ldrh	r3, [r3, #4]
 80010e4:	2201      	movs	r2, #1
 80010e6:	4619      	mov	r1, r3
 80010e8:	f002 f80a 	bl	8003100 <HAL_GPIO_WritePin>
}
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	4613      	mov	r3, r2
 8001102:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6818      	ldr	r0, [r3, #0]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	889b      	ldrh	r3, [r3, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	4619      	mov	r1, r3
 8001110:	f001 fff6 	bl	8003100 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6998      	ldr	r0, [r3, #24]
 8001118:	88fa      	ldrh	r2, [r7, #6]
 800111a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800111e:	68b9      	ldr	r1, [r7, #8]
 8001120:	f003 fd00 	bl	8004b24 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001124:	bf00      	nop
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	4618      	mov	r0, r3
 800112c:	f004 f900 	bl	8005330 <HAL_SPI_GetState>
 8001130:	4603      	mov	r3, r0
 8001132:	2b01      	cmp	r3, #1
 8001134:	d1f7      	bne.n	8001126 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6998      	ldr	r0, [r3, #24]
 800113a:	8b3a      	ldrh	r2, [r7, #24]
 800113c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001140:	6839      	ldr	r1, [r7, #0]
 8001142:	f003 fcef 	bl	8004b24 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001146:	bf00      	nop
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4618      	mov	r0, r3
 800114e:	f004 f8ef 	bl	8005330 <HAL_SPI_GetState>
 8001152:	4603      	mov	r3, r0
 8001154:	2b01      	cmp	r3, #1
 8001156:	d1f7      	bne.n	8001148 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	889b      	ldrh	r3, [r3, #4]
 8001160:	2201      	movs	r2, #1
 8001162:	4619      	mov	r1, r3
 8001164:	f001 ffcc 	bl	8003100 <HAL_GPIO_WritePin>
}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 800117c:	2126      	movs	r1, #38	@ 0x26
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f933 	bl	80013ea <LoRa_read>
 8001184:	4603      	mov	r3, r0
 8001186:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d004      	beq.n	8001198 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	f043 0308 	orr.w	r3, r3, #8
 8001194:	73fb      	strb	r3, [r7, #15]
 8001196:	e003      	b.n	80011a0 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8001198:	7bbb      	ldrb	r3, [r7, #14]
 800119a:	f023 0308 	bic.w	r3, r3, #8
 800119e:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	461a      	mov	r2, r3
 80011a4:	2126      	movs	r1, #38	@ 0x26
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 f939 	bl	800141e <LoRa_write>
	HAL_Delay(10);
 80011ac:	200a      	movs	r0, #10
 80011ae:	f001 fc3f 	bl	8002a30 <HAL_Delay>
}
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b096      	sub	sp, #88	@ 0x58
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 80011c4:	4a17      	ldr	r2, [pc, #92]	@ (8001224 <LoRa_setAutoLDO+0x68>)
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	4611      	mov	r1, r2
 80011cc:	2250      	movs	r2, #80	@ 0x50
 80011ce:	4618      	mov	r0, r3
 80011d0:	f007 fbef 	bl	80089b2 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80011da:	461a      	mov	r2, r3
 80011dc:	2301      	movs	r3, #1
 80011de:	4093      	lsls	r3, r2
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f907 	bl	80003f4 <__aeabi_i2d>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	3358      	adds	r3, #88	@ 0x58
 80011f0:	443b      	add	r3, r7
 80011f2:	3b50      	subs	r3, #80	@ 0x50
 80011f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f8:	f7ff fa90 	bl	800071c <__aeabi_ddiv>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	f7ff fb72 	bl	80008ec <__aeabi_d2iz>
 8001208:	4603      	mov	r3, r0
 800120a:	2b10      	cmp	r3, #16
 800120c:	bfcc      	ite	gt
 800120e:	2301      	movgt	r3, #1
 8001210:	2300      	movle	r3, #0
 8001212:	b2db      	uxtb	r3, r3
 8001214:	4619      	mov	r1, r3
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ffaa 	bl	8001170 <LoRa_setLowDaraRateOptimization>
}
 800121c:	bf00      	nop
 800121e:	3758      	adds	r7, #88	@ 0x58
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	08009458 	.word	0x08009458

08001228 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	04db      	lsls	r3, r3, #19
 8001236:	115b      	asrs	r3, r3, #5
 8001238:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	0c1b      	lsrs	r3, r3, #16
 800123e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001240:	7afb      	ldrb	r3, [r7, #11]
 8001242:	461a      	mov	r2, r3
 8001244:	2106      	movs	r1, #6
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 f8e9 	bl	800141e <LoRa_write>
	HAL_Delay(5);
 800124c:	2005      	movs	r0, #5
 800124e:	f001 fbef 	bl	8002a30 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001258:	7afb      	ldrb	r3, [r7, #11]
 800125a:	461a      	mov	r2, r3
 800125c:	2107      	movs	r1, #7
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f8dd 	bl	800141e <LoRa_write>
	HAL_Delay(5);
 8001264:	2005      	movs	r0, #5
 8001266:	f001 fbe3 	bl	8002a30 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800126e:	7afb      	ldrb	r3, [r7, #11]
 8001270:	461a      	mov	r2, r3
 8001272:	2108      	movs	r1, #8
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 f8d2 	bl	800141e <LoRa_write>
	HAL_Delay(5);
 800127a:	2005      	movs	r0, #5
 800127c:	f001 fbd8 	bl	8002a30 <HAL_Delay>
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	2b0c      	cmp	r3, #12
 8001296:	dd01      	ble.n	800129c <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001298:	230c      	movs	r3, #12
 800129a:	603b      	str	r3, [r7, #0]
	if(SF<7)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	2b06      	cmp	r3, #6
 80012a0:	dc01      	bgt.n	80012a6 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80012a2:	2307      	movs	r3, #7
 80012a4:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80012a6:	211e      	movs	r1, #30
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f000 f89e 	bl	80013ea <LoRa_read>
 80012ae:	4603      	mov	r3, r0
 80012b0:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80012b2:	200a      	movs	r0, #10
 80012b4:	f001 fbbc 	bl	8002a30 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	011b      	lsls	r3, r3, #4
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	4413      	add	r3, r2
 80012ca:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80012cc:	7bbb      	ldrb	r3, [r7, #14]
 80012ce:	461a      	mov	r2, r3
 80012d0:	211e      	movs	r1, #30
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 f8a3 	bl	800141e <LoRa_write>
	HAL_Delay(10);
 80012d8:	200a      	movs	r0, #10
 80012da:	f001 fba9 	bl	8002a30 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ff6c 	bl	80011bc <LoRa_setAutoLDO>
}
 80012e4:	bf00      	nop
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80012f8:	78fb      	ldrb	r3, [r7, #3]
 80012fa:	461a      	mov	r2, r3
 80012fc:	2109      	movs	r1, #9
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 f88d 	bl	800141e <LoRa_write>
	HAL_Delay(10);
 8001304:	200a      	movs	r0, #10
 8001306:	f001 fb93 	bl	8002a30 <HAL_Delay>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <LoRa_setAddr>:
 * 		int Addr	  -> Address of Node that you want to set
 *
 * 		return Nothing.
 * */
void LoRa_setAddr(LoRa* _LoRa, uint8_t Addr)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	460b      	mov	r3, r1
 800131c:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegNodeAdrs, Addr);
 800131e:	78fb      	ldrb	r3, [r7, #3]
 8001320:	461a      	mov	r2, r3
 8001322:	2133      	movs	r1, #51	@ 0x33
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 f87a 	bl	800141e <LoRa_write>
	HAL_Delay(10);
 800132a:	200a      	movs	r0, #10
 800132c:	f001 fb80 	bl	8002a30 <HAL_Delay>
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001348:	78fb      	ldrb	r3, [r7, #3]
 800134a:	2b2c      	cmp	r3, #44	@ 0x2c
 800134c:	d801      	bhi.n	8001352 <LoRa_setOCP+0x1a>
		current = 45;
 800134e:	232d      	movs	r3, #45	@ 0x2d
 8001350:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8001352:	78fb      	ldrb	r3, [r7, #3]
 8001354:	2bf0      	cmp	r3, #240	@ 0xf0
 8001356:	d901      	bls.n	800135c <LoRa_setOCP+0x24>
		current = 240;
 8001358:	23f0      	movs	r3, #240	@ 0xf0
 800135a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 800135c:	78fb      	ldrb	r3, [r7, #3]
 800135e:	2b78      	cmp	r3, #120	@ 0x78
 8001360:	d809      	bhi.n	8001376 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8001362:	78fb      	ldrb	r3, [r7, #3]
 8001364:	3b2d      	subs	r3, #45	@ 0x2d
 8001366:	4a12      	ldr	r2, [pc, #72]	@ (80013b0 <LoRa_setOCP+0x78>)
 8001368:	fb82 1203 	smull	r1, r2, r2, r3
 800136c:	1052      	asrs	r2, r2, #1
 800136e:	17db      	asrs	r3, r3, #31
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	73fb      	strb	r3, [r7, #15]
 8001374:	e00b      	b.n	800138e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8001376:	78fb      	ldrb	r3, [r7, #3]
 8001378:	2bf0      	cmp	r3, #240	@ 0xf0
 800137a:	d808      	bhi.n	800138e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	331e      	adds	r3, #30
 8001380:	4a0b      	ldr	r2, [pc, #44]	@ (80013b0 <LoRa_setOCP+0x78>)
 8001382:	fb82 1203 	smull	r1, r2, r2, r3
 8001386:	1092      	asrs	r2, r2, #2
 8001388:	17db      	asrs	r3, r3, #31
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	3320      	adds	r3, #32
 8001392:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	461a      	mov	r2, r3
 8001398:	210b      	movs	r1, #11
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f83f 	bl	800141e <LoRa_write>
	HAL_Delay(10);
 80013a0:	200a      	movs	r0, #10
 80013a2:	f001 fb45 	bl	8002a30 <HAL_Delay>
}
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	66666667 	.word	0x66666667

080013b4 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80013bc:	211e      	movs	r1, #30
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 f813 	bl	80013ea <LoRa_read>
 80013c4:	4603      	mov	r3, r0
 80013c6:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	f043 0307 	orr.w	r3, r3, #7
 80013ce:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80013d0:	7bbb      	ldrb	r3, [r7, #14]
 80013d2:	461a      	mov	r2, r3
 80013d4:	211e      	movs	r1, #30
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 f821 	bl	800141e <LoRa_write>
	HAL_Delay(10);
 80013dc:	200a      	movs	r0, #10
 80013de:	f001 fb27 	bl	8002a30 <HAL_Delay>
}
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af02      	add	r7, sp, #8
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	460b      	mov	r3, r1
 80013f4:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80013f6:	78fb      	ldrb	r3, [r7, #3]
 80013f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001400:	f107 030f 	add.w	r3, r7, #15
 8001404:	f107 010e 	add.w	r1, r7, #14
 8001408:	2201      	movs	r2, #1
 800140a:	9200      	str	r2, [sp, #0]
 800140c:	2201      	movs	r2, #1
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff fe32 	bl	8001078 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af02      	add	r7, sp, #8
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	460b      	mov	r3, r1
 8001428:	70fb      	strb	r3, [r7, #3]
 800142a:	4613      	mov	r3, r2
 800142c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800142e:	78fb      	ldrb	r3, [r7, #3]
 8001430:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001434:	b2db      	uxtb	r3, r3
 8001436:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001438:	78bb      	ldrb	r3, [r7, #2]
 800143a:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 800143c:	f107 030f 	add.w	r3, r7, #15
 8001440:	f107 010e 	add.w	r1, r7, #14
 8001444:	2201      	movs	r2, #1
 8001446:	9200      	str	r2, [sp, #0]
 8001448:	2201      	movs	r2, #1
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff fe52 	bl	80010f4 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	461a      	mov	r2, r3
 8001464:	460b      	mov	r3, r1
 8001466:	72fb      	strb	r3, [r7, #11]
 8001468:	4613      	mov	r3, r2
 800146a:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 800146c:	7afb      	ldrb	r3, [r7, #11]
 800146e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001472:	b2db      	uxtb	r3, r3
 8001474:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6818      	ldr	r0, [r3, #0]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	889b      	ldrh	r3, [r3, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	4619      	mov	r1, r3
 8001482:	f001 fe3d 	bl	8003100 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6998      	ldr	r0, [r3, #24]
 800148a:	f107 0117 	add.w	r1, r7, #23
 800148e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001492:	2201      	movs	r2, #1
 8001494:	f003 fb46 	bl	8004b24 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001498:	bf00      	nop
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	4618      	mov	r0, r3
 80014a0:	f003 ff46 	bl	8005330 <HAL_SPI_GetState>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d1f7      	bne.n	800149a <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6998      	ldr	r0, [r3, #24]
 80014ae:	7abb      	ldrb	r3, [r7, #10]
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	f003 fb34 	bl	8004b24 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80014bc:	bf00      	nop
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f003 ff34 	bl	8005330 <HAL_SPI_GetState>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d1f7      	bne.n	80014be <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6818      	ldr	r0, [r3, #0]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	889b      	ldrh	r3, [r3, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	4619      	mov	r1, r3
 80014da:	f001 fe11 	bl	8003100 <HAL_GPIO_WritePin>
}
 80014de:	bf00      	nop
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]

	return 1;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr

080014fa <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af00      	add	r7, sp, #0
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	4611      	mov	r1, r2
 8001506:	461a      	mov	r2, r3
 8001508:	460b      	mov	r3, r1
 800150a:	71fb      	strb	r3, [r7, #7]
 800150c:	4613      	mov	r3, r2
 800150e:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001516:	2101      	movs	r1, #1
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f7ff fd5c 	bl	8000fd6 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 800151e:	210e      	movs	r1, #14
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f7ff ff62 	bl	80013ea <LoRa_read>
 8001526:	4603      	mov	r3, r0
 8001528:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800152a:	7cfb      	ldrb	r3, [r7, #19]
 800152c:	461a      	mov	r2, r3
 800152e:	210d      	movs	r1, #13
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f7ff ff74 	bl	800141e <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	461a      	mov	r2, r3
 800153a:	2122      	movs	r1, #34	@ 0x22
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f7ff ff6e 	bl	800141e <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	68ba      	ldr	r2, [r7, #8]
 8001546:	2100      	movs	r1, #0
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f7ff ff85 	bl	8001458 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 800154e:	2103      	movs	r1, #3
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f7ff fd40 	bl	8000fd6 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001556:	2112      	movs	r1, #18
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f7ff ff46 	bl	80013ea <LoRa_read>
 800155e:	4603      	mov	r3, r0
 8001560:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8001562:	7cfb      	ldrb	r3, [r7, #19]
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00a      	beq.n	8001582 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 800156c:	22ff      	movs	r2, #255	@ 0xff
 800156e:	2112      	movs	r1, #18
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f7ff ff54 	bl	800141e <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001576:	6979      	ldr	r1, [r7, #20]
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f7ff fd2c 	bl	8000fd6 <LoRa_gotoMode>
			return 1;
 800157e:	2301      	movs	r3, #1
 8001580:	e00f      	b.n	80015a2 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8001582:	88bb      	ldrh	r3, [r7, #4]
 8001584:	3b01      	subs	r3, #1
 8001586:	80bb      	strh	r3, [r7, #4]
 8001588:	88bb      	ldrh	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d105      	bne.n	800159a <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 800158e:	6979      	ldr	r1, [r7, #20]
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f7ff fd20 	bl	8000fd6 <LoRa_gotoMode>
				return 0;
 8001596:	2300      	movs	r3, #0
 8001598:	e003      	b.n	80015a2 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 800159a:	2001      	movs	r0, #1
 800159c:	f001 fa48 	bl	8002a30 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 80015a0:	e7d9      	b.n	8001556 <LoRa_transmit+0x5c>
	}
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80015b2:	2105      	movs	r1, #5
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff fd0e 	bl	8000fd6 <LoRa_gotoMode>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 80015c2:	b590      	push	{r4, r7, lr}
 80015c4:	b089      	sub	sp, #36	@ 0x24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60f8      	str	r0, [r7, #12]
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	4613      	mov	r3, r2
 80015ce:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 80015d4:	2300      	movs	r3, #0
 80015d6:	61bb      	str	r3, [r7, #24]
 80015d8:	e007      	b.n	80015ea <LoRa_receive+0x28>
		data[i]=0;
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	68ba      	ldr	r2, [r7, #8]
 80015de:	4413      	add	r3, r2
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	3301      	adds	r3, #1
 80015e8:	61bb      	str	r3, [r7, #24]
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	dbf3      	blt.n	80015da <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80015f2:	2101      	movs	r1, #1
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	f7ff fcee 	bl	8000fd6 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 80015fa:	2112      	movs	r1, #18
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f7ff fef4 	bl	80013ea <LoRa_read>
 8001602:	4603      	mov	r3, r0
 8001604:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8001606:	7cfb      	ldrb	r3, [r7, #19]
 8001608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800160c:	2b00      	cmp	r3, #0
 800160e:	d02f      	beq.n	8001670 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001610:	22ff      	movs	r2, #255	@ 0xff
 8001612:	2112      	movs	r1, #18
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f7ff ff02 	bl	800141e <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 800161a:	2113      	movs	r1, #19
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f7ff fee4 	bl	80013ea <LoRa_read>
 8001622:	4603      	mov	r3, r0
 8001624:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8001626:	2110      	movs	r1, #16
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff fede 	bl	80013ea <LoRa_read>
 800162e:	4603      	mov	r3, r0
 8001630:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001632:	7cfb      	ldrb	r3, [r7, #19]
 8001634:	461a      	mov	r2, r3
 8001636:	210d      	movs	r1, #13
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f7ff fef0 	bl	800141e <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 800163e:	7cba      	ldrb	r2, [r7, #18]
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	4293      	cmp	r3, r2
 8001644:	bf28      	it	cs
 8001646:	4613      	movcs	r3, r2
 8001648:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	e00b      	b.n	8001668 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	18d4      	adds	r4, r2, r3
 8001656:	2100      	movs	r1, #0
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f7ff fec6 	bl	80013ea <LoRa_read>
 800165e:	4603      	mov	r3, r0
 8001660:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	3301      	adds	r3, #1
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	7ffb      	ldrb	r3, [r7, #31]
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	429a      	cmp	r2, r3
 800166e:	dbef      	blt.n	8001650 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001670:	2105      	movs	r1, #5
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f7ff fcaf 	bl	8000fd6 <LoRa_gotoMode>
    return min;
 8001678:	7ffb      	ldrb	r3, [r7, #31]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3724      	adds	r7, #36	@ 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd90      	pop	{r4, r7, pc}

08001682 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001682:	b580      	push	{r7, lr}
 8001684:	b084      	sub	sp, #16
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ff2b 	bl	80014e6 <LoRa_isvalid>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 8096 	beq.w	80017c4 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001698:	2100      	movs	r1, #0
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff fc9b 	bl	8000fd6 <LoRa_gotoMode>
			HAL_Delay(10);
 80016a0:	200a      	movs	r0, #10
 80016a2:	f001 f9c5 	bl	8002a30 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80016a6:	2101      	movs	r1, #1
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff fe9e 	bl	80013ea <LoRa_read>
 80016ae:	4603      	mov	r3, r0
 80016b0:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80016b2:	200a      	movs	r0, #10
 80016b4:	f001 f9bc 	bl	8002a30 <HAL_Delay>
			data = read | 0x80;
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016be:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80016c0:	7bbb      	ldrb	r3, [r7, #14]
 80016c2:	461a      	mov	r2, r3
 80016c4:	2101      	movs	r1, #1
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff fea9 	bl	800141e <LoRa_write>
			HAL_Delay(100);
 80016cc:	2064      	movs	r0, #100	@ 0x64
 80016ce:	f001 f9af 	bl	8002a30 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	4619      	mov	r1, r3
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff fda5 	bl	8001228 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80016e4:	4619      	mov	r1, r3
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff fe00 	bl	80012ec <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80016f2:	4619      	mov	r1, r3
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff fe1f 	bl	8001338 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80016fa:	2223      	movs	r2, #35	@ 0x23
 80016fc:	210c      	movs	r1, #12
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff fe8d 	bl	800141e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fe55 	bl	80013b4 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001710:	4619      	mov	r1, r3
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff fdb8 	bl	8001288 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001718:	22ff      	movs	r2, #255	@ 0xff
 800171a:	211f      	movs	r1, #31
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff fe7e 	bl	800141e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800172c:	011b      	lsls	r3, r3, #4
 800172e:	b2da      	uxtb	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	b2db      	uxtb	r3, r3
 800173a:	4413      	add	r3, r2
 800173c:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 800173e:	7bbb      	ldrb	r3, [r7, #14]
 8001740:	461a      	mov	r2, r3
 8001742:	211d      	movs	r1, #29
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff fe6a 	bl	800141e <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff fd36 	bl	80011bc <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	b29b      	uxth	r3, r3
 8001758:	b2db      	uxtb	r3, r3
 800175a:	461a      	mov	r2, r3
 800175c:	2120      	movs	r1, #32
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff fe5d 	bl	800141e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001768:	b2db      	uxtb	r3, r3
 800176a:	461a      	mov	r2, r3
 800176c:	2121      	movs	r1, #33	@ 0x21
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff fe55 	bl	800141e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001774:	2140      	movs	r1, #64	@ 0x40
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff fe37 	bl	80013ea <LoRa_read>
 800177c:	4603      	mov	r3, r0
 800177e:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001786:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001788:	7bbb      	ldrb	r3, [r7, #14]
 800178a:	461a      	mov	r2, r3
 800178c:	2140      	movs	r1, #64	@ 0x40
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fe45 	bl	800141e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001794:	2101      	movs	r1, #1
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff fc1d 	bl	8000fd6 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80017a2:	200a      	movs	r0, #10
 80017a4:	f001 f944 	bl	8002a30 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80017a8:	2142      	movs	r1, #66	@ 0x42
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff fe1d 	bl	80013ea <LoRa_read>
 80017b0:	4603      	mov	r3, r0
 80017b2:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	2b12      	cmp	r3, #18
 80017b8:	d101      	bne.n	80017be <LoRa_init+0x13c>
				return LORA_OK;
 80017ba:	23c8      	movs	r3, #200	@ 0xc8
 80017bc:	e004      	b.n	80017c8 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 80017be:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 80017c2:	e001      	b.n	80017c8 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 80017c4:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4a06      	ldr	r2, [pc, #24]	@ (80017f8 <vApplicationGetIdleTaskMemory+0x28>)
 80017e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	4a05      	ldr	r2, [pc, #20]	@ (80017fc <vApplicationGetIdleTaskMemory+0x2c>)
 80017e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2280      	movs	r2, #128	@ 0x80
 80017ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80017ee:	bf00      	nop
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	20000090 	.word	0x20000090
 80017fc:	200000e4 	.word	0x200000e4

08001800 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001808:	1d39      	adds	r1, r7, #4
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
 800180e:	2201      	movs	r2, #1
 8001810:	4803      	ldr	r0, [pc, #12]	@ (8001820 <__io_putchar+0x20>)
 8001812:	f003 fef6 	bl	8005602 <HAL_UART_Transmit>
	return ch;
 8001816:	687b      	ldr	r3, [r7, #4]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000390 	.word	0x20000390

08001824 <uint8_to_int>:
    *low_byte = value & 0xFF;          // Byte thấp
    *high_byte = (value >> 8) & 0xFF;  // Byte cao
}

// Chuyển đổi 2 byte (uint8_t) thành int
int uint8_to_int(uint8_t high_byte, uint8_t low_byte) {
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	460a      	mov	r2, r1
 800182e:	71fb      	strb	r3, [r7, #7]
 8001830:	4613      	mov	r3, r2
 8001832:	71bb      	strb	r3, [r7, #6]
    int result = (high_byte << 8) | low_byte; // Kết hợp hai byte
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	021a      	lsls	r2, r3, #8
 8001838:	79bb      	ldrb	r3, [r7, #6]
 800183a:	4313      	orrs	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
    if (high_byte & 0x80) { // Kiểm tra bit dấu (nếu high_byte >= 128)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	2b00      	cmp	r3, #0
 8001844:	da03      	bge.n	800184e <uint8_to_int+0x2a>
        result -= 0x10000;  // �?i�?u chỉnh cho số âm
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 800184c:	60fb      	str	r3, [r7, #12]
    }
    return result;
 800184e:	68fb      	ldr	r3, [r7, #12]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
	...

0800185c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800185c:	b5b0      	push	{r4, r5, r7, lr}
 800185e:	b0a0      	sub	sp, #128	@ 0x80
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001862:	f001 f883 	bl	800296c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001866:	f000 f907 	bl	8001a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800186a:	f000 f9d9 	bl	8001c20 <MX_GPIO_Init>
  MX_I2C1_Init();
 800186e:	f000 f949 	bl	8001b04 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001872:	f000 f975 	bl	8001b60 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001876:	f000 f9a9 	bl	8001bcc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  myLoRa = newLoRa();
 800187a:	4c68      	ldr	r4, [pc, #416]	@ (8001a1c <main+0x1c0>)
 800187c:	463b      	mov	r3, r7
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fb80 	bl	8000f84 <newLoRa>
 8001884:	4625      	mov	r5, r4
 8001886:	463c      	mov	r4, r7
 8001888:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800188a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800188c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800188e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001890:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001894:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      	myLoRa.CS_port 		= NSS_GPIO_Port;
 8001898:	4b60      	ldr	r3, [pc, #384]	@ (8001a1c <main+0x1c0>)
 800189a:	4a61      	ldr	r2, [pc, #388]	@ (8001a20 <main+0x1c4>)
 800189c:	601a      	str	r2, [r3, #0]
      	myLoRa.CS_pin 		= NSS_Pin;
 800189e:	4b5f      	ldr	r3, [pc, #380]	@ (8001a1c <main+0x1c0>)
 80018a0:	2210      	movs	r2, #16
 80018a2:	809a      	strh	r2, [r3, #4]
      	myLoRa.reset_port 	= RST_GPIO_Port;
 80018a4:	4b5d      	ldr	r3, [pc, #372]	@ (8001a1c <main+0x1c0>)
 80018a6:	4a5f      	ldr	r2, [pc, #380]	@ (8001a24 <main+0x1c8>)
 80018a8:	609a      	str	r2, [r3, #8]
      	myLoRa.reset_pin 	= RST_Pin;
 80018aa:	4b5c      	ldr	r3, [pc, #368]	@ (8001a1c <main+0x1c0>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	819a      	strh	r2, [r3, #12]
      	myLoRa.DIO0_port 	= DIO0_GPIO_Port;
 80018b0:	4b5a      	ldr	r3, [pc, #360]	@ (8001a1c <main+0x1c0>)
 80018b2:	4a5c      	ldr	r2, [pc, #368]	@ (8001a24 <main+0x1c8>)
 80018b4:	611a      	str	r2, [r3, #16]
      	myLoRa.DIO0_pin 	= DIO0_Pin;
 80018b6:	4b59      	ldr	r3, [pc, #356]	@ (8001a1c <main+0x1c0>)
 80018b8:	2202      	movs	r2, #2
 80018ba:	829a      	strh	r2, [r3, #20]
      	myLoRa.hSPIx 		= &hspi1;
 80018bc:	4b57      	ldr	r3, [pc, #348]	@ (8001a1c <main+0x1c0>)
 80018be:	4a5a      	ldr	r2, [pc, #360]	@ (8001a28 <main+0x1cc>)
 80018c0:	619a      	str	r2, [r3, #24]
      	myLoRa.frequency             = 433;             // default = 433 MHz
 80018c2:	4b56      	ldr	r3, [pc, #344]	@ (8001a1c <main+0x1c0>)
 80018c4:	f240 12b1 	movw	r2, #433	@ 0x1b1
 80018c8:	621a      	str	r2, [r3, #32]
      	myLoRa.spredingFactor        = SF_9;            // default = SF_7
 80018ca:	4b54      	ldr	r3, [pc, #336]	@ (8001a1c <main+0x1c0>)
 80018cc:	2209      	movs	r2, #9
 80018ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      	myLoRa.bandWidth             = BW_125KHz;       // default = BW_125KHz
 80018d2:	4b52      	ldr	r3, [pc, #328]	@ (8001a1c <main+0x1c0>)
 80018d4:	2207      	movs	r2, #7
 80018d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      	myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 80018da:	4b50      	ldr	r3, [pc, #320]	@ (8001a1c <main+0x1c0>)
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
      	myLoRa.power                 = POWER_17db;      // default = 20db
 80018e2:	4b4e      	ldr	r3, [pc, #312]	@ (8001a1c <main+0x1c0>)
 80018e4:	22fc      	movs	r2, #252	@ 0xfc
 80018e6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
      	myLoRa.overCurrentProtection = 130;             // default = 100 mA
 80018ea:	4b4c      	ldr	r3, [pc, #304]	@ (8001a1c <main+0x1c0>)
 80018ec:	2282      	movs	r2, #130	@ 0x82
 80018ee:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
      	myLoRa.preamble              = 8;              // default = 8;*/
 80018f2:	4b4a      	ldr	r3, [pc, #296]	@ (8001a1c <main+0x1c0>)
 80018f4:	2208      	movs	r2, #8
 80018f6:	851a      	strh	r2, [r3, #40]	@ 0x28

      	LoRa_setAddr(&myLoRa, AddrNode);
 80018f8:	4b4c      	ldr	r3, [pc, #304]	@ (8001a2c <main+0x1d0>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	4619      	mov	r1, r3
 80018fe:	4847      	ldr	r0, [pc, #284]	@ (8001a1c <main+0x1c0>)
 8001900:	f7ff fd07 	bl	8001312 <LoRa_setAddr>
  	if(LoRa_init(&myLoRa) == LORA_OK)
 8001904:	4845      	ldr	r0, [pc, #276]	@ (8001a1c <main+0x1c0>)
 8001906:	f7ff febc 	bl	8001682 <LoRa_init>
 800190a:	4603      	mov	r3, r0
 800190c:	2bc8      	cmp	r3, #200	@ 0xc8
 800190e:	d102      	bne.n	8001916 <main+0xba>
  		LoRa_status = 1;
 8001910:	4b47      	ldr	r3, [pc, #284]	@ (8001a30 <main+0x1d4>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
  	printf("Khoi tao LoRa thanh cong\n");
 8001916:	4847      	ldr	r0, [pc, #284]	@ (8001a34 <main+0x1d8>)
 8001918:	f006 fef0 	bl	80086fc <puts>

  	LoRa_startReceiving(&myLoRa);
 800191c:	483f      	ldr	r0, [pc, #252]	@ (8001a1c <main+0x1c0>)
 800191e:	f7ff fe44 	bl	80015aa <LoRa_startReceiving>
  	SHT2x_Init(&hi2c1);
 8001922:	4845      	ldr	r0, [pc, #276]	@ (8001a38 <main+0x1dc>)
 8001924:	f000 fd40 	bl	80023a8 <SHT2x_Init>
  	SHT2x_SetResolution(RES_14_12);
 8001928:	2000      	movs	r0, #0
 800192a:	f000 fddf 	bl	80024ec <SHT2x_SetResolution>
  	printf("Khoi tao sensor thanh cong\n");
 800192e:	4843      	ldr	r0, [pc, #268]	@ (8001a3c <main+0x1e0>)
 8001930:	f006 fee4 	bl	80086fc <puts>

  	HAL_UART_Receive_IT(&huart1, &Rx_data, 1);
 8001934:	2201      	movs	r2, #1
 8001936:	4942      	ldr	r1, [pc, #264]	@ (8001a40 <main+0x1e4>)
 8001938:	4842      	ldr	r0, [pc, #264]	@ (8001a44 <main+0x1e8>)
 800193a:	f003 feed 	bl	8005718 <HAL_UART_Receive_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 800193e:	2300      	movs	r3, #0
 8001940:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001942:	2300      	movs	r3, #0
 8001944:	67fb      	str	r3, [r7, #124]	@ 0x7c
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8001946:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800194a:	2101      	movs	r1, #1
 800194c:	4618      	mov	r0, r3
 800194e:	f004 fcfb 	bl	8006348 <osSemaphoreCreate>
 8001952:	4603      	mov	r3, r0
 8001954:	4a3c      	ldr	r2, [pc, #240]	@ (8001a48 <main+0x1ec>)
 8001956:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 9, uint8_t);
 8001958:	4b3c      	ldr	r3, [pc, #240]	@ (8001a4c <main+0x1f0>)
 800195a:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 800195e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001960:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8001964:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f004 fd1e 	bl	80063ac <osMessageCreate>
 8001970:	4603      	mov	r3, r0
 8001972:	4a37      	ldr	r2, [pc, #220]	@ (8001a50 <main+0x1f4>)
 8001974:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  Queue02Handle = xQueueCreate(10, sizeof(uint8_t)*10);
 8001976:	2200      	movs	r2, #0
 8001978:	210a      	movs	r1, #10
 800197a:	200a      	movs	r0, #10
 800197c:	f004 fed5 	bl	800672a <xQueueGenericCreate>
 8001980:	4603      	mov	r3, r0
 8001982:	4a34      	ldr	r2, [pc, #208]	@ (8001a54 <main+0x1f8>)
 8001984:	6013      	str	r3, [r2, #0]
  Queue03Handle = xQueueCreate(10, sizeof(uint8_t) * 8);
 8001986:	2200      	movs	r2, #0
 8001988:	2108      	movs	r1, #8
 800198a:	200a      	movs	r0, #10
 800198c:	f004 fecd 	bl	800672a <xQueueGenericCreate>
 8001990:	4603      	mov	r3, r0
 8001992:	4a31      	ldr	r2, [pc, #196]	@ (8001a58 <main+0x1fc>)
 8001994:	6013      	str	r3, [r2, #0]
  Queue04Handle = xQueueCreate(10, sizeof(uint8_t) * 8);
 8001996:	2200      	movs	r2, #0
 8001998:	2108      	movs	r1, #8
 800199a:	200a      	movs	r0, #10
 800199c:	f004 fec5 	bl	800672a <xQueueGenericCreate>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4a2e      	ldr	r2, [pc, #184]	@ (8001a5c <main+0x200>)
 80019a4:	6013      	str	r3, [r2, #0]
  Queue05Handle = xQueueCreate(10, sizeof(uint8_t) * 8);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2108      	movs	r1, #8
 80019aa:	200a      	movs	r0, #10
 80019ac:	f004 febd 	bl	800672a <xQueueGenericCreate>
 80019b0:	4603      	mov	r3, r0
 80019b2:	4a2b      	ldr	r2, [pc, #172]	@ (8001a60 <main+0x204>)
 80019b4:	6013      	str	r3, [r2, #0]
  Queue06Handle = xQueueCreate(1, sizeof(uint8_t) * 4);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2104      	movs	r1, #4
 80019ba:	2001      	movs	r0, #1
 80019bc:	f004 feb5 	bl	800672a <xQueueGenericCreate>
 80019c0:	4603      	mov	r3, r0
 80019c2:	4a28      	ldr	r2, [pc, #160]	@ (8001a64 <main+0x208>)
 80019c4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80019c6:	4b28      	ldr	r3, [pc, #160]	@ (8001a68 <main+0x20c>)
 80019c8:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 80019cc:	461d      	mov	r5, r3
 80019ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80019da:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f004 fc51 	bl	8006288 <osThreadCreate>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4a20      	ldr	r2, [pc, #128]	@ (8001a6c <main+0x210>)
 80019ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityHigh, 0, 256);
 80019ec:	4b20      	ldr	r3, [pc, #128]	@ (8001a70 <main+0x214>)
 80019ee:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80019f2:	461d      	mov	r5, r3
 80019f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8001a00:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f004 fc3e 	bl	8006288 <osThreadCreate>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4a19      	ldr	r2, [pc, #100]	@ (8001a74 <main+0x218>)
 8001a10:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001a12:	f004 fc32 	bl	800627a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a16:	bf00      	nop
 8001a18:	e7fd      	b.n	8001a16 <main+0x1ba>
 8001a1a:	bf00      	nop
 8001a1c:	20000400 	.word	0x20000400
 8001a20:	40010800 	.word	0x40010800
 8001a24:	40010c00 	.word	0x40010c00
 8001a28:	20000338 	.word	0x20000338
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	2000042c 	.word	0x2000042c
 8001a34:	080094a8 	.word	0x080094a8
 8001a38:	200002e4 	.word	0x200002e4
 8001a3c:	080094c4 	.word	0x080094c4
 8001a40:	200003fc 	.word	0x200003fc
 8001a44:	20000390 	.word	0x20000390
 8001a48:	200003e4 	.word	0x200003e4
 8001a4c:	080094e0 	.word	0x080094e0
 8001a50:	200003e0 	.word	0x200003e0
 8001a54:	200003e8 	.word	0x200003e8
 8001a58:	200003ec 	.word	0x200003ec
 8001a5c:	200003f0 	.word	0x200003f0
 8001a60:	200003f4 	.word	0x200003f4
 8001a64:	200003f8 	.word	0x200003f8
 8001a68:	080094fc 	.word	0x080094fc
 8001a6c:	200003d8 	.word	0x200003d8
 8001a70:	08009524 	.word	0x08009524
 8001a74:	200003dc 	.word	0x200003dc

08001a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b090      	sub	sp, #64	@ 0x40
 8001a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a7e:	f107 0318 	add.w	r3, r7, #24
 8001a82:	2228      	movs	r2, #40	@ 0x28
 8001a84:	2100      	movs	r1, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f006 ff18 	bl	80088bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a9e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001aa2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aac:	2302      	movs	r3, #2
 8001aae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ab0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ab6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001abc:	f107 0318 	add.w	r3, r7, #24
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f002 fb9b 	bl	80041fc <HAL_RCC_OscConfig>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001acc:	f000 fc66 	bl	800239c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad0:	230f      	movs	r3, #15
 8001ad2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001adc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ae0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	2102      	movs	r1, #2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f002 fe08 	bl	8004700 <HAL_RCC_ClockConfig>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001af6:	f000 fc51 	bl	800239c <Error_Handler>
  }
}
 8001afa:	bf00      	nop
 8001afc:	3740      	adds	r7, #64	@ 0x40
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b08:	4b12      	ldr	r3, [pc, #72]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b0a:	4a13      	ldr	r2, [pc, #76]	@ (8001b58 <MX_I2C1_Init+0x54>)
 8001b0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b0e:	4b11      	ldr	r3, [pc, #68]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b10:	4a12      	ldr	r2, [pc, #72]	@ (8001b5c <MX_I2C1_Init+0x58>)
 8001b12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b14:	4b0f      	ldr	r3, [pc, #60]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b20:	4b0c      	ldr	r3, [pc, #48]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b28:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b2e:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b34:	4b07      	ldr	r3, [pc, #28]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b3a:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b40:	4804      	ldr	r0, [pc, #16]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b42:	f001 fb27 	bl	8003194 <HAL_I2C_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b4c:	f000 fc26 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	200002e4 	.word	0x200002e4
 8001b58:	40005400 	.word	0x40005400
 8001b5c:	000186a0 	.word	0x000186a0

08001b60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b64:	4b17      	ldr	r3, [pc, #92]	@ (8001bc4 <MX_SPI1_Init+0x64>)
 8001b66:	4a18      	ldr	r2, [pc, #96]	@ (8001bc8 <MX_SPI1_Init+0x68>)
 8001b68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b6a:	4b16      	ldr	r3, [pc, #88]	@ (8001bc4 <MX_SPI1_Init+0x64>)
 8001b6c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b72:	4b14      	ldr	r3, [pc, #80]	@ (8001bc4 <MX_SPI1_Init+0x64>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b78:	4b12      	ldr	r3, [pc, #72]	@ (8001bc4 <MX_SPI1_Init+0x64>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b7e:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <MX_SPI1_Init+0x64>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b84:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc4 <MX_SPI1_Init+0x64>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc4 <MX_SPI1_Init+0x64>)
 8001b8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b92:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <MX_SPI1_Init+0x64>)
 8001b94:	2210      	movs	r2, #16
 8001b96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b98:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc4 <MX_SPI1_Init+0x64>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b9e:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <MX_SPI1_Init+0x64>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ba4:	4b07      	ldr	r3, [pc, #28]	@ (8001bc4 <MX_SPI1_Init+0x64>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001baa:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <MX_SPI1_Init+0x64>)
 8001bac:	220a      	movs	r2, #10
 8001bae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bb0:	4804      	ldr	r0, [pc, #16]	@ (8001bc4 <MX_SPI1_Init+0x64>)
 8001bb2:	f002 ff33 	bl	8004a1c <HAL_SPI_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001bbc:	f000 fbee 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000338 	.word	0x20000338
 8001bc8:	40013000 	.word	0x40013000

08001bcc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <MX_USART1_UART_Init+0x4c>)
 8001bd2:	4a12      	ldr	r2, [pc, #72]	@ (8001c1c <MX_USART1_UART_Init+0x50>)
 8001bd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bd6:	4b10      	ldr	r3, [pc, #64]	@ (8001c18 <MX_USART1_UART_Init+0x4c>)
 8001bd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bde:	4b0e      	ldr	r3, [pc, #56]	@ (8001c18 <MX_USART1_UART_Init+0x4c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001be4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c18 <MX_USART1_UART_Init+0x4c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bea:	4b0b      	ldr	r3, [pc, #44]	@ (8001c18 <MX_USART1_UART_Init+0x4c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bf0:	4b09      	ldr	r3, [pc, #36]	@ (8001c18 <MX_USART1_UART_Init+0x4c>)
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bf6:	4b08      	ldr	r3, [pc, #32]	@ (8001c18 <MX_USART1_UART_Init+0x4c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <MX_USART1_UART_Init+0x4c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c02:	4805      	ldr	r0, [pc, #20]	@ (8001c18 <MX_USART1_UART_Init+0x4c>)
 8001c04:	f003 fcad 	bl	8005562 <HAL_UART_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c0e:	f000 fbc5 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000390 	.word	0x20000390
 8001c1c:	40013800 	.word	0x40013800

08001c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c26:	f107 0310 	add.w	r3, r7, #16
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c34:	4b44      	ldr	r3, [pc, #272]	@ (8001d48 <MX_GPIO_Init+0x128>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	4a43      	ldr	r2, [pc, #268]	@ (8001d48 <MX_GPIO_Init+0x128>)
 8001c3a:	f043 0310 	orr.w	r3, r3, #16
 8001c3e:	6193      	str	r3, [r2, #24]
 8001c40:	4b41      	ldr	r3, [pc, #260]	@ (8001d48 <MX_GPIO_Init+0x128>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f003 0310 	and.w	r3, r3, #16
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c4c:	4b3e      	ldr	r3, [pc, #248]	@ (8001d48 <MX_GPIO_Init+0x128>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	4a3d      	ldr	r2, [pc, #244]	@ (8001d48 <MX_GPIO_Init+0x128>)
 8001c52:	f043 0320 	orr.w	r3, r3, #32
 8001c56:	6193      	str	r3, [r2, #24]
 8001c58:	4b3b      	ldr	r3, [pc, #236]	@ (8001d48 <MX_GPIO_Init+0x128>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f003 0320 	and.w	r3, r3, #32
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c64:	4b38      	ldr	r3, [pc, #224]	@ (8001d48 <MX_GPIO_Init+0x128>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	4a37      	ldr	r2, [pc, #220]	@ (8001d48 <MX_GPIO_Init+0x128>)
 8001c6a:	f043 0304 	orr.w	r3, r3, #4
 8001c6e:	6193      	str	r3, [r2, #24]
 8001c70:	4b35      	ldr	r3, [pc, #212]	@ (8001d48 <MX_GPIO_Init+0x128>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7c:	4b32      	ldr	r3, [pc, #200]	@ (8001d48 <MX_GPIO_Init+0x128>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	4a31      	ldr	r2, [pc, #196]	@ (8001d48 <MX_GPIO_Init+0x128>)
 8001c82:	f043 0308 	orr.w	r3, r3, #8
 8001c86:	6193      	str	r3, [r2, #24]
 8001c88:	4b2f      	ldr	r3, [pc, #188]	@ (8001d48 <MX_GPIO_Init+0x128>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	603b      	str	r3, [r7, #0]
 8001c92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c94:	2200      	movs	r2, #0
 8001c96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c9a:	482c      	ldr	r0, [pc, #176]	@ (8001d4c <MX_GPIO_Init+0x12c>)
 8001c9c:	f001 fa30 	bl	8003100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	2110      	movs	r1, #16
 8001ca4:	482a      	ldr	r0, [pc, #168]	@ (8001d50 <MX_GPIO_Init+0x130>)
 8001ca6:	f001 fa2b 	bl	8003100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8001caa:	2201      	movs	r2, #1
 8001cac:	2101      	movs	r1, #1
 8001cae:	4829      	ldr	r0, [pc, #164]	@ (8001d54 <MX_GPIO_Init+0x134>)
 8001cb0:	f001 fa26 	bl	8003100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8001cba:	4826      	ldr	r0, [pc, #152]	@ (8001d54 <MX_GPIO_Init+0x134>)
 8001cbc:	f001 fa20 	bl	8003100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001cc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd2:	f107 0310 	add.w	r3, r7, #16
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	481c      	ldr	r0, [pc, #112]	@ (8001d4c <MX_GPIO_Init+0x12c>)
 8001cda:	f001 f88d 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8001cde:	2310      	movs	r3, #16
 8001ce0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2302      	movs	r3, #2
 8001cec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8001cee:	f107 0310 	add.w	r3, r7, #16
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4816      	ldr	r0, [pc, #88]	@ (8001d50 <MX_GPIO_Init+0x130>)
 8001cf6:	f001 f87f 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = RST_Pin|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8001cfa:	f240 3321 	movw	r3, #801	@ 0x321
 8001cfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d00:	2301      	movs	r3, #1
 8001d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	4619      	mov	r1, r3
 8001d12:	4810      	ldr	r0, [pc, #64]	@ (8001d54 <MX_GPIO_Init+0x134>)
 8001d14:	f001 f870 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d58 <MX_GPIO_Init+0x138>)
 8001d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001d24:	f107 0310 	add.w	r3, r7, #16
 8001d28:	4619      	mov	r1, r3
 8001d2a:	480a      	ldr	r0, [pc, #40]	@ (8001d54 <MX_GPIO_Init+0x134>)
 8001d2c:	f001 f864 	bl	8002df8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001d30:	2200      	movs	r2, #0
 8001d32:	2105      	movs	r1, #5
 8001d34:	2007      	movs	r0, #7
 8001d36:	f000 ff76 	bl	8002c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d3a:	2007      	movs	r0, #7
 8001d3c:	f000 ff8f 	bl	8002c5e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d40:	bf00      	nop
 8001d42:	3720      	adds	r7, #32
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40011000 	.word	0x40011000
 8001d50:	40010800 	.word	0x40010800
 8001d54:	40010c00 	.word	0x40010c00
 8001d58:	10110000 	.word	0x10110000

08001d5c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af02      	add	r7, sp, #8
 8001d62:	4603      	mov	r3, r0
 8001d64:	80fb      	strh	r3, [r7, #6]
	xHigherPriorityTaskWoken = pdFALSE;
 8001d66:	4b61      	ldr	r3, [pc, #388]	@ (8001eec <HAL_GPIO_EXTI_Callback+0x190>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
	uint8_t ISR_data = 0x32;
 8001d6c:	2332      	movs	r3, #50	@ 0x32
 8001d6e:	73fb      	strb	r3, [r7, #15]
	//char output[length + 1];
	if(GPIO_Pin == DIO0_Pin)
 8001d70:	88fb      	ldrh	r3, [r7, #6]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	f040 80b5 	bne.w	8001ee2 <HAL_GPIO_EXTI_Callback+0x186>
	{
		LoRa_receive(&myLoRa, &RxBuffer, 128);
 8001d78:	2280      	movs	r2, #128	@ 0x80
 8001d7a:	495d      	ldr	r1, [pc, #372]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0x194>)
 8001d7c:	485d      	ldr	r0, [pc, #372]	@ (8001ef4 <HAL_GPIO_EXTI_Callback+0x198>)
 8001d7e:	f7ff fc20 	bl	80015c2 <LoRa_receive>
		printf("%02X %02X %02X %02X", RxBuffer[0], RxBuffer[1], RxBuffer[2],RxBuffer[3]);
 8001d82:	4b5b      	ldr	r3, [pc, #364]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0x194>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	4619      	mov	r1, r3
 8001d88:	4b59      	ldr	r3, [pc, #356]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0x194>)
 8001d8a:	785b      	ldrb	r3, [r3, #1]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4b58      	ldr	r3, [pc, #352]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0x194>)
 8001d90:	789b      	ldrb	r3, [r3, #2]
 8001d92:	4618      	mov	r0, r3
 8001d94:	4b56      	ldr	r3, [pc, #344]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0x194>)
 8001d96:	78db      	ldrb	r3, [r3, #3]
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4856      	ldr	r0, [pc, #344]	@ (8001ef8 <HAL_GPIO_EXTI_Callback+0x19c>)
 8001d9e:	f006 fc45 	bl	800862c <iprintf>
		if ((RxBuffer[0] == Adv) ||
 8001da2:	4b53      	ldr	r3, [pc, #332]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0x194>)
 8001da4:	781a      	ldrb	r2, [r3, #0]
 8001da6:	4b55      	ldr	r3, [pc, #340]	@ (8001efc <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d015      	beq.n	8001dda <HAL_GPIO_EXTI_Callback+0x7e>
		    (RxBuffer[0] == Accepted && Joined == 0) ||
 8001dae:	4b50      	ldr	r3, [pc, #320]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0x194>)
 8001db0:	781a      	ldrb	r2, [r3, #0]
 8001db2:	4b53      	ldr	r3, [pc, #332]	@ (8001f00 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
		if ((RxBuffer[0] == Adv) ||
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d103      	bne.n	8001dc2 <HAL_GPIO_EXTI_Callback+0x66>
		    (RxBuffer[0] == Accepted && Joined == 0) ||
 8001dba:	4b52      	ldr	r3, [pc, #328]	@ (8001f04 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00b      	beq.n	8001dda <HAL_GPIO_EXTI_Callback+0x7e>
		    RxBuffer[0] == Ack || RxBuffer[0] == RequestData) {
 8001dc2:	4b4b      	ldr	r3, [pc, #300]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0x194>)
 8001dc4:	781a      	ldrb	r2, [r3, #0]
 8001dc6:	4b50      	ldr	r3, [pc, #320]	@ (8001f08 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
		    (RxBuffer[0] == Accepted && Joined == 0) ||
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d005      	beq.n	8001dda <HAL_GPIO_EXTI_Callback+0x7e>
		    RxBuffer[0] == Ack || RxBuffer[0] == RequestData) {
 8001dce:	4b48      	ldr	r3, [pc, #288]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0x194>)
 8001dd0:	781a      	ldrb	r2, [r3, #0]
 8001dd2:	4b4e      	ldr	r3, [pc, #312]	@ (8001f0c <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d177      	bne.n	8001eca <HAL_GPIO_EXTI_Callback+0x16e>
		    if (RxBuffer[0] == Adv) {
 8001dda:	4b45      	ldr	r3, [pc, #276]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0x194>)
 8001ddc:	781a      	ldrb	r2, [r3, #0]
 8001dde:	4b47      	ldr	r3, [pc, #284]	@ (8001efc <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d10a      	bne.n	8001dfc <HAL_GPIO_EXTI_Callback+0xa0>
		        printf("Nhan quang ba tu GW\n");
 8001de6:	484a      	ldr	r0, [pc, #296]	@ (8001f10 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001de8:	f006 fc88 	bl	80086fc <puts>
		        xQueueSendFromISR(Queue02Handle, &RxBuffer, &xHigherPriorityTaskWoken);
 8001dec:	4b49      	ldr	r3, [pc, #292]	@ (8001f14 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	2300      	movs	r3, #0
 8001df2:	4a3e      	ldr	r2, [pc, #248]	@ (8001eec <HAL_GPIO_EXTI_Callback+0x190>)
 8001df4:	493e      	ldr	r1, [pc, #248]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0x194>)
 8001df6:	f004 fdf5 	bl	80069e4 <xQueueGenericSendFromISR>
 8001dfa:	e061      	b.n	8001ec0 <HAL_GPIO_EXTI_Callback+0x164>
		    } else if (RxBuffer[0] == Accepted && RxBuffer[2] == AddrNode && Joined == 0) {
 8001dfc:	4b3c      	ldr	r3, [pc, #240]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0x194>)
 8001dfe:	781a      	ldrb	r2, [r3, #0]
 8001e00:	4b3f      	ldr	r3, [pc, #252]	@ (8001f00 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d114      	bne.n	8001e32 <HAL_GPIO_EXTI_Callback+0xd6>
 8001e08:	4b39      	ldr	r3, [pc, #228]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0x194>)
 8001e0a:	789a      	ldrb	r2, [r3, #2]
 8001e0c:	4b42      	ldr	r3, [pc, #264]	@ (8001f18 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d10e      	bne.n	8001e32 <HAL_GPIO_EXTI_Callback+0xd6>
 8001e14:	4b3b      	ldr	r3, [pc, #236]	@ (8001f04 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10a      	bne.n	8001e32 <HAL_GPIO_EXTI_Callback+0xd6>
		        printf("GW cho phep vao mang, gui nhiet do di\n");
 8001e1c:	483f      	ldr	r0, [pc, #252]	@ (8001f1c <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001e1e:	f006 fc6d 	bl	80086fc <puts>
		        xQueueSendFromISR(Queue03Handle, &RxBuffer, &xHigherPriorityTaskWoken);
 8001e22:	4b3f      	ldr	r3, [pc, #252]	@ (8001f20 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001e24:	6818      	ldr	r0, [r3, #0]
 8001e26:	2300      	movs	r3, #0
 8001e28:	4a30      	ldr	r2, [pc, #192]	@ (8001eec <HAL_GPIO_EXTI_Callback+0x190>)
 8001e2a:	4931      	ldr	r1, [pc, #196]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0x194>)
 8001e2c:	f004 fdda 	bl	80069e4 <xQueueGenericSendFromISR>
 8001e30:	e046      	b.n	8001ec0 <HAL_GPIO_EXTI_Callback+0x164>
		    } else if (RxBuffer[0] == RequestData && RxBuffer[1] == AddrGate && RxBuffer[2] == AddrNode && RxBuffer[3] == AddrNet && Joined == 1)
 8001e32:	4b2f      	ldr	r3, [pc, #188]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0x194>)
 8001e34:	781a      	ldrb	r2, [r3, #0]
 8001e36:	4b35      	ldr	r3, [pc, #212]	@ (8001f0c <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d120      	bne.n	8001e80 <HAL_GPIO_EXTI_Callback+0x124>
 8001e3e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0x194>)
 8001e40:	785a      	ldrb	r2, [r3, #1]
 8001e42:	4b38      	ldr	r3, [pc, #224]	@ (8001f24 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d11a      	bne.n	8001e80 <HAL_GPIO_EXTI_Callback+0x124>
 8001e4a:	4b29      	ldr	r3, [pc, #164]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0x194>)
 8001e4c:	789a      	ldrb	r2, [r3, #2]
 8001e4e:	4b32      	ldr	r3, [pc, #200]	@ (8001f18 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d114      	bne.n	8001e80 <HAL_GPIO_EXTI_Callback+0x124>
 8001e56:	4b26      	ldr	r3, [pc, #152]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0x194>)
 8001e58:	78da      	ldrb	r2, [r3, #3]
 8001e5a:	4b33      	ldr	r3, [pc, #204]	@ (8001f28 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d10e      	bne.n	8001e80 <HAL_GPIO_EXTI_Callback+0x124>
 8001e62:	4b28      	ldr	r3, [pc, #160]	@ (8001f04 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d10a      	bne.n	8001e80 <HAL_GPIO_EXTI_Callback+0x124>
		    {
		    	printf("GW yeu cau gui du lieu\n");
 8001e6a:	4830      	ldr	r0, [pc, #192]	@ (8001f2c <HAL_GPIO_EXTI_Callback+0x1d0>)
 8001e6c:	f006 fc46 	bl	80086fc <puts>
		    	xQueueSendFromISR(Queue02Handle, &RxBuffer, &xHigherPriorityTaskWoken);
 8001e70:	4b28      	ldr	r3, [pc, #160]	@ (8001f14 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	2300      	movs	r3, #0
 8001e76:	4a1d      	ldr	r2, [pc, #116]	@ (8001eec <HAL_GPIO_EXTI_Callback+0x190>)
 8001e78:	491d      	ldr	r1, [pc, #116]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0x194>)
 8001e7a:	f004 fdb3 	bl	80069e4 <xQueueGenericSendFromISR>
 8001e7e:	e01f      	b.n	8001ec0 <HAL_GPIO_EXTI_Callback+0x164>
		    }else if (RxBuffer[0] == Ack && RxBuffer[1] == AddrGate && RxBuffer[2] == AddrNode && Joined == 1)
 8001e80:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0x194>)
 8001e82:	781a      	ldrb	r2, [r3, #0]
 8001e84:	4b20      	ldr	r3, [pc, #128]	@ (8001f08 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d119      	bne.n	8001ec0 <HAL_GPIO_EXTI_Callback+0x164>
 8001e8c:	4b18      	ldr	r3, [pc, #96]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0x194>)
 8001e8e:	785a      	ldrb	r2, [r3, #1]
 8001e90:	4b24      	ldr	r3, [pc, #144]	@ (8001f24 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d113      	bne.n	8001ec0 <HAL_GPIO_EXTI_Callback+0x164>
 8001e98:	4b15      	ldr	r3, [pc, #84]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0x194>)
 8001e9a:	789a      	ldrb	r2, [r3, #2]
 8001e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001f18 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d10d      	bne.n	8001ec0 <HAL_GPIO_EXTI_Callback+0x164>
 8001ea4:	4b17      	ldr	r3, [pc, #92]	@ (8001f04 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d109      	bne.n	8001ec0 <HAL_GPIO_EXTI_Callback+0x164>
		    {
		    	printf("GW da nhan duoc du lieu\n");
 8001eac:	4820      	ldr	r0, [pc, #128]	@ (8001f30 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8001eae:	f006 fc25 	bl	80086fc <puts>
		    	xQueueSendFromISR(Queue05Handle, &RxBuffer, &xHigherPriorityTaskWoken);
 8001eb2:	4b20      	ldr	r3, [pc, #128]	@ (8001f34 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	4a0c      	ldr	r2, [pc, #48]	@ (8001eec <HAL_GPIO_EXTI_Callback+0x190>)
 8001eba:	490d      	ldr	r1, [pc, #52]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0x194>)
 8001ebc:	f004 fd92 	bl	80069e4 <xQueueGenericSendFromISR>
		    }
		    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8001ec0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ec4:	481c      	ldr	r0, [pc, #112]	@ (8001f38 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8001ec6:	f001 f933 	bl	8003130 <HAL_GPIO_TogglePin>
		    //xQueueSendFromISR(Queue02Handle, &RxBuffer, &xHigherPriorityTaskWoken);
		}

		//osSemaphoreRelease(myBinarySem01Handle);
		//xQueueSendFromISR(Queue02Handle, (void *) &output, &xHigherPriorityTaskWoken);
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001eca:	4b08      	ldr	r3, [pc, #32]	@ (8001eec <HAL_GPIO_EXTI_Callback+0x190>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d007      	beq.n	8001ee2 <HAL_GPIO_EXTI_Callback+0x186>
 8001ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f3c <HAL_GPIO_EXTI_Callback+0x1e0>)
 8001ed4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	f3bf 8f4f 	dsb	sy
 8001ede:	f3bf 8f6f 	isb	sy
//			Addr = RxBuffer[3];
//			AddrNet = RxBuffer[2];
//			memset(RxBuffer, 0, sizeof(RxBuffer));
//		}
	}
}
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	200004b4 	.word	0x200004b4
 8001ef0:	20000430 	.word	0x20000430
 8001ef4:	20000400 	.word	0x20000400
 8001ef8:	08009540 	.word	0x08009540
 8001efc:	200004b0 	.word	0x200004b0
 8001f00:	20000003 	.word	0x20000003
 8001f04:	200004b8 	.word	0x200004b8
 8001f08:	20000004 	.word	0x20000004
 8001f0c:	20000007 	.word	0x20000007
 8001f10:	08009554 	.word	0x08009554
 8001f14:	200003e8 	.word	0x200003e8
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	08009568 	.word	0x08009568
 8001f20:	200003ec 	.word	0x200003ec
 8001f24:	20000001 	.word	0x20000001
 8001f28:	20000002 	.word	0x20000002
 8001f2c:	08009590 	.word	0x08009590
 8001f30:	080095a8 	.word	0x080095a8
 8001f34:	200003f4 	.word	0x200003f4
 8001f38:	40010c00 	.word	0x40010c00
 8001f3c:	e000ed04 	.word	0xe000ed04

08001f40 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b090      	sub	sp, #64	@ 0x40
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint32_t Task_data = 1999;
 8001f48:	f240 73cf 	movw	r3, #1999	@ 0x7cf
 8001f4c:	63bb      	str	r3, [r7, #56]	@ 0x38
		uint8_t Test[4];
		uint8_t Remove[4];
  /* Infinite loop */
  for(;;)
  {
	  temp = SHT2x_GetTemperature(1);
 8001f4e:	2001      	movs	r0, #1
 8001f50:	f000 fa8a 	bl	8002468 <SHT2x_GetTemperature>
 8001f54:	6378      	str	r0, [r7, #52]	@ 0x34
	  temp = roundf(temp * 100) / 100.0;
 8001f56:	4935      	ldr	r1, [pc, #212]	@ (800202c <StartDefaultTask+0xec>)
 8001f58:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001f5a:	f7fe fe4d 	bl	8000bf8 <__aeabi_fmul>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f007 fa47 	bl	80093f4 <roundf>
 8001f66:	4603      	mov	r3, r0
 8001f68:	4930      	ldr	r1, [pc, #192]	@ (800202c <StartDefaultTask+0xec>)
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fef8 	bl	8000d60 <__aeabi_fdiv>
 8001f70:	4603      	mov	r3, r0
 8001f72:	637b      	str	r3, [r7, #52]	@ 0x34
	  dataConverter.value = temp;
 8001f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f76:	617b      	str	r3, [r7, #20]
	  for (int i = 0; i < 4; i++)
 8001f78:	2300      	movs	r3, #0
 8001f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f7c:	e00d      	b.n	8001f9a <StartDefaultTask+0x5a>
		  Test[i]=dataConverter.bytes[i];
 8001f7e:	f107 0214 	add.w	r2, r7, #20
 8001f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f84:	4413      	add	r3, r2
 8001f86:	7819      	ldrb	r1, [r3, #0]
 8001f88:	f107 0210 	add.w	r2, r7, #16
 8001f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f8e:	4413      	add	r3, r2
 8001f90:	460a      	mov	r2, r1
 8001f92:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < 4; i++)
 8001f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f96:	3301      	adds	r3, #1
 8001f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	ddee      	ble.n	8001f7e <StartDefaultTask+0x3e>
	  //rh = SHT2x_GetRelativeHumidity(1);
	  //snprintf(temp_str, sizeof(temp_str), "Temp: %.4f", (double)temp);
	  if (threshold > 0 && temp > (float)threshold)
 8001fa0:	4b23      	ldr	r3, [pc, #140]	@ (8002030 <StartDefaultTask+0xf0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	dd15      	ble.n	8001fd4 <StartDefaultTask+0x94>
 8001fa8:	4b21      	ldr	r3, [pc, #132]	@ (8002030 <StartDefaultTask+0xf0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe fdcf 	bl	8000b50 <__aeabi_i2f>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001fb8:	f7fe ffda 	bl	8000f70 <__aeabi_fcmpgt>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d008      	beq.n	8001fd4 <StartDefaultTask+0x94>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	2120      	movs	r1, #32
 8001fc6:	481b      	ldr	r0, [pc, #108]	@ (8002034 <StartDefaultTask+0xf4>)
 8001fc8:	f001 f89a 	bl	8003100 <HAL_GPIO_WritePin>
		  printf("Hello------------------------------\n");
 8001fcc:	481a      	ldr	r0, [pc, #104]	@ (8002038 <StartDefaultTask+0xf8>)
 8001fce:	f006 fb95 	bl	80086fc <puts>
 8001fd2:	e004      	b.n	8001fde <StartDefaultTask+0x9e>
	  }else{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2120      	movs	r1, #32
 8001fd8:	4816      	ldr	r0, [pc, #88]	@ (8002034 <StartDefaultTask+0xf4>)
 8001fda:	f001 f891 	bl	8003100 <HAL_GPIO_WritePin>
	  }
	  printf("Send data from TASK\n");
 8001fde:	4817      	ldr	r0, [pc, #92]	@ (800203c <StartDefaultTask+0xfc>)
 8001fe0:	f006 fb8c 	bl	80086fc <puts>
//		  printf("Gui vao hang doi thanh cong nhiet do");
//	  }else {
//		 Recv_Task_data = osMessageGet(myQueue01Handle, 5);
//		 osMessagePut(myQueue01Handle, temp, 10);
//	  }
	  if(xQueueSend(Queue06Handle, &Test, 100) != pdTRUE)
 8001fe4:	4b16      	ldr	r3, [pc, #88]	@ (8002040 <StartDefaultTask+0x100>)
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	f107 0110 	add.w	r1, r7, #16
 8001fec:	2300      	movs	r3, #0
 8001fee:	2264      	movs	r2, #100	@ 0x64
 8001ff0:	f004 fbf6 	bl	80067e0 <xQueueGenericSend>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d010      	beq.n	800201c <StartDefaultTask+0xdc>
	  {
		  xQueueReceive(Queue06Handle, &Remove, 0);
 8001ffa:	4b11      	ldr	r3, [pc, #68]	@ (8002040 <StartDefaultTask+0x100>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f107 010c 	add.w	r1, r7, #12
 8002002:	2200      	movs	r2, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f004 fd8b 	bl	8006b20 <xQueueReceive>
		  xQueueSend(Queue06Handle, &Test, 100);
 800200a:	4b0d      	ldr	r3, [pc, #52]	@ (8002040 <StartDefaultTask+0x100>)
 800200c:	6818      	ldr	r0, [r3, #0]
 800200e:	f107 0110 	add.w	r1, r7, #16
 8002012:	2300      	movs	r3, #0
 8002014:	2264      	movs	r2, #100	@ 0x64
 8002016:	f004 fbe3 	bl	80067e0 <xQueueGenericSend>
 800201a:	e002      	b.n	8002022 <StartDefaultTask+0xe2>
	  }else{
		  printf("Gui vao hang doi thanh cong\n");
 800201c:	4809      	ldr	r0, [pc, #36]	@ (8002044 <StartDefaultTask+0x104>)
 800201e:	f006 fb6d 	bl	80086fc <puts>
	  }
    osDelay(5000);
 8002022:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002026:	f004 f97b 	bl	8006320 <osDelay>
  {
 800202a:	e790      	b.n	8001f4e <StartDefaultTask+0xe>
 800202c:	42c80000 	.word	0x42c80000
 8002030:	200004bc 	.word	0x200004bc
 8002034:	40010c00 	.word	0x40010c00
 8002038:	080095c0 	.word	0x080095c0
 800203c:	080095e4 	.word	0x080095e4
 8002040:	200003f8 	.word	0x200003f8
 8002044:	080095f8 	.word	0x080095f8

08002048 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b0a9      	sub	sp, #164	@ 0xa4
 800204c:	af02      	add	r7, sp, #8
 800204e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	uint8_t Recv_ISR_data[56];
	uint8_t BuffTx[56];
	uint8_t request_count = 0;   //�?ếm số lần gửi request
 8002050:	2300      	movs	r3, #0
 8002052:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	uint8_t send_count = 0;   //�?ếm số lần gửi data
 8002056:	2300      	movs	r3, #0
 8002058:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
	//osEvent Recv_Task_data;
	uint8_t Recv_Task_data[4];
	TickType_t start;
	TickType_t end;
	const TickType_t delay = pdMS_TO_TICKS(23000);
 800205c:	f645 13d8 	movw	r3, #23000	@ 0x59d8
 8002060:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
//	  }else if(Recv_ISR_data[0] == 0x01)
//	  {
//		  Joined == 1;
//		  printf("Da Join mang, bat dau gui du lieu");
//	  }
	  if (xQueueReceive(Queue02Handle, &Recv_ISR_data, pdMS_TO_TICKS(2000)) == pdTRUE)
 8002064:	4bb0      	ldr	r3, [pc, #704]	@ (8002328 <StartTask03+0x2e0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800206c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002070:	4618      	mov	r0, r3
 8002072:	f004 fd55 	bl	8006b20 <xQueueReceive>
 8002076:	4603      	mov	r3, r0
 8002078:	2b01      	cmp	r3, #1
 800207a:	f040 8150 	bne.w	800231e <StartTask03+0x2d6>
	  {
		  printf("%02X %02X %02X %02X %02X\n", Recv_ISR_data[0], Recv_ISR_data[1], Recv_ISR_data[2], Recv_ISR_data[3], Recv_ISR_data[4]);
 800207e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002082:	4619      	mov	r1, r3
 8002084:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8002088:	4618      	mov	r0, r3
 800208a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800208e:	461c      	mov	r4, r3
 8002090:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002094:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8002098:	9201      	str	r2, [sp, #4]
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	4623      	mov	r3, r4
 800209e:	4602      	mov	r2, r0
 80020a0:	48a2      	ldr	r0, [pc, #648]	@ (800232c <StartTask03+0x2e4>)
 80020a2:	f006 fac3 	bl	800862c <iprintf>
		  if ((Recv_ISR_data[0] == Adv && Joined == 0) || (Joined == 1 && (xTaskGetTickCount()-start) > delay && Recv_ISR_data[0] == Adv)) //Goi tin quang ba
 80020a6:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 80020aa:	4ba1      	ldr	r3, [pc, #644]	@ (8002330 <StartTask03+0x2e8>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d103      	bne.n	80020ba <StartTask03+0x72>
 80020b2:	4ba0      	ldr	r3, [pc, #640]	@ (8002334 <StartTask03+0x2ec>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d013      	beq.n	80020e2 <StartTask03+0x9a>
 80020ba:	4b9e      	ldr	r3, [pc, #632]	@ (8002334 <StartTask03+0x2ec>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d17d      	bne.n	80021be <StartTask03+0x176>
 80020c2:	f005 f9fb 	bl	80074bc <xTaskGetTickCount>
 80020c6:	4602      	mov	r2, r0
 80020c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d273      	bcs.n	80021be <StartTask03+0x176>
 80020d6:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 80020da:	4b95      	ldr	r3, [pc, #596]	@ (8002330 <StartTask03+0x2e8>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d16d      	bne.n	80021be <StartTask03+0x176>
		  {
			  Joined = 0;
 80020e2:	4b94      	ldr	r3, [pc, #592]	@ (8002334 <StartTask03+0x2ec>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80020e8:	2200      	movs	r2, #0
 80020ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020ee:	4892      	ldr	r0, [pc, #584]	@ (8002338 <StartTask03+0x2f0>)
 80020f0:	f001 f806 	bl	8003100 <HAL_GPIO_WritePin>
			  printf("Hello 2 %lu\n", xTaskGetTickCount()- start);
 80020f4:	f005 f9e2 	bl	80074bc <xTaskGetTickCount>
 80020f8:	4602      	mov	r2, r0
 80020fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	4619      	mov	r1, r3
 8002102:	488e      	ldr	r0, [pc, #568]	@ (800233c <StartTask03+0x2f4>)
 8002104:	f006 fa92 	bl	800862c <iprintf>
			  printf("Da nhan duoc goi quang ba, bat dau gui Request.\n");
 8002108:	488d      	ldr	r0, [pc, #564]	@ (8002340 <StartTask03+0x2f8>)
 800210a:	f006 faf7 	bl	80086fc <puts>
			  // Bat dau gui request trong vong 2 giay
			  TickType_t start_time = xTaskGetTickCount();
 800210e:	f005 f9d5 	bl	80074bc <xTaskGetTickCount>
 8002112:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
			  request_count = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			  //&& (xTaskGetTickCount() - start_time) < pdMS_TO_TICKS(3000)
			  while (request_count < 3 && Joined == 0)
 800211c:	e045      	b.n	80021aa <StartTask03+0x162>
			  {
				  BuffTx[0] = RequestJoin;
 800211e:	4b89      	ldr	r3, [pc, #548]	@ (8002344 <StartTask03+0x2fc>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	743b      	strb	r3, [r7, #16]
				  BuffTx[1] = AddrNode;
 8002124:	4b88      	ldr	r3, [pc, #544]	@ (8002348 <StartTask03+0x300>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	747b      	strb	r3, [r7, #17]
				  //Gui Request tham gia mang

				  LoRa_transmit(&myLoRa, &BuffTx, 2, 200);
 800212a:	f107 0110 	add.w	r1, r7, #16
 800212e:	23c8      	movs	r3, #200	@ 0xc8
 8002130:	2202      	movs	r2, #2
 8002132:	4886      	ldr	r0, [pc, #536]	@ (800234c <StartTask03+0x304>)
 8002134:	f7ff f9e1 	bl	80014fa <LoRa_transmit>
				  printf("Da gui Request tham gia mang lan %d\n", request_count + 1);
 8002138:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800213c:	3301      	adds	r3, #1
 800213e:	4619      	mov	r1, r3
 8002140:	4883      	ldr	r0, [pc, #524]	@ (8002350 <StartTask03+0x308>)
 8002142:	f006 fa73 	bl	800862c <iprintf>

				  request_count ++;  //Tang so lần gửi request
 8002146:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800214a:	3301      	adds	r3, #1
 800214c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

				  //Ch�? ngắt ISR trong 600ms hoặc đến khi hết 2 giây
				  if(xQueueReceive(Queue03Handle, &Recv_ISR_data, pdMS_TO_TICKS(1000)) == pdTRUE)
 8002150:	4b80      	ldr	r3, [pc, #512]	@ (8002354 <StartTask03+0x30c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8002158:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800215c:	4618      	mov	r0, r3
 800215e:	f004 fcdf 	bl	8006b20 <xQueueReceive>
 8002162:	4603      	mov	r3, r0
 8002164:	2b01      	cmp	r3, #1
 8002166:	d11d      	bne.n	80021a4 <StartTask03+0x15c>
				  {
					  Joined = 1; //�?ánh dấu đã tham gia mạng
 8002168:	4b72      	ldr	r3, [pc, #456]	@ (8002334 <StartTask03+0x2ec>)
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
					  //start = xTaskGetTickCount();
					  AddrGate = Recv_ISR_data[1];
 800216e:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 8002172:	4b79      	ldr	r3, [pc, #484]	@ (8002358 <StartTask03+0x310>)
 8002174:	701a      	strb	r2, [r3, #0]
					  AddrNet = Recv_ISR_data[3];
 8002176:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800217a:	4b78      	ldr	r3, [pc, #480]	@ (800235c <StartTask03+0x314>)
 800217c:	701a      	strb	r2, [r3, #0]
					  threshold = Recv_ISR_data[4];
 800217e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002182:	461a      	mov	r2, r3
 8002184:	4b76      	ldr	r3, [pc, #472]	@ (8002360 <StartTask03+0x318>)
 8002186:	601a      	str	r2, [r3, #0]
					  printf("Da joined mang, khong gui request nua.\n");
 8002188:	4876      	ldr	r0, [pc, #472]	@ (8002364 <StartTask03+0x31c>)
 800218a:	f006 fab7 	bl	80086fc <puts>
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800218e:	2201      	movs	r2, #1
 8002190:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002194:	4868      	ldr	r0, [pc, #416]	@ (8002338 <StartTask03+0x2f0>)
 8002196:	f000 ffb3 	bl	8003100 <HAL_GPIO_WritePin>
					  request_count = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					  break;
 80021a0:	bf00      	nop
		  {
 80021a2:	e0bb      	b.n	800231c <StartTask03+0x2d4>
				  }
				  else
				  {
					  printf("Khong nhan duoc thong tin goi trong thoi gian cho\n");
 80021a4:	4870      	ldr	r0, [pc, #448]	@ (8002368 <StartTask03+0x320>)
 80021a6:	f006 faa9 	bl	80086fc <puts>
			  while (request_count < 3 && Joined == 0)
 80021aa:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	f200 80b4 	bhi.w	800231c <StartTask03+0x2d4>
 80021b4:	4b5f      	ldr	r3, [pc, #380]	@ (8002334 <StartTask03+0x2ec>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0b0      	beq.n	800211e <StartTask03+0xd6>
		  {
 80021bc:	e0ae      	b.n	800231c <StartTask03+0x2d4>
				  }
			  }

		  }else if (Recv_ISR_data[0] == RequestData && Joined == 1)
 80021be:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 80021c2:	4b6a      	ldr	r3, [pc, #424]	@ (800236c <StartTask03+0x324>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	f040 80a9 	bne.w	800231e <StartTask03+0x2d6>
 80021cc:	4b59      	ldr	r3, [pc, #356]	@ (8002334 <StartTask03+0x2ec>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	f040 80a4 	bne.w	800231e <StartTask03+0x2d6>
		  {
			  printf("GW yeu cau gui data\n");
 80021d6:	4866      	ldr	r0, [pc, #408]	@ (8002370 <StartTask03+0x328>)
 80021d8:	f006 fa90 	bl	80086fc <puts>
			  // Bat dau gui data trong vong 4 giay
			  //TickType_t start_time = xTaskGetTickCount();
			  //&& (xTaskGetTickCount() - start_time) < pdMS_TO_TICKS(3000)
			  Highthres = Recv_ISR_data[4];
 80021dc:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80021e0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
			  Lowthres = Recv_ISR_data[5];
 80021e4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80021e8:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
			  threshold = uint8_to_int(Highthres, Lowthres);
 80021ec:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 80021f0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80021f4:	4611      	mov	r1, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fb14 	bl	8001824 <uint8_to_int>
 80021fc:	4603      	mov	r3, r0
 80021fe:	4a58      	ldr	r2, [pc, #352]	@ (8002360 <StartTask03+0x318>)
 8002200:	6013      	str	r3, [r2, #0]
			  printf("Da cap nhat nguong %d\n", threshold);
 8002202:	4b57      	ldr	r3, [pc, #348]	@ (8002360 <StartTask03+0x318>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4619      	mov	r1, r3
 8002208:	485a      	ldr	r0, [pc, #360]	@ (8002374 <StartTask03+0x32c>)
 800220a:	f006 fa0f 	bl	800862c <iprintf>
			  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
			  send_count = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
			  while (send_count < 3)
 8002214:	e07c      	b.n	8002310 <StartTask03+0x2c8>
			  {
				  //Recv_Task_data = osMessageGet(myQueue01Handle, pdMS_TO_TICKS(1000));
				  xQueueReceive(Queue06Handle, &Recv_Task_data, pdMS_TO_TICKS(1000));
 8002216:	4b58      	ldr	r3, [pc, #352]	@ (8002378 <StartTask03+0x330>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f107 010c 	add.w	r1, r7, #12
 800221e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002222:	4618      	mov	r0, r3
 8002224:	f004 fc7c 	bl	8006b20 <xQueueReceive>
				  //dataConverter.value = (float)Recv_Task_data.value.v;
				  for (int i = 0; i < 4; i++)
 8002228:	2300      	movs	r3, #0
 800222a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800222e:	e00e      	b.n	800224e <StartTask03+0x206>
					  printf("Hello 2 %02X", Recv_Task_data[i]);
 8002230:	f107 020c 	add.w	r2, r7, #12
 8002234:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002238:	4413      	add	r3, r2
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	4619      	mov	r1, r3
 800223e:	484f      	ldr	r0, [pc, #316]	@ (800237c <StartTask03+0x334>)
 8002240:	f006 f9f4 	bl	800862c <iprintf>
				  for (int i = 0; i < 4; i++)
 8002244:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002248:	3301      	adds	r3, #1
 800224a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800224e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002252:	2b03      	cmp	r3, #3
 8002254:	ddec      	ble.n	8002230 <StartTask03+0x1e8>
				  BuffTx[0] = Send_data;
 8002256:	4b4a      	ldr	r3, [pc, #296]	@ (8002380 <StartTask03+0x338>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	743b      	strb	r3, [r7, #16]
				  BuffTx[1] = AddrNode;
 800225c:	4b3a      	ldr	r3, [pc, #232]	@ (8002348 <StartTask03+0x300>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	747b      	strb	r3, [r7, #17]
				  BuffTx[2] = AddrGate;
 8002262:	4b3d      	ldr	r3, [pc, #244]	@ (8002358 <StartTask03+0x310>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	74bb      	strb	r3, [r7, #18]
				  BuffTx[3] = AddrNet;
 8002268:	4b3c      	ldr	r3, [pc, #240]	@ (800235c <StartTask03+0x314>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	74fb      	strb	r3, [r7, #19]
				  BuffTx[4] = Recv_Task_data[0];
 800226e:	7b3b      	ldrb	r3, [r7, #12]
 8002270:	753b      	strb	r3, [r7, #20]
				  BuffTx[5] = Recv_Task_data[1];
 8002272:	7b7b      	ldrb	r3, [r7, #13]
 8002274:	757b      	strb	r3, [r7, #21]
				  BuffTx[6] = Recv_Task_data[2];
 8002276:	7bbb      	ldrb	r3, [r7, #14]
 8002278:	75bb      	strb	r3, [r7, #22]
				  BuffTx[7] = Recv_Task_data[3];
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	75fb      	strb	r3, [r7, #23]
				  //printf("%02X %02X", BuffTx[4], BuffTx[5]);

				  //Gui Request tham gia mang

				  LoRa_transmit(&myLoRa, &BuffTx, 8, 200);
 800227e:	f107 0110 	add.w	r1, r7, #16
 8002282:	23c8      	movs	r3, #200	@ 0xc8
 8002284:	2208      	movs	r2, #8
 8002286:	4831      	ldr	r0, [pc, #196]	@ (800234c <StartTask03+0x304>)
 8002288:	f7ff f937 	bl	80014fa <LoRa_transmit>
				  printf("Da gui data lan %d\n", send_count + 1);
 800228c:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8002290:	3301      	adds	r3, #1
 8002292:	4619      	mov	r1, r3
 8002294:	483b      	ldr	r0, [pc, #236]	@ (8002384 <StartTask03+0x33c>)
 8002296:	f006 f9c9 	bl	800862c <iprintf>

				  send_count ++;  //Tang so lần gửi data
 800229a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800229e:	3301      	adds	r3, #1
 80022a0:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
				  osDelay(pdMS_TO_TICKS(1000));
 80022a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022a8:	f004 f83a 	bl	8006320 <osDelay>

				  //Ch�? ngắt ISR trong 600ms hoặc đến khi hết 2 giây
				  if(xQueueReceive(Queue05Handle, &Recv_ISR_data, pdMS_TO_TICKS(1000)) == pdTRUE)
 80022ac:	4b36      	ldr	r3, [pc, #216]	@ (8002388 <StartTask03+0x340>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80022b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80022b8:	4618      	mov	r0, r3
 80022ba:	f004 fc31 	bl	8006b20 <xQueueReceive>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d114      	bne.n	80022ee <StartTask03+0x2a6>
				  {
					  printf("GW nhan du lieu thanh cong\n");
 80022c4:	4831      	ldr	r0, [pc, #196]	@ (800238c <StartTask03+0x344>)
 80022c6:	f006 fa19 	bl	80086fc <puts>
					  start = xTaskGetTickCount();
 80022ca:	f005 f8f7 	bl	80074bc <xTaskGetTickCount>
 80022ce:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
					  printf("Hello 1 %lu\n", start);
 80022d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80022d6:	482e      	ldr	r0, [pc, #184]	@ (8002390 <StartTask03+0x348>)
 80022d8:	f006 f9a8 	bl	800862c <iprintf>
					  printf("%lu", start);
 80022dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80022e0:	482c      	ldr	r0, [pc, #176]	@ (8002394 <StartTask03+0x34c>)
 80022e2:	f006 f9a3 	bl	800862c <iprintf>
					  send_count = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
					  break;
 80022ec:	e017      	b.n	800231e <StartTask03+0x2d6>
				  }
				  else
				  {
					  printf("Khong nhan duoc thong tin goi trong thoi gian cho\n");
 80022ee:	481e      	ldr	r0, [pc, #120]	@ (8002368 <StartTask03+0x320>)
 80022f0:	f006 fa04 	bl	80086fc <puts>
					  if (send_count == 3)
 80022f4:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d109      	bne.n	8002310 <StartTask03+0x2c8>
					  {
						  Joined = 0;
 80022fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002334 <StartTask03+0x2ec>)
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]
						  printf("Da bi out khoi mang");
 8002302:	4825      	ldr	r0, [pc, #148]	@ (8002398 <StartTask03+0x350>)
 8002304:	f006 f992 	bl	800862c <iprintf>
						  send_count = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
						  break;
 800230e:	e006      	b.n	800231e <StartTask03+0x2d6>
			  while (send_count < 3)
 8002310:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8002314:	2b02      	cmp	r3, #2
 8002316:	f67f af7e 	bls.w	8002216 <StartTask03+0x1ce>
 800231a:	e000      	b.n	800231e <StartTask03+0x2d6>
		  {
 800231c:	bf00      	nop
				  }
				  }
			  }
		  }
	  //printf("Da nhan\n");
    osDelay(100);
 800231e:	2064      	movs	r0, #100	@ 0x64
 8002320:	f003 fffe 	bl	8006320 <osDelay>
	  if (xQueueReceive(Queue02Handle, &Recv_ISR_data, pdMS_TO_TICKS(2000)) == pdTRUE)
 8002324:	e69e      	b.n	8002064 <StartTask03+0x1c>
 8002326:	bf00      	nop
 8002328:	200003e8 	.word	0x200003e8
 800232c:	08009614 	.word	0x08009614
 8002330:	200004b0 	.word	0x200004b0
 8002334:	200004b8 	.word	0x200004b8
 8002338:	40010c00 	.word	0x40010c00
 800233c:	08009630 	.word	0x08009630
 8002340:	08009640 	.word	0x08009640
 8002344:	20000006 	.word	0x20000006
 8002348:	20000000 	.word	0x20000000
 800234c:	20000400 	.word	0x20000400
 8002350:	08009670 	.word	0x08009670
 8002354:	200003ec 	.word	0x200003ec
 8002358:	20000001 	.word	0x20000001
 800235c:	20000002 	.word	0x20000002
 8002360:	200004bc 	.word	0x200004bc
 8002364:	08009698 	.word	0x08009698
 8002368:	080096c0 	.word	0x080096c0
 800236c:	20000007 	.word	0x20000007
 8002370:	080096f4 	.word	0x080096f4
 8002374:	08009708 	.word	0x08009708
 8002378:	200003f8 	.word	0x200003f8
 800237c:	08009720 	.word	0x08009720
 8002380:	20000005 	.word	0x20000005
 8002384:	08009730 	.word	0x08009730
 8002388:	200003f4 	.word	0x200003f4
 800238c:	08009744 	.word	0x08009744
 8002390:	08009760 	.word	0x08009760
 8002394:	08009770 	.word	0x08009770
 8002398:	08009774 	.word	0x08009774

0800239c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023a0:	b672      	cpsid	i
}
 80023a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023a4:	bf00      	nop
 80023a6:	e7fd      	b.n	80023a4 <Error_Handler+0x8>

080023a8 <SHT2x_Init>:
	
/**
 * @brief Initializes the SHT2x temperature/humidity sensor.
 * @param hi2c User I2C handle pointer.
 */
void SHT2x_Init(I2C_HandleTypeDef *hi2c) {
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	_sht2x_ui2c = hi2c;
 80023b0:	4a03      	ldr	r2, [pc, #12]	@ (80023c0 <SHT2x_Init+0x18>)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6013      	str	r3, [r2, #0]
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr
 80023c0:	200004c0 	.word	0x200004c0

080023c4 <SHT2x_ReadUserReg>:

/**
 * @brief Gets the value stored in user register.
 * @return 8-bit value stored in user register, 0 to 255.
 */
uint8_t SHT2x_ReadUserReg(void) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af02      	add	r7, sp, #8
	uint8_t val;
	uint8_t cmd = SHT2x_READ_REG;
 80023ca:	23e7      	movs	r3, #231	@ 0xe7
 80023cc:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 80023ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002400 <SHT2x_ReadUserReg+0x3c>)
 80023d0:	6818      	ldr	r0, [r3, #0]
 80023d2:	1dba      	adds	r2, r7, #6
 80023d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2301      	movs	r3, #1
 80023dc:	2180      	movs	r1, #128	@ 0x80
 80023de:	f001 f81d 	bl	800341c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &val, 1, SHT2x_TIMEOUT);
 80023e2:	4b07      	ldr	r3, [pc, #28]	@ (8002400 <SHT2x_ReadUserReg+0x3c>)
 80023e4:	6818      	ldr	r0, [r3, #0]
 80023e6:	1dfa      	adds	r2, r7, #7
 80023e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2301      	movs	r3, #1
 80023f0:	2180      	movs	r1, #128	@ 0x80
 80023f2:	f001 f911 	bl	8003618 <HAL_I2C_Master_Receive>
	return val;
 80023f6:	79fb      	ldrb	r3, [r7, #7]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	200004c0 	.word	0x200004c0

08002404 <SHT2x_GetRaw>:
/**
 * @brief Sends the designated command to sensor and read a 16-bit raw value.
 * @param cmd Command to send to sensor.
 * @return 16-bit raw value, 0 to 65535.
 */
uint16_t SHT2x_GetRaw(uint8_t cmd) {
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af02      	add	r7, sp, #8
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
	uint8_t val[3] = { 0 };
 800240e:	4b13      	ldr	r3, [pc, #76]	@ (800245c <SHT2x_GetRaw+0x58>)
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	81bb      	strh	r3, [r7, #12]
 8002414:	2300      	movs	r3, #0
 8002416:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 8002418:	4b11      	ldr	r3, [pc, #68]	@ (8002460 <SHT2x_GetRaw+0x5c>)
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	1dfa      	adds	r2, r7, #7
 800241e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	2301      	movs	r3, #1
 8002426:	2180      	movs	r1, #128	@ 0x80
 8002428:	f000 fff8 	bl	800341c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, val, 3, SHT2x_TIMEOUT);
 800242c:	4b0c      	ldr	r3, [pc, #48]	@ (8002460 <SHT2x_GetRaw+0x5c>)
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	f107 020c 	add.w	r2, r7, #12
 8002434:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	2303      	movs	r3, #3
 800243c:	2180      	movs	r1, #128	@ 0x80
 800243e:	f001 f8eb 	bl	8003618 <HAL_I2C_Master_Receive>
	return val[0] << 8 | val[1];
 8002442:	7b3b      	ldrb	r3, [r7, #12]
 8002444:	021b      	lsls	r3, r3, #8
 8002446:	b21a      	sxth	r2, r3
 8002448:	7b7b      	ldrb	r3, [r7, #13]
 800244a:	b21b      	sxth	r3, r3
 800244c:	4313      	orrs	r3, r2
 800244e:	b21b      	sxth	r3, r3
 8002450:	b29b      	uxth	r3, r3
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	08009788 	.word	0x08009788
 8002460:	200004c0 	.word	0x200004c0
 8002464:	00000000 	.word	0x00000000

08002468 <SHT2x_GetTemperature>:
/**
 * @brief Measures and gets the current temperature.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point temperature value.
 */
float SHT2x_GetTemperature(uint8_t hold) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_TEMP_HOLD : SHT2x_READ_TEMP_NOHOLD);
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <SHT2x_GetTemperature+0x14>
 8002478:	23e3      	movs	r3, #227	@ 0xe3
 800247a:	e000      	b.n	800247e <SHT2x_GetTemperature+0x16>
 800247c:	23f3      	movs	r3, #243	@ 0xf3
 800247e:	73fb      	strb	r3, [r7, #15]
	return -46.85 + 175.72 * (SHT2x_GetRaw(cmd) / 65536.0);
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ffbe 	bl	8002404 <SHT2x_GetRaw>
 8002488:	4603      	mov	r3, r0
 800248a:	4618      	mov	r0, r3
 800248c:	f7fd ffb2 	bl	80003f4 <__aeabi_i2d>
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	4b14      	ldr	r3, [pc, #80]	@ (80024e8 <SHT2x_GetTemperature+0x80>)
 8002496:	f7fe f941 	bl	800071c <__aeabi_ddiv>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4610      	mov	r0, r2
 80024a0:	4619      	mov	r1, r3
 80024a2:	a30d      	add	r3, pc, #52	@ (adr r3, 80024d8 <SHT2x_GetTemperature+0x70>)
 80024a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a8:	f7fe f80e 	bl	80004c8 <__aeabi_dmul>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4610      	mov	r0, r2
 80024b2:	4619      	mov	r1, r3
 80024b4:	a30a      	add	r3, pc, #40	@ (adr r3, 80024e0 <SHT2x_GetTemperature+0x78>)
 80024b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ba:	f7fd fe4d 	bl	8000158 <__aeabi_dsub>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4610      	mov	r0, r2
 80024c4:	4619      	mov	r1, r3
 80024c6:	f7fe fa39 	bl	800093c <__aeabi_d2f>
 80024ca:	4603      	mov	r3, r0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	f3af 8000 	nop.w
 80024d8:	3d70a3d7 	.word	0x3d70a3d7
 80024dc:	4065f70a 	.word	0x4065f70a
 80024e0:	cccccccd 	.word	0xcccccccd
 80024e4:	40476ccc 	.word	0x40476ccc
 80024e8:	40f00000 	.word	0x40f00000

080024ec <SHT2x_SetResolution>:
 * @brief Sets the measurement resolution.
 * @param res Enum resolution.
 * @note Available resolutions: RES_14_12, RES_12_8, RES_13_10, RES_11_11.
 * @note RES_14_12 = 14-bit temperature and 12-bit RH resolution, etc.
 */
void SHT2x_SetResolution(SHT2x_Resolution res) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
	uint8_t val = SHT2x_ReadUserReg();
 80024f6:	f7ff ff65 	bl	80023c4 <SHT2x_ReadUserReg>
 80024fa:	4603      	mov	r3, r0
 80024fc:	73fb      	strb	r3, [r7, #15]
	val = (val & 0x7e) | res;
 80024fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002502:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8002506:	b25a      	sxtb	r2, r3
 8002508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250c:	4313      	orrs	r3, r2
 800250e:	b25b      	sxtb	r3, r3
 8002510:	73fb      	strb	r3, [r7, #15]
	uint8_t temp[2] = { SHT2x_WRITE_REG, val };
 8002512:	23e6      	movs	r3, #230	@ 0xe6
 8002514:	733b      	strb	r3, [r7, #12]
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, temp, 2, SHT2x_TIMEOUT);
 800251a:	4b07      	ldr	r3, [pc, #28]	@ (8002538 <SHT2x_SetResolution+0x4c>)
 800251c:	6818      	ldr	r0, [r3, #0]
 800251e:	f107 020c 	add.w	r2, r7, #12
 8002522:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	2302      	movs	r3, #2
 800252a:	2180      	movs	r1, #128	@ 0x80
 800252c:	f000 ff76 	bl	800341c <HAL_I2C_Master_Transmit>
}
 8002530:	bf00      	nop
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	200004c0 	.word	0x200004c0

0800253c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002542:	4b18      	ldr	r3, [pc, #96]	@ (80025a4 <HAL_MspInit+0x68>)
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	4a17      	ldr	r2, [pc, #92]	@ (80025a4 <HAL_MspInit+0x68>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6193      	str	r3, [r2, #24]
 800254e:	4b15      	ldr	r3, [pc, #84]	@ (80025a4 <HAL_MspInit+0x68>)
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800255a:	4b12      	ldr	r3, [pc, #72]	@ (80025a4 <HAL_MspInit+0x68>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	4a11      	ldr	r2, [pc, #68]	@ (80025a4 <HAL_MspInit+0x68>)
 8002560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002564:	61d3      	str	r3, [r2, #28]
 8002566:	4b0f      	ldr	r3, [pc, #60]	@ (80025a4 <HAL_MspInit+0x68>)
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002572:	2200      	movs	r2, #0
 8002574:	210f      	movs	r1, #15
 8002576:	f06f 0001 	mvn.w	r0, #1
 800257a:	f000 fb54 	bl	8002c26 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800257e:	4b0a      	ldr	r3, [pc, #40]	@ (80025a8 <HAL_MspInit+0x6c>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	4a04      	ldr	r2, [pc, #16]	@ (80025a8 <HAL_MspInit+0x6c>)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40010000 	.word	0x40010000

080025ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	f107 0310 	add.w	r3, r7, #16
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a15      	ldr	r2, [pc, #84]	@ (800261c <HAL_I2C_MspInit+0x70>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d123      	bne.n	8002614 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025cc:	4b14      	ldr	r3, [pc, #80]	@ (8002620 <HAL_I2C_MspInit+0x74>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	4a13      	ldr	r2, [pc, #76]	@ (8002620 <HAL_I2C_MspInit+0x74>)
 80025d2:	f043 0308 	orr.w	r3, r3, #8
 80025d6:	6193      	str	r3, [r2, #24]
 80025d8:	4b11      	ldr	r3, [pc, #68]	@ (8002620 <HAL_I2C_MspInit+0x74>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f003 0308 	and.w	r3, r3, #8
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025e4:	23c0      	movs	r3, #192	@ 0xc0
 80025e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025e8:	2312      	movs	r3, #18
 80025ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025ec:	2303      	movs	r3, #3
 80025ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f0:	f107 0310 	add.w	r3, r7, #16
 80025f4:	4619      	mov	r1, r3
 80025f6:	480b      	ldr	r0, [pc, #44]	@ (8002624 <HAL_I2C_MspInit+0x78>)
 80025f8:	f000 fbfe 	bl	8002df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025fc:	4b08      	ldr	r3, [pc, #32]	@ (8002620 <HAL_I2C_MspInit+0x74>)
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	4a07      	ldr	r2, [pc, #28]	@ (8002620 <HAL_I2C_MspInit+0x74>)
 8002602:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002606:	61d3      	str	r3, [r2, #28]
 8002608:	4b05      	ldr	r3, [pc, #20]	@ (8002620 <HAL_I2C_MspInit+0x74>)
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002614:	bf00      	nop
 8002616:	3720      	adds	r7, #32
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40005400 	.word	0x40005400
 8002620:	40021000 	.word	0x40021000
 8002624:	40010c00 	.word	0x40010c00

08002628 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	f107 0310 	add.w	r3, r7, #16
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a1b      	ldr	r2, [pc, #108]	@ (80026b0 <HAL_SPI_MspInit+0x88>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d12f      	bne.n	80026a8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002648:	4b1a      	ldr	r3, [pc, #104]	@ (80026b4 <HAL_SPI_MspInit+0x8c>)
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	4a19      	ldr	r2, [pc, #100]	@ (80026b4 <HAL_SPI_MspInit+0x8c>)
 800264e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002652:	6193      	str	r3, [r2, #24]
 8002654:	4b17      	ldr	r3, [pc, #92]	@ (80026b4 <HAL_SPI_MspInit+0x8c>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002660:	4b14      	ldr	r3, [pc, #80]	@ (80026b4 <HAL_SPI_MspInit+0x8c>)
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	4a13      	ldr	r2, [pc, #76]	@ (80026b4 <HAL_SPI_MspInit+0x8c>)
 8002666:	f043 0304 	orr.w	r3, r3, #4
 800266a:	6193      	str	r3, [r2, #24]
 800266c:	4b11      	ldr	r3, [pc, #68]	@ (80026b4 <HAL_SPI_MspInit+0x8c>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002678:	23a0      	movs	r3, #160	@ 0xa0
 800267a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267c:	2302      	movs	r3, #2
 800267e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002680:	2303      	movs	r3, #3
 8002682:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002684:	f107 0310 	add.w	r3, r7, #16
 8002688:	4619      	mov	r1, r3
 800268a:	480b      	ldr	r0, [pc, #44]	@ (80026b8 <HAL_SPI_MspInit+0x90>)
 800268c:	f000 fbb4 	bl	8002df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002690:	2340      	movs	r3, #64	@ 0x40
 8002692:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269c:	f107 0310 	add.w	r3, r7, #16
 80026a0:	4619      	mov	r1, r3
 80026a2:	4805      	ldr	r0, [pc, #20]	@ (80026b8 <HAL_SPI_MspInit+0x90>)
 80026a4:	f000 fba8 	bl	8002df8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80026a8:	bf00      	nop
 80026aa:	3720      	adds	r7, #32
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40013000 	.word	0x40013000
 80026b4:	40021000 	.word	0x40021000
 80026b8:	40010800 	.word	0x40010800

080026bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c4:	f107 0310 	add.w	r3, r7, #16
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a20      	ldr	r2, [pc, #128]	@ (8002758 <HAL_UART_MspInit+0x9c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d139      	bne.n	8002750 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026dc:	4b1f      	ldr	r3, [pc, #124]	@ (800275c <HAL_UART_MspInit+0xa0>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	4a1e      	ldr	r2, [pc, #120]	@ (800275c <HAL_UART_MspInit+0xa0>)
 80026e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026e6:	6193      	str	r3, [r2, #24]
 80026e8:	4b1c      	ldr	r3, [pc, #112]	@ (800275c <HAL_UART_MspInit+0xa0>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f4:	4b19      	ldr	r3, [pc, #100]	@ (800275c <HAL_UART_MspInit+0xa0>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	4a18      	ldr	r2, [pc, #96]	@ (800275c <HAL_UART_MspInit+0xa0>)
 80026fa:	f043 0304 	orr.w	r3, r3, #4
 80026fe:	6193      	str	r3, [r2, #24]
 8002700:	4b16      	ldr	r3, [pc, #88]	@ (800275c <HAL_UART_MspInit+0xa0>)
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800270c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002710:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002712:	2302      	movs	r3, #2
 8002714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002716:	2303      	movs	r3, #3
 8002718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271a:	f107 0310 	add.w	r3, r7, #16
 800271e:	4619      	mov	r1, r3
 8002720:	480f      	ldr	r0, [pc, #60]	@ (8002760 <HAL_UART_MspInit+0xa4>)
 8002722:	f000 fb69 	bl	8002df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002726:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800272a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002734:	f107 0310 	add.w	r3, r7, #16
 8002738:	4619      	mov	r1, r3
 800273a:	4809      	ldr	r0, [pc, #36]	@ (8002760 <HAL_UART_MspInit+0xa4>)
 800273c:	f000 fb5c 	bl	8002df8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002740:	2200      	movs	r2, #0
 8002742:	2105      	movs	r1, #5
 8002744:	2025      	movs	r0, #37	@ 0x25
 8002746:	f000 fa6e 	bl	8002c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800274a:	2025      	movs	r0, #37	@ 0x25
 800274c:	f000 fa87 	bl	8002c5e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002750:	bf00      	nop
 8002752:	3720      	adds	r7, #32
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40013800 	.word	0x40013800
 800275c:	40021000 	.word	0x40021000
 8002760:	40010800 	.word	0x40010800

08002764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002768:	bf00      	nop
 800276a:	e7fd      	b.n	8002768 <NMI_Handler+0x4>

0800276c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002770:	bf00      	nop
 8002772:	e7fd      	b.n	8002770 <HardFault_Handler+0x4>

08002774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002778:	bf00      	nop
 800277a:	e7fd      	b.n	8002778 <MemManage_Handler+0x4>

0800277c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002780:	bf00      	nop
 8002782:	e7fd      	b.n	8002780 <BusFault_Handler+0x4>

08002784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002788:	bf00      	nop
 800278a:	e7fd      	b.n	8002788 <UsageFault_Handler+0x4>

0800278c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr

08002798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800279c:	f000 f92c 	bl	80029f8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80027a0:	f005 f996 	bl	8007ad0 <xTaskGetSchedulerState>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d001      	beq.n	80027ae <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80027aa:	f005 fc0d 	bl	8007fc8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 80027b6:	2002      	movs	r0, #2
 80027b8:	f000 fcd4 	bl	8003164 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80027bc:	bf00      	nop
 80027be:	bd80      	pop	{r7, pc}

080027c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027c4:	4802      	ldr	r0, [pc, #8]	@ (80027d0 <USART1_IRQHandler+0x10>)
 80027c6:	f002 ffcd 	bl	8005764 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000390 	.word	0x20000390

080027d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	e00a      	b.n	80027fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027e6:	f3af 8000 	nop.w
 80027ea:	4601      	mov	r1, r0
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	60ba      	str	r2, [r7, #8]
 80027f2:	b2ca      	uxtb	r2, r1
 80027f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	3301      	adds	r3, #1
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	429a      	cmp	r2, r3
 8002802:	dbf0      	blt.n	80027e6 <_read+0x12>
  }

  return len;
 8002804:	687b      	ldr	r3, [r7, #4]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b086      	sub	sp, #24
 8002812:	af00      	add	r7, sp, #0
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	e009      	b.n	8002834 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	60ba      	str	r2, [r7, #8]
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f7fe ffe9 	bl	8001800 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	3301      	adds	r3, #1
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	429a      	cmp	r2, r3
 800283a:	dbf1      	blt.n	8002820 <_write+0x12>
  }
  return len;
 800283c:	687b      	ldr	r3, [r7, #4]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <_close>:

int _close(int file)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800284e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800286c:	605a      	str	r2, [r3, #4]
  return 0;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr

0800287a <_isatty>:

int _isatty(int file)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002882:	2301      	movs	r3, #1
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr

0800288e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800288e:	b480      	push	{r7}
 8002890:	b085      	sub	sp, #20
 8002892:	af00      	add	r7, sp, #0
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr
	...

080028a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028b0:	4a14      	ldr	r2, [pc, #80]	@ (8002904 <_sbrk+0x5c>)
 80028b2:	4b15      	ldr	r3, [pc, #84]	@ (8002908 <_sbrk+0x60>)
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028bc:	4b13      	ldr	r3, [pc, #76]	@ (800290c <_sbrk+0x64>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d102      	bne.n	80028ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028c4:	4b11      	ldr	r3, [pc, #68]	@ (800290c <_sbrk+0x64>)
 80028c6:	4a12      	ldr	r2, [pc, #72]	@ (8002910 <_sbrk+0x68>)
 80028c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ca:	4b10      	ldr	r3, [pc, #64]	@ (800290c <_sbrk+0x64>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4413      	add	r3, r2
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d207      	bcs.n	80028e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028d8:	f006 f83e 	bl	8008958 <__errno>
 80028dc:	4603      	mov	r3, r0
 80028de:	220c      	movs	r2, #12
 80028e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028e2:	f04f 33ff 	mov.w	r3, #4294967295
 80028e6:	e009      	b.n	80028fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028e8:	4b08      	ldr	r3, [pc, #32]	@ (800290c <_sbrk+0x64>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ee:	4b07      	ldr	r3, [pc, #28]	@ (800290c <_sbrk+0x64>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4413      	add	r3, r2
 80028f6:	4a05      	ldr	r2, [pc, #20]	@ (800290c <_sbrk+0x64>)
 80028f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028fa:	68fb      	ldr	r3, [r7, #12]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20005000 	.word	0x20005000
 8002908:	00000400 	.word	0x00000400
 800290c:	200004c4 	.word	0x200004c4
 8002910:	20001370 	.word	0x20001370

08002914 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002920:	f7ff fff8 	bl	8002914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002924:	480b      	ldr	r0, [pc, #44]	@ (8002954 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002926:	490c      	ldr	r1, [pc, #48]	@ (8002958 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002928:	4a0c      	ldr	r2, [pc, #48]	@ (800295c <LoopFillZerobss+0x16>)
  movs r3, #0
 800292a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800292c:	e002      	b.n	8002934 <LoopCopyDataInit>

0800292e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800292e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002932:	3304      	adds	r3, #4

08002934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002938:	d3f9      	bcc.n	800292e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800293a:	4a09      	ldr	r2, [pc, #36]	@ (8002960 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800293c:	4c09      	ldr	r4, [pc, #36]	@ (8002964 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800293e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002940:	e001      	b.n	8002946 <LoopFillZerobss>

08002942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002944:	3204      	adds	r2, #4

08002946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002948:	d3fb      	bcc.n	8002942 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800294a:	f006 f80b 	bl	8008964 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800294e:	f7fe ff85 	bl	800185c <main>
  bx lr
 8002952:	4770      	bx	lr
  ldr r0, =_sdata
 8002954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002958:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800295c:	080097fc 	.word	0x080097fc
  ldr r2, =_sbss
 8002960:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002964:	2000136c 	.word	0x2000136c

08002968 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002968:	e7fe      	b.n	8002968 <ADC1_2_IRQHandler>
	...

0800296c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002970:	4b08      	ldr	r3, [pc, #32]	@ (8002994 <HAL_Init+0x28>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a07      	ldr	r2, [pc, #28]	@ (8002994 <HAL_Init+0x28>)
 8002976:	f043 0310 	orr.w	r3, r3, #16
 800297a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800297c:	2003      	movs	r0, #3
 800297e:	f000 f947 	bl	8002c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002982:	200f      	movs	r0, #15
 8002984:	f000 f808 	bl	8002998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002988:	f7ff fdd8 	bl	800253c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40022000 	.word	0x40022000

08002998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029a0:	4b12      	ldr	r3, [pc, #72]	@ (80029ec <HAL_InitTick+0x54>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b12      	ldr	r3, [pc, #72]	@ (80029f0 <HAL_InitTick+0x58>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	4619      	mov	r1, r3
 80029aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80029b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 f95f 	bl	8002c7a <HAL_SYSTICK_Config>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e00e      	b.n	80029e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b0f      	cmp	r3, #15
 80029ca:	d80a      	bhi.n	80029e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029cc:	2200      	movs	r2, #0
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	f04f 30ff 	mov.w	r0, #4294967295
 80029d4:	f000 f927 	bl	8002c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d8:	4a06      	ldr	r2, [pc, #24]	@ (80029f4 <HAL_InitTick+0x5c>)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20000008 	.word	0x20000008
 80029f0:	20000010 	.word	0x20000010
 80029f4:	2000000c 	.word	0x2000000c

080029f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029fc:	4b05      	ldr	r3, [pc, #20]	@ (8002a14 <HAL_IncTick+0x1c>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b05      	ldr	r3, [pc, #20]	@ (8002a18 <HAL_IncTick+0x20>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4413      	add	r3, r2
 8002a08:	4a03      	ldr	r2, [pc, #12]	@ (8002a18 <HAL_IncTick+0x20>)
 8002a0a:	6013      	str	r3, [r2, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	20000010 	.word	0x20000010
 8002a18:	200004c8 	.word	0x200004c8

08002a1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a20:	4b02      	ldr	r3, [pc, #8]	@ (8002a2c <HAL_GetTick+0x10>)
 8002a22:	681b      	ldr	r3, [r3, #0]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr
 8002a2c:	200004c8 	.word	0x200004c8

08002a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a38:	f7ff fff0 	bl	8002a1c <HAL_GetTick>
 8002a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a48:	d005      	beq.n	8002a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a74 <HAL_Delay+0x44>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4413      	add	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a56:	bf00      	nop
 8002a58:	f7ff ffe0 	bl	8002a1c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d8f7      	bhi.n	8002a58 <HAL_Delay+0x28>
  {
  }
}
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000010 	.word	0x20000010

08002a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a88:	4b0c      	ldr	r3, [pc, #48]	@ (8002abc <__NVIC_SetPriorityGrouping+0x44>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a94:	4013      	ands	r3, r2
 8002a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002aa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aaa:	4a04      	ldr	r2, [pc, #16]	@ (8002abc <__NVIC_SetPriorityGrouping+0x44>)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	60d3      	str	r3, [r2, #12]
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac4:	4b04      	ldr	r3, [pc, #16]	@ (8002ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	0a1b      	lsrs	r3, r3, #8
 8002aca:	f003 0307 	and.w	r3, r3, #7
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	db0b      	blt.n	8002b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	f003 021f 	and.w	r2, r3, #31
 8002af4:	4906      	ldr	r1, [pc, #24]	@ (8002b10 <__NVIC_EnableIRQ+0x34>)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	095b      	lsrs	r3, r3, #5
 8002afc:	2001      	movs	r0, #1
 8002afe:	fa00 f202 	lsl.w	r2, r0, r2
 8002b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	e000e100 	.word	0xe000e100

08002b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	6039      	str	r1, [r7, #0]
 8002b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	db0a      	blt.n	8002b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	490c      	ldr	r1, [pc, #48]	@ (8002b60 <__NVIC_SetPriority+0x4c>)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	0112      	lsls	r2, r2, #4
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	440b      	add	r3, r1
 8002b38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b3c:	e00a      	b.n	8002b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	4908      	ldr	r1, [pc, #32]	@ (8002b64 <__NVIC_SetPriority+0x50>)
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	3b04      	subs	r3, #4
 8002b4c:	0112      	lsls	r2, r2, #4
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	440b      	add	r3, r1
 8002b52:	761a      	strb	r2, [r3, #24]
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	e000e100 	.word	0xe000e100
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b089      	sub	sp, #36	@ 0x24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f1c3 0307 	rsb	r3, r3, #7
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	bf28      	it	cs
 8002b86:	2304      	movcs	r3, #4
 8002b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	2b06      	cmp	r3, #6
 8002b90:	d902      	bls.n	8002b98 <NVIC_EncodePriority+0x30>
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3b03      	subs	r3, #3
 8002b96:	e000      	b.n	8002b9a <NVIC_EncodePriority+0x32>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43da      	mvns	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	401a      	ands	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	43d9      	mvns	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc0:	4313      	orrs	r3, r2
         );
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3724      	adds	r7, #36	@ 0x24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr

08002bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bdc:	d301      	bcc.n	8002be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bde:	2301      	movs	r3, #1
 8002be0:	e00f      	b.n	8002c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002be2:	4a0a      	ldr	r2, [pc, #40]	@ (8002c0c <SysTick_Config+0x40>)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bea:	210f      	movs	r1, #15
 8002bec:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf0:	f7ff ff90 	bl	8002b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf4:	4b05      	ldr	r3, [pc, #20]	@ (8002c0c <SysTick_Config+0x40>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bfa:	4b04      	ldr	r3, [pc, #16]	@ (8002c0c <SysTick_Config+0x40>)
 8002bfc:	2207      	movs	r2, #7
 8002bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	e000e010 	.word	0xe000e010

08002c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff ff2d 	bl	8002a78 <__NVIC_SetPriorityGrouping>
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b086      	sub	sp, #24
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	607a      	str	r2, [r7, #4]
 8002c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c38:	f7ff ff42 	bl	8002ac0 <__NVIC_GetPriorityGrouping>
 8002c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	6978      	ldr	r0, [r7, #20]
 8002c44:	f7ff ff90 	bl	8002b68 <NVIC_EncodePriority>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff ff5f 	bl	8002b14 <__NVIC_SetPriority>
}
 8002c56:	bf00      	nop
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	4603      	mov	r3, r0
 8002c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ff35 	bl	8002adc <__NVIC_EnableIRQ>
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff ffa2 	bl	8002bcc <SysTick_Config>
 8002c88:	4603      	mov	r3, r0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b085      	sub	sp, #20
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d008      	beq.n	8002cbc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2204      	movs	r2, #4
 8002cae:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e020      	b.n	8002cfe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 020e 	bic.w	r2, r2, #14
 8002cca:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0201 	bic.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cea:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d005      	beq.n	8002d2c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2204      	movs	r2, #4
 8002d24:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
 8002d2a:	e051      	b.n	8002dd0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 020e 	bic.w	r2, r2, #14
 8002d3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0201 	bic.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a22      	ldr	r2, [pc, #136]	@ (8002ddc <HAL_DMA_Abort_IT+0xd4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d029      	beq.n	8002daa <HAL_DMA_Abort_IT+0xa2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a21      	ldr	r2, [pc, #132]	@ (8002de0 <HAL_DMA_Abort_IT+0xd8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d022      	beq.n	8002da6 <HAL_DMA_Abort_IT+0x9e>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a1f      	ldr	r2, [pc, #124]	@ (8002de4 <HAL_DMA_Abort_IT+0xdc>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d01a      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x98>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a1e      	ldr	r2, [pc, #120]	@ (8002de8 <HAL_DMA_Abort_IT+0xe0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d012      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x92>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a1c      	ldr	r2, [pc, #112]	@ (8002dec <HAL_DMA_Abort_IT+0xe4>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00a      	beq.n	8002d94 <HAL_DMA_Abort_IT+0x8c>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a1b      	ldr	r2, [pc, #108]	@ (8002df0 <HAL_DMA_Abort_IT+0xe8>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d102      	bne.n	8002d8e <HAL_DMA_Abort_IT+0x86>
 8002d88:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002d8c:	e00e      	b.n	8002dac <HAL_DMA_Abort_IT+0xa4>
 8002d8e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d92:	e00b      	b.n	8002dac <HAL_DMA_Abort_IT+0xa4>
 8002d94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d98:	e008      	b.n	8002dac <HAL_DMA_Abort_IT+0xa4>
 8002d9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d9e:	e005      	b.n	8002dac <HAL_DMA_Abort_IT+0xa4>
 8002da0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002da4:	e002      	b.n	8002dac <HAL_DMA_Abort_IT+0xa4>
 8002da6:	2310      	movs	r3, #16
 8002da8:	e000      	b.n	8002dac <HAL_DMA_Abort_IT+0xa4>
 8002daa:	2301      	movs	r3, #1
 8002dac:	4a11      	ldr	r2, [pc, #68]	@ (8002df4 <HAL_DMA_Abort_IT+0xec>)
 8002dae:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	4798      	blx	r3
    } 
  }
  return status;
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40020008 	.word	0x40020008
 8002de0:	4002001c 	.word	0x4002001c
 8002de4:	40020030 	.word	0x40020030
 8002de8:	40020044 	.word	0x40020044
 8002dec:	40020058 	.word	0x40020058
 8002df0:	4002006c 	.word	0x4002006c
 8002df4:	40020000 	.word	0x40020000

08002df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b08b      	sub	sp, #44	@ 0x2c
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e02:	2300      	movs	r3, #0
 8002e04:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e06:	2300      	movs	r3, #0
 8002e08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e0a:	e169      	b.n	80030e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	69fa      	ldr	r2, [r7, #28]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	f040 8158 	bne.w	80030da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4a9a      	ldr	r2, [pc, #616]	@ (8003098 <HAL_GPIO_Init+0x2a0>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d05e      	beq.n	8002ef2 <HAL_GPIO_Init+0xfa>
 8002e34:	4a98      	ldr	r2, [pc, #608]	@ (8003098 <HAL_GPIO_Init+0x2a0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d875      	bhi.n	8002f26 <HAL_GPIO_Init+0x12e>
 8002e3a:	4a98      	ldr	r2, [pc, #608]	@ (800309c <HAL_GPIO_Init+0x2a4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d058      	beq.n	8002ef2 <HAL_GPIO_Init+0xfa>
 8002e40:	4a96      	ldr	r2, [pc, #600]	@ (800309c <HAL_GPIO_Init+0x2a4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d86f      	bhi.n	8002f26 <HAL_GPIO_Init+0x12e>
 8002e46:	4a96      	ldr	r2, [pc, #600]	@ (80030a0 <HAL_GPIO_Init+0x2a8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d052      	beq.n	8002ef2 <HAL_GPIO_Init+0xfa>
 8002e4c:	4a94      	ldr	r2, [pc, #592]	@ (80030a0 <HAL_GPIO_Init+0x2a8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d869      	bhi.n	8002f26 <HAL_GPIO_Init+0x12e>
 8002e52:	4a94      	ldr	r2, [pc, #592]	@ (80030a4 <HAL_GPIO_Init+0x2ac>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d04c      	beq.n	8002ef2 <HAL_GPIO_Init+0xfa>
 8002e58:	4a92      	ldr	r2, [pc, #584]	@ (80030a4 <HAL_GPIO_Init+0x2ac>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d863      	bhi.n	8002f26 <HAL_GPIO_Init+0x12e>
 8002e5e:	4a92      	ldr	r2, [pc, #584]	@ (80030a8 <HAL_GPIO_Init+0x2b0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d046      	beq.n	8002ef2 <HAL_GPIO_Init+0xfa>
 8002e64:	4a90      	ldr	r2, [pc, #576]	@ (80030a8 <HAL_GPIO_Init+0x2b0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d85d      	bhi.n	8002f26 <HAL_GPIO_Init+0x12e>
 8002e6a:	2b12      	cmp	r3, #18
 8002e6c:	d82a      	bhi.n	8002ec4 <HAL_GPIO_Init+0xcc>
 8002e6e:	2b12      	cmp	r3, #18
 8002e70:	d859      	bhi.n	8002f26 <HAL_GPIO_Init+0x12e>
 8002e72:	a201      	add	r2, pc, #4	@ (adr r2, 8002e78 <HAL_GPIO_Init+0x80>)
 8002e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e78:	08002ef3 	.word	0x08002ef3
 8002e7c:	08002ecd 	.word	0x08002ecd
 8002e80:	08002edf 	.word	0x08002edf
 8002e84:	08002f21 	.word	0x08002f21
 8002e88:	08002f27 	.word	0x08002f27
 8002e8c:	08002f27 	.word	0x08002f27
 8002e90:	08002f27 	.word	0x08002f27
 8002e94:	08002f27 	.word	0x08002f27
 8002e98:	08002f27 	.word	0x08002f27
 8002e9c:	08002f27 	.word	0x08002f27
 8002ea0:	08002f27 	.word	0x08002f27
 8002ea4:	08002f27 	.word	0x08002f27
 8002ea8:	08002f27 	.word	0x08002f27
 8002eac:	08002f27 	.word	0x08002f27
 8002eb0:	08002f27 	.word	0x08002f27
 8002eb4:	08002f27 	.word	0x08002f27
 8002eb8:	08002f27 	.word	0x08002f27
 8002ebc:	08002ed5 	.word	0x08002ed5
 8002ec0:	08002ee9 	.word	0x08002ee9
 8002ec4:	4a79      	ldr	r2, [pc, #484]	@ (80030ac <HAL_GPIO_Init+0x2b4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d013      	beq.n	8002ef2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002eca:	e02c      	b.n	8002f26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	623b      	str	r3, [r7, #32]
          break;
 8002ed2:	e029      	b.n	8002f28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	3304      	adds	r3, #4
 8002eda:	623b      	str	r3, [r7, #32]
          break;
 8002edc:	e024      	b.n	8002f28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	3308      	adds	r3, #8
 8002ee4:	623b      	str	r3, [r7, #32]
          break;
 8002ee6:	e01f      	b.n	8002f28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	330c      	adds	r3, #12
 8002eee:	623b      	str	r3, [r7, #32]
          break;
 8002ef0:	e01a      	b.n	8002f28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002efa:	2304      	movs	r3, #4
 8002efc:	623b      	str	r3, [r7, #32]
          break;
 8002efe:	e013      	b.n	8002f28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d105      	bne.n	8002f14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f08:	2308      	movs	r3, #8
 8002f0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69fa      	ldr	r2, [r7, #28]
 8002f10:	611a      	str	r2, [r3, #16]
          break;
 8002f12:	e009      	b.n	8002f28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f14:	2308      	movs	r3, #8
 8002f16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69fa      	ldr	r2, [r7, #28]
 8002f1c:	615a      	str	r2, [r3, #20]
          break;
 8002f1e:	e003      	b.n	8002f28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f20:	2300      	movs	r3, #0
 8002f22:	623b      	str	r3, [r7, #32]
          break;
 8002f24:	e000      	b.n	8002f28 <HAL_GPIO_Init+0x130>
          break;
 8002f26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	2bff      	cmp	r3, #255	@ 0xff
 8002f2c:	d801      	bhi.n	8002f32 <HAL_GPIO_Init+0x13a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	e001      	b.n	8002f36 <HAL_GPIO_Init+0x13e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3304      	adds	r3, #4
 8002f36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	2bff      	cmp	r3, #255	@ 0xff
 8002f3c:	d802      	bhi.n	8002f44 <HAL_GPIO_Init+0x14c>
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	e002      	b.n	8002f4a <HAL_GPIO_Init+0x152>
 8002f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f46:	3b08      	subs	r3, #8
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	210f      	movs	r1, #15
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	fa01 f303 	lsl.w	r3, r1, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	401a      	ands	r2, r3
 8002f5c:	6a39      	ldr	r1, [r7, #32]
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	fa01 f303 	lsl.w	r3, r1, r3
 8002f64:	431a      	orrs	r2, r3
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 80b1 	beq.w	80030da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f78:	4b4d      	ldr	r3, [pc, #308]	@ (80030b0 <HAL_GPIO_Init+0x2b8>)
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	4a4c      	ldr	r2, [pc, #304]	@ (80030b0 <HAL_GPIO_Init+0x2b8>)
 8002f7e:	f043 0301 	orr.w	r3, r3, #1
 8002f82:	6193      	str	r3, [r2, #24]
 8002f84:	4b4a      	ldr	r3, [pc, #296]	@ (80030b0 <HAL_GPIO_Init+0x2b8>)
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f90:	4a48      	ldr	r2, [pc, #288]	@ (80030b4 <HAL_GPIO_Init+0x2bc>)
 8002f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f94:	089b      	lsrs	r3, r3, #2
 8002f96:	3302      	adds	r3, #2
 8002f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	220f      	movs	r2, #15
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a40      	ldr	r2, [pc, #256]	@ (80030b8 <HAL_GPIO_Init+0x2c0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d013      	beq.n	8002fe4 <HAL_GPIO_Init+0x1ec>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a3f      	ldr	r2, [pc, #252]	@ (80030bc <HAL_GPIO_Init+0x2c4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d00d      	beq.n	8002fe0 <HAL_GPIO_Init+0x1e8>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a3e      	ldr	r2, [pc, #248]	@ (80030c0 <HAL_GPIO_Init+0x2c8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d007      	beq.n	8002fdc <HAL_GPIO_Init+0x1e4>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a3d      	ldr	r2, [pc, #244]	@ (80030c4 <HAL_GPIO_Init+0x2cc>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d101      	bne.n	8002fd8 <HAL_GPIO_Init+0x1e0>
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e006      	b.n	8002fe6 <HAL_GPIO_Init+0x1ee>
 8002fd8:	2304      	movs	r3, #4
 8002fda:	e004      	b.n	8002fe6 <HAL_GPIO_Init+0x1ee>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e002      	b.n	8002fe6 <HAL_GPIO_Init+0x1ee>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <HAL_GPIO_Init+0x1ee>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fe8:	f002 0203 	and.w	r2, r2, #3
 8002fec:	0092      	lsls	r2, r2, #2
 8002fee:	4093      	lsls	r3, r2
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ff6:	492f      	ldr	r1, [pc, #188]	@ (80030b4 <HAL_GPIO_Init+0x2bc>)
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffa:	089b      	lsrs	r3, r3, #2
 8002ffc:	3302      	adds	r3, #2
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d006      	beq.n	800301e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003010:	4b2d      	ldr	r3, [pc, #180]	@ (80030c8 <HAL_GPIO_Init+0x2d0>)
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	492c      	ldr	r1, [pc, #176]	@ (80030c8 <HAL_GPIO_Init+0x2d0>)
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	4313      	orrs	r3, r2
 800301a:	608b      	str	r3, [r1, #8]
 800301c:	e006      	b.n	800302c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800301e:	4b2a      	ldr	r3, [pc, #168]	@ (80030c8 <HAL_GPIO_Init+0x2d0>)
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	43db      	mvns	r3, r3
 8003026:	4928      	ldr	r1, [pc, #160]	@ (80030c8 <HAL_GPIO_Init+0x2d0>)
 8003028:	4013      	ands	r3, r2
 800302a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d006      	beq.n	8003046 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003038:	4b23      	ldr	r3, [pc, #140]	@ (80030c8 <HAL_GPIO_Init+0x2d0>)
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	4922      	ldr	r1, [pc, #136]	@ (80030c8 <HAL_GPIO_Init+0x2d0>)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	4313      	orrs	r3, r2
 8003042:	60cb      	str	r3, [r1, #12]
 8003044:	e006      	b.n	8003054 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003046:	4b20      	ldr	r3, [pc, #128]	@ (80030c8 <HAL_GPIO_Init+0x2d0>)
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	43db      	mvns	r3, r3
 800304e:	491e      	ldr	r1, [pc, #120]	@ (80030c8 <HAL_GPIO_Init+0x2d0>)
 8003050:	4013      	ands	r3, r2
 8003052:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d006      	beq.n	800306e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003060:	4b19      	ldr	r3, [pc, #100]	@ (80030c8 <HAL_GPIO_Init+0x2d0>)
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	4918      	ldr	r1, [pc, #96]	@ (80030c8 <HAL_GPIO_Init+0x2d0>)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	4313      	orrs	r3, r2
 800306a:	604b      	str	r3, [r1, #4]
 800306c:	e006      	b.n	800307c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800306e:	4b16      	ldr	r3, [pc, #88]	@ (80030c8 <HAL_GPIO_Init+0x2d0>)
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	43db      	mvns	r3, r3
 8003076:	4914      	ldr	r1, [pc, #80]	@ (80030c8 <HAL_GPIO_Init+0x2d0>)
 8003078:	4013      	ands	r3, r2
 800307a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d021      	beq.n	80030cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003088:	4b0f      	ldr	r3, [pc, #60]	@ (80030c8 <HAL_GPIO_Init+0x2d0>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	490e      	ldr	r1, [pc, #56]	@ (80030c8 <HAL_GPIO_Init+0x2d0>)
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	4313      	orrs	r3, r2
 8003092:	600b      	str	r3, [r1, #0]
 8003094:	e021      	b.n	80030da <HAL_GPIO_Init+0x2e2>
 8003096:	bf00      	nop
 8003098:	10320000 	.word	0x10320000
 800309c:	10310000 	.word	0x10310000
 80030a0:	10220000 	.word	0x10220000
 80030a4:	10210000 	.word	0x10210000
 80030a8:	10120000 	.word	0x10120000
 80030ac:	10110000 	.word	0x10110000
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40010000 	.word	0x40010000
 80030b8:	40010800 	.word	0x40010800
 80030bc:	40010c00 	.word	0x40010c00
 80030c0:	40011000 	.word	0x40011000
 80030c4:	40011400 	.word	0x40011400
 80030c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030cc:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <HAL_GPIO_Init+0x304>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	43db      	mvns	r3, r3
 80030d4:	4909      	ldr	r1, [pc, #36]	@ (80030fc <HAL_GPIO_Init+0x304>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80030da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030dc:	3301      	adds	r3, #1
 80030de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f47f ae8e 	bne.w	8002e0c <HAL_GPIO_Init+0x14>
  }
}
 80030f0:	bf00      	nop
 80030f2:	bf00      	nop
 80030f4:	372c      	adds	r7, #44	@ 0x2c
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr
 80030fc:	40010400 	.word	0x40010400

08003100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	807b      	strh	r3, [r7, #2]
 800310c:	4613      	mov	r3, r2
 800310e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003110:	787b      	ldrb	r3, [r7, #1]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003116:	887a      	ldrh	r2, [r7, #2]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800311c:	e003      	b.n	8003126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800311e:	887b      	ldrh	r3, [r7, #2]
 8003120:	041a      	lsls	r2, r3, #16
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	611a      	str	r2, [r3, #16]
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr

08003130 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003142:	887a      	ldrh	r2, [r7, #2]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4013      	ands	r3, r2
 8003148:	041a      	lsls	r2, r3, #16
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	43d9      	mvns	r1, r3
 800314e:	887b      	ldrh	r3, [r7, #2]
 8003150:	400b      	ands	r3, r1
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	611a      	str	r2, [r3, #16]
}
 8003158:	bf00      	nop
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr
	...

08003164 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800316e:	4b08      	ldr	r3, [pc, #32]	@ (8003190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003170:	695a      	ldr	r2, [r3, #20]
 8003172:	88fb      	ldrh	r3, [r7, #6]
 8003174:	4013      	ands	r3, r2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d006      	beq.n	8003188 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800317a:	4a05      	ldr	r2, [pc, #20]	@ (8003190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003180:	88fb      	ldrh	r3, [r7, #6]
 8003182:	4618      	mov	r0, r3
 8003184:	f7fe fdea 	bl	8001d5c <HAL_GPIO_EXTI_Callback>
  }
}
 8003188:	bf00      	nop
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40010400 	.word	0x40010400

08003194 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e12b      	b.n	80033fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff f9f6 	bl	80025ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2224      	movs	r2, #36	@ 0x24
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0201 	bic.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031f8:	f001 fbca 	bl	8004990 <HAL_RCC_GetPCLK1Freq>
 80031fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4a81      	ldr	r2, [pc, #516]	@ (8003408 <HAL_I2C_Init+0x274>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d807      	bhi.n	8003218 <HAL_I2C_Init+0x84>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4a80      	ldr	r2, [pc, #512]	@ (800340c <HAL_I2C_Init+0x278>)
 800320c:	4293      	cmp	r3, r2
 800320e:	bf94      	ite	ls
 8003210:	2301      	movls	r3, #1
 8003212:	2300      	movhi	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	e006      	b.n	8003226 <HAL_I2C_Init+0x92>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4a7d      	ldr	r2, [pc, #500]	@ (8003410 <HAL_I2C_Init+0x27c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	bf94      	ite	ls
 8003220:	2301      	movls	r3, #1
 8003222:	2300      	movhi	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e0e7      	b.n	80033fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4a78      	ldr	r2, [pc, #480]	@ (8003414 <HAL_I2C_Init+0x280>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	0c9b      	lsrs	r3, r3, #18
 8003238:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	430a      	orrs	r2, r1
 800324c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4a6a      	ldr	r2, [pc, #424]	@ (8003408 <HAL_I2C_Init+0x274>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d802      	bhi.n	8003268 <HAL_I2C_Init+0xd4>
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	3301      	adds	r3, #1
 8003266:	e009      	b.n	800327c <HAL_I2C_Init+0xe8>
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800326e:	fb02 f303 	mul.w	r3, r2, r3
 8003272:	4a69      	ldr	r2, [pc, #420]	@ (8003418 <HAL_I2C_Init+0x284>)
 8003274:	fba2 2303 	umull	r2, r3, r2, r3
 8003278:	099b      	lsrs	r3, r3, #6
 800327a:	3301      	adds	r3, #1
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	430b      	orrs	r3, r1
 8003282:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800328e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	495c      	ldr	r1, [pc, #368]	@ (8003408 <HAL_I2C_Init+0x274>)
 8003298:	428b      	cmp	r3, r1
 800329a:	d819      	bhi.n	80032d0 <HAL_I2C_Init+0x13c>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	1e59      	subs	r1, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80032aa:	1c59      	adds	r1, r3, #1
 80032ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80032b0:	400b      	ands	r3, r1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_I2C_Init+0x138>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	1e59      	subs	r1, r3, #1
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032c4:	3301      	adds	r3, #1
 80032c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ca:	e051      	b.n	8003370 <HAL_I2C_Init+0x1dc>
 80032cc:	2304      	movs	r3, #4
 80032ce:	e04f      	b.n	8003370 <HAL_I2C_Init+0x1dc>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d111      	bne.n	80032fc <HAL_I2C_Init+0x168>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1e58      	subs	r0, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6859      	ldr	r1, [r3, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	440b      	add	r3, r1
 80032e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ea:	3301      	adds	r3, #1
 80032ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	bf0c      	ite	eq
 80032f4:	2301      	moveq	r3, #1
 80032f6:	2300      	movne	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	e012      	b.n	8003322 <HAL_I2C_Init+0x18e>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	1e58      	subs	r0, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6859      	ldr	r1, [r3, #4]
 8003304:	460b      	mov	r3, r1
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	0099      	lsls	r1, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003312:	3301      	adds	r3, #1
 8003314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003318:	2b00      	cmp	r3, #0
 800331a:	bf0c      	ite	eq
 800331c:	2301      	moveq	r3, #1
 800331e:	2300      	movne	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_I2C_Init+0x196>
 8003326:	2301      	movs	r3, #1
 8003328:	e022      	b.n	8003370 <HAL_I2C_Init+0x1dc>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10e      	bne.n	8003350 <HAL_I2C_Init+0x1bc>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1e58      	subs	r0, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6859      	ldr	r1, [r3, #4]
 800333a:	460b      	mov	r3, r1
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	440b      	add	r3, r1
 8003340:	fbb0 f3f3 	udiv	r3, r0, r3
 8003344:	3301      	adds	r3, #1
 8003346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800334a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800334e:	e00f      	b.n	8003370 <HAL_I2C_Init+0x1dc>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1e58      	subs	r0, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6859      	ldr	r1, [r3, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	0099      	lsls	r1, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	fbb0 f3f3 	udiv	r3, r0, r3
 8003366:	3301      	adds	r3, #1
 8003368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800336c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	6809      	ldr	r1, [r1, #0]
 8003374:	4313      	orrs	r3, r2
 8003376:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69da      	ldr	r2, [r3, #28]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800339e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6911      	ldr	r1, [r2, #16]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	68d2      	ldr	r2, [r2, #12]
 80033aa:	4311      	orrs	r1, r2
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6812      	ldr	r2, [r2, #0]
 80033b0:	430b      	orrs	r3, r1
 80033b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	000186a0 	.word	0x000186a0
 800340c:	001e847f 	.word	0x001e847f
 8003410:	003d08ff 	.word	0x003d08ff
 8003414:	431bde83 	.word	0x431bde83
 8003418:	10624dd3 	.word	0x10624dd3

0800341c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af02      	add	r7, sp, #8
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	607a      	str	r2, [r7, #4]
 8003426:	461a      	mov	r2, r3
 8003428:	460b      	mov	r3, r1
 800342a:	817b      	strh	r3, [r7, #10]
 800342c:	4613      	mov	r3, r2
 800342e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003430:	f7ff faf4 	bl	8002a1c <HAL_GetTick>
 8003434:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b20      	cmp	r3, #32
 8003440:	f040 80e0 	bne.w	8003604 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	2319      	movs	r3, #25
 800344a:	2201      	movs	r2, #1
 800344c:	4970      	ldr	r1, [pc, #448]	@ (8003610 <HAL_I2C_Master_Transmit+0x1f4>)
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fc9e 	bl	8003d90 <I2C_WaitOnFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800345a:	2302      	movs	r3, #2
 800345c:	e0d3      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_I2C_Master_Transmit+0x50>
 8003468:	2302      	movs	r3, #2
 800346a:	e0cc      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b01      	cmp	r3, #1
 8003480:	d007      	beq.n	8003492 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2221      	movs	r2, #33	@ 0x21
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2210      	movs	r2, #16
 80034ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	893a      	ldrh	r2, [r7, #8]
 80034c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4a50      	ldr	r2, [pc, #320]	@ (8003614 <HAL_I2C_Master_Transmit+0x1f8>)
 80034d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034d4:	8979      	ldrh	r1, [r7, #10]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	6a3a      	ldr	r2, [r7, #32]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 fb08 	bl	8003af0 <I2C_MasterRequestWrite>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e08d      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ea:	2300      	movs	r3, #0
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003500:	e066      	b.n	80035d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	6a39      	ldr	r1, [r7, #32]
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 fd5c 	bl	8003fc4 <I2C_WaitOnTXEFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00d      	beq.n	800352e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003516:	2b04      	cmp	r3, #4
 8003518:	d107      	bne.n	800352a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003528:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e06b      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003532:	781a      	ldrb	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b04      	cmp	r3, #4
 800356a:	d11b      	bne.n	80035a4 <HAL_I2C_Master_Transmit+0x188>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003570:	2b00      	cmp	r3, #0
 8003572:	d017      	beq.n	80035a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003578:	781a      	ldrb	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359c:	3b01      	subs	r3, #1
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	6a39      	ldr	r1, [r7, #32]
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 fd53 	bl	8004054 <I2C_WaitOnBTFFlagUntilTimeout>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00d      	beq.n	80035d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d107      	bne.n	80035cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e01a      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d194      	bne.n	8003502 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	e000      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003604:	2302      	movs	r3, #2
  }
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	00100002 	.word	0x00100002
 8003614:	ffff0000 	.word	0xffff0000

08003618 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08c      	sub	sp, #48	@ 0x30
 800361c:	af02      	add	r7, sp, #8
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	607a      	str	r2, [r7, #4]
 8003622:	461a      	mov	r2, r3
 8003624:	460b      	mov	r3, r1
 8003626:	817b      	strh	r3, [r7, #10]
 8003628:	4613      	mov	r3, r2
 800362a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003630:	f7ff f9f4 	bl	8002a1c <HAL_GetTick>
 8003634:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b20      	cmp	r3, #32
 8003640:	f040 824b 	bne.w	8003ada <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	2319      	movs	r3, #25
 800364a:	2201      	movs	r2, #1
 800364c:	497f      	ldr	r1, [pc, #508]	@ (800384c <HAL_I2C_Master_Receive+0x234>)
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 fb9e 	bl	8003d90 <I2C_WaitOnFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800365a:	2302      	movs	r3, #2
 800365c:	e23e      	b.n	8003adc <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_I2C_Master_Receive+0x54>
 8003668:	2302      	movs	r3, #2
 800366a:	e237      	b.n	8003adc <HAL_I2C_Master_Receive+0x4c4>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b01      	cmp	r3, #1
 8003680:	d007      	beq.n	8003692 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0201 	orr.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2222      	movs	r2, #34	@ 0x22
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2210      	movs	r2, #16
 80036ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	893a      	ldrh	r2, [r7, #8]
 80036c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4a5f      	ldr	r2, [pc, #380]	@ (8003850 <HAL_I2C_Master_Receive+0x238>)
 80036d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036d4:	8979      	ldrh	r1, [r7, #10]
 80036d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fa8a 	bl	8003bf4 <I2C_MasterRequestRead>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e1f8      	b.n	8003adc <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d113      	bne.n	800371a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f2:	2300      	movs	r3, #0
 80036f4:	61fb      	str	r3, [r7, #28]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	61fb      	str	r3, [r7, #28]
 8003706:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	e1cc      	b.n	8003ab4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800371e:	2b01      	cmp	r3, #1
 8003720:	d11e      	bne.n	8003760 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003730:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003732:	b672      	cpsid	i
}
 8003734:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003736:	2300      	movs	r3, #0
 8003738:	61bb      	str	r3, [r7, #24]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	61bb      	str	r3, [r7, #24]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	61bb      	str	r3, [r7, #24]
 800374a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800375a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800375c:	b662      	cpsie	i
}
 800375e:	e035      	b.n	80037cc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003764:	2b02      	cmp	r3, #2
 8003766:	d11e      	bne.n	80037a6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003776:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003778:	b672      	cpsid	i
}
 800377a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80037a2:	b662      	cpsie	i
}
 80037a4:	e012      	b.n	80037cc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037b6:	2300      	movs	r3, #0
 80037b8:	613b      	str	r3, [r7, #16]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	613b      	str	r3, [r7, #16]
 80037ca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80037cc:	e172      	b.n	8003ab4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	f200 811f 	bhi.w	8003a16 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d123      	bne.n	8003828 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 fc7d 	bl	80040e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e173      	b.n	8003adc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800381c:	b29b      	uxth	r3, r3
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003826:	e145      	b.n	8003ab4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800382c:	2b02      	cmp	r3, #2
 800382e:	d152      	bne.n	80038d6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003836:	2200      	movs	r2, #0
 8003838:	4906      	ldr	r1, [pc, #24]	@ (8003854 <HAL_I2C_Master_Receive+0x23c>)
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 faa8 	bl	8003d90 <I2C_WaitOnFlagUntilTimeout>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d008      	beq.n	8003858 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e148      	b.n	8003adc <HAL_I2C_Master_Receive+0x4c4>
 800384a:	bf00      	nop
 800384c:	00100002 	.word	0x00100002
 8003850:	ffff0000 	.word	0xffff0000
 8003854:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003858:	b672      	cpsid	i
}
 800385a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800386a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691a      	ldr	r2, [r3, #16]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003894:	b29b      	uxth	r3, r3
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800389e:	b662      	cpsie	i
}
 80038a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	691a      	ldr	r2, [r3, #16]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038d4:	e0ee      	b.n	8003ab4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038dc:	2200      	movs	r2, #0
 80038de:	4981      	ldr	r1, [pc, #516]	@ (8003ae4 <HAL_I2C_Master_Receive+0x4cc>)
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 fa55 	bl	8003d90 <I2C_WaitOnFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0f5      	b.n	8003adc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003900:	b672      	cpsid	i
}
 8003902:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691a      	ldr	r2, [r3, #16]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003936:	4b6c      	ldr	r3, [pc, #432]	@ (8003ae8 <HAL_I2C_Master_Receive+0x4d0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	08db      	lsrs	r3, r3, #3
 800393c:	4a6b      	ldr	r2, [pc, #428]	@ (8003aec <HAL_I2C_Master_Receive+0x4d4>)
 800393e:	fba2 2303 	umull	r2, r3, r2, r3
 8003942:	0a1a      	lsrs	r2, r3, #8
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	00da      	lsls	r2, r3, #3
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	3b01      	subs	r3, #1
 8003954:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d118      	bne.n	800398e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003976:	f043 0220 	orr.w	r2, r3, #32
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800397e:	b662      	cpsie	i
}
 8003980:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e0a6      	b.n	8003adc <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b04      	cmp	r3, #4
 800399a:	d1d9      	bne.n	8003950 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b29a      	uxth	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80039de:	b662      	cpsie	i
}
 80039e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	691a      	ldr	r2, [r3, #16]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a14:	e04e      	b.n	8003ab4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a18:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 fb62 	bl	80040e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e058      	b.n	8003adc <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d124      	bne.n	8003ab4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d107      	bne.n	8003a82 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a80:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f47f ae88 	bne.w	80037ce <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e000      	b.n	8003adc <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003ada:	2302      	movs	r3, #2
  }
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3728      	adds	r7, #40	@ 0x28
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	00010004 	.word	0x00010004
 8003ae8:	20000008 	.word	0x20000008
 8003aec:	14f8b589 	.word	0x14f8b589

08003af0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	607a      	str	r2, [r7, #4]
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	460b      	mov	r3, r1
 8003afe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d006      	beq.n	8003b1a <I2C_MasterRequestWrite+0x2a>
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d003      	beq.n	8003b1a <I2C_MasterRequestWrite+0x2a>
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b18:	d108      	bne.n	8003b2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	e00b      	b.n	8003b44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b30:	2b12      	cmp	r3, #18
 8003b32:	d107      	bne.n	8003b44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 f91d 	bl	8003d90 <I2C_WaitOnFlagUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00d      	beq.n	8003b78 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b6a:	d103      	bne.n	8003b74 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b72:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e035      	b.n	8003be4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b80:	d108      	bne.n	8003b94 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b82:	897b      	ldrh	r3, [r7, #10]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	461a      	mov	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b90:	611a      	str	r2, [r3, #16]
 8003b92:	e01b      	b.n	8003bcc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b94:	897b      	ldrh	r3, [r7, #10]
 8003b96:	11db      	asrs	r3, r3, #7
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	f003 0306 	and.w	r3, r3, #6
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	f063 030f 	orn	r3, r3, #15
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	490e      	ldr	r1, [pc, #56]	@ (8003bec <I2C_MasterRequestWrite+0xfc>)
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f966 	bl	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e010      	b.n	8003be4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003bc2:	897b      	ldrh	r3, [r7, #10]
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	4907      	ldr	r1, [pc, #28]	@ (8003bf0 <I2C_MasterRequestWrite+0x100>)
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 f956 	bl	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	00010008 	.word	0x00010008
 8003bf0:	00010002 	.word	0x00010002

08003bf4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	607a      	str	r2, [r7, #4]
 8003bfe:	603b      	str	r3, [r7, #0]
 8003c00:	460b      	mov	r3, r1
 8003c02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c08:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c18:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d006      	beq.n	8003c2e <I2C_MasterRequestRead+0x3a>
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d003      	beq.n	8003c2e <I2C_MasterRequestRead+0x3a>
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c2c:	d108      	bne.n	8003c40 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	e00b      	b.n	8003c58 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c44:	2b11      	cmp	r3, #17
 8003c46:	d107      	bne.n	8003c58 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 f893 	bl	8003d90 <I2C_WaitOnFlagUntilTimeout>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00d      	beq.n	8003c8c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c7e:	d103      	bne.n	8003c88 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e079      	b.n	8003d80 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c94:	d108      	bne.n	8003ca8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c96:	897b      	ldrh	r3, [r7, #10]
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	611a      	str	r2, [r3, #16]
 8003ca6:	e05f      	b.n	8003d68 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ca8:	897b      	ldrh	r3, [r7, #10]
 8003caa:	11db      	asrs	r3, r3, #7
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	f003 0306 	and.w	r3, r3, #6
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	f063 030f 	orn	r3, r3, #15
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	4930      	ldr	r1, [pc, #192]	@ (8003d88 <I2C_MasterRequestRead+0x194>)
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 f8dc 	bl	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e054      	b.n	8003d80 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003cd6:	897b      	ldrh	r3, [r7, #10]
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	4929      	ldr	r1, [pc, #164]	@ (8003d8c <I2C_MasterRequestRead+0x198>)
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 f8cc 	bl	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e044      	b.n	8003d80 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	613b      	str	r3, [r7, #16]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	613b      	str	r3, [r7, #16]
 8003d0a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d1a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f831 	bl	8003d90 <I2C_WaitOnFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00d      	beq.n	8003d50 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d42:	d103      	bne.n	8003d4c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d4a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e017      	b.n	8003d80 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003d50:	897b      	ldrh	r3, [r7, #10]
 8003d52:	11db      	asrs	r3, r3, #7
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	f003 0306 	and.w	r3, r3, #6
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f063 030e 	orn	r3, r3, #14
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	4907      	ldr	r1, [pc, #28]	@ (8003d8c <I2C_MasterRequestRead+0x198>)
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f888 	bl	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	00010008 	.word	0x00010008
 8003d8c:	00010002 	.word	0x00010002

08003d90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003da0:	e048      	b.n	8003e34 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da8:	d044      	beq.n	8003e34 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003daa:	f7fe fe37 	bl	8002a1c <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d302      	bcc.n	8003dc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d139      	bne.n	8003e34 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	0c1b      	lsrs	r3, r3, #16
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d10d      	bne.n	8003de6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	43da      	mvns	r2, r3
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	bf0c      	ite	eq
 8003ddc:	2301      	moveq	r3, #1
 8003dde:	2300      	movne	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	e00c      	b.n	8003e00 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	43da      	mvns	r2, r3
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	4013      	ands	r3, r2
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	bf0c      	ite	eq
 8003df8:	2301      	moveq	r3, #1
 8003dfa:	2300      	movne	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	461a      	mov	r2, r3
 8003e00:	79fb      	ldrb	r3, [r7, #7]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d116      	bne.n	8003e34 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e20:	f043 0220 	orr.w	r2, r3, #32
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e023      	b.n	8003e7c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	0c1b      	lsrs	r3, r3, #16
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d10d      	bne.n	8003e5a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	43da      	mvns	r2, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	bf0c      	ite	eq
 8003e50:	2301      	moveq	r3, #1
 8003e52:	2300      	movne	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	461a      	mov	r2, r3
 8003e58:	e00c      	b.n	8003e74 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	43da      	mvns	r2, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	4013      	ands	r3, r2
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	bf0c      	ite	eq
 8003e6c:	2301      	moveq	r3, #1
 8003e6e:	2300      	movne	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	461a      	mov	r2, r3
 8003e74:	79fb      	ldrb	r3, [r7, #7]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d093      	beq.n	8003da2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
 8003e90:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e92:	e071      	b.n	8003f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ea2:	d123      	bne.n	8003eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eb2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ebc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed8:	f043 0204 	orr.w	r2, r3, #4
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e067      	b.n	8003fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef2:	d041      	beq.n	8003f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef4:	f7fe fd92 	bl	8002a1c <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d302      	bcc.n	8003f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d136      	bne.n	8003f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	0c1b      	lsrs	r3, r3, #16
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d10c      	bne.n	8003f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	43da      	mvns	r2, r3
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	bf14      	ite	ne
 8003f26:	2301      	movne	r3, #1
 8003f28:	2300      	moveq	r3, #0
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	e00b      	b.n	8003f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	43da      	mvns	r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	bf14      	ite	ne
 8003f40:	2301      	movne	r3, #1
 8003f42:	2300      	moveq	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d016      	beq.n	8003f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f64:	f043 0220 	orr.w	r2, r3, #32
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e021      	b.n	8003fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	0c1b      	lsrs	r3, r3, #16
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d10c      	bne.n	8003f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	43da      	mvns	r2, r3
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf14      	ite	ne
 8003f94:	2301      	movne	r3, #1
 8003f96:	2300      	moveq	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	e00b      	b.n	8003fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	43da      	mvns	r2, r3
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	bf14      	ite	ne
 8003fae:	2301      	movne	r3, #1
 8003fb0:	2300      	moveq	r3, #0
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f47f af6d 	bne.w	8003e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fd0:	e034      	b.n	800403c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 f8e3 	bl	800419e <I2C_IsAcknowledgeFailed>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e034      	b.n	800404c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe8:	d028      	beq.n	800403c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fea:	f7fe fd17 	bl	8002a1c <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d302      	bcc.n	8004000 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d11d      	bne.n	800403c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800400a:	2b80      	cmp	r3, #128	@ 0x80
 800400c:	d016      	beq.n	800403c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004028:	f043 0220 	orr.w	r2, r3, #32
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e007      	b.n	800404c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004046:	2b80      	cmp	r3, #128	@ 0x80
 8004048:	d1c3      	bne.n	8003fd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004060:	e034      	b.n	80040cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f89b 	bl	800419e <I2C_IsAcknowledgeFailed>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e034      	b.n	80040dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004078:	d028      	beq.n	80040cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800407a:	f7fe fccf 	bl	8002a1c <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	429a      	cmp	r2, r3
 8004088:	d302      	bcc.n	8004090 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d11d      	bne.n	80040cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f003 0304 	and.w	r3, r3, #4
 800409a:	2b04      	cmp	r3, #4
 800409c:	d016      	beq.n	80040cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b8:	f043 0220 	orr.w	r2, r3, #32
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e007      	b.n	80040dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d1c3      	bne.n	8004062 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040f0:	e049      	b.n	8004186 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	f003 0310 	and.w	r3, r3, #16
 80040fc:	2b10      	cmp	r3, #16
 80040fe:	d119      	bne.n	8004134 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f06f 0210 	mvn.w	r2, #16
 8004108:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e030      	b.n	8004196 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004134:	f7fe fc72 	bl	8002a1c <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	429a      	cmp	r2, r3
 8004142:	d302      	bcc.n	800414a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d11d      	bne.n	8004186 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004154:	2b40      	cmp	r3, #64	@ 0x40
 8004156:	d016      	beq.n	8004186 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2220      	movs	r2, #32
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004172:	f043 0220 	orr.w	r2, r3, #32
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e007      	b.n	8004196 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004190:	2b40      	cmp	r3, #64	@ 0x40
 8004192:	d1ae      	bne.n	80040f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041b4:	d11b      	bne.n	80041ee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041be:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041da:	f043 0204 	orr.w	r2, r3, #4
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr
	...

080041fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e272      	b.n	80046f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 8087 	beq.w	800432a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800421c:	4b92      	ldr	r3, [pc, #584]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f003 030c 	and.w	r3, r3, #12
 8004224:	2b04      	cmp	r3, #4
 8004226:	d00c      	beq.n	8004242 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004228:	4b8f      	ldr	r3, [pc, #572]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f003 030c 	and.w	r3, r3, #12
 8004230:	2b08      	cmp	r3, #8
 8004232:	d112      	bne.n	800425a <HAL_RCC_OscConfig+0x5e>
 8004234:	4b8c      	ldr	r3, [pc, #560]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800423c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004240:	d10b      	bne.n	800425a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004242:	4b89      	ldr	r3, [pc, #548]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d06c      	beq.n	8004328 <HAL_RCC_OscConfig+0x12c>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d168      	bne.n	8004328 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e24c      	b.n	80046f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004262:	d106      	bne.n	8004272 <HAL_RCC_OscConfig+0x76>
 8004264:	4b80      	ldr	r3, [pc, #512]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a7f      	ldr	r2, [pc, #508]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 800426a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800426e:	6013      	str	r3, [r2, #0]
 8004270:	e02e      	b.n	80042d0 <HAL_RCC_OscConfig+0xd4>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10c      	bne.n	8004294 <HAL_RCC_OscConfig+0x98>
 800427a:	4b7b      	ldr	r3, [pc, #492]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a7a      	ldr	r2, [pc, #488]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 8004280:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	4b78      	ldr	r3, [pc, #480]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a77      	ldr	r2, [pc, #476]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 800428c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	e01d      	b.n	80042d0 <HAL_RCC_OscConfig+0xd4>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800429c:	d10c      	bne.n	80042b8 <HAL_RCC_OscConfig+0xbc>
 800429e:	4b72      	ldr	r3, [pc, #456]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a71      	ldr	r2, [pc, #452]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 80042a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	4b6f      	ldr	r3, [pc, #444]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a6e      	ldr	r2, [pc, #440]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 80042b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	e00b      	b.n	80042d0 <HAL_RCC_OscConfig+0xd4>
 80042b8:	4b6b      	ldr	r3, [pc, #428]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a6a      	ldr	r2, [pc, #424]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 80042be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042c2:	6013      	str	r3, [r2, #0]
 80042c4:	4b68      	ldr	r3, [pc, #416]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a67      	ldr	r2, [pc, #412]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 80042ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d013      	beq.n	8004300 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d8:	f7fe fba0 	bl	8002a1c <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042e0:	f7fe fb9c 	bl	8002a1c <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b64      	cmp	r3, #100	@ 0x64
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e200      	b.n	80046f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f2:	4b5d      	ldr	r3, [pc, #372]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0f0      	beq.n	80042e0 <HAL_RCC_OscConfig+0xe4>
 80042fe:	e014      	b.n	800432a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004300:	f7fe fb8c 	bl	8002a1c <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004308:	f7fe fb88 	bl	8002a1c <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b64      	cmp	r3, #100	@ 0x64
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e1ec      	b.n	80046f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800431a:	4b53      	ldr	r3, [pc, #332]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f0      	bne.n	8004308 <HAL_RCC_OscConfig+0x10c>
 8004326:	e000      	b.n	800432a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d063      	beq.n	80043fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004336:	4b4c      	ldr	r3, [pc, #304]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f003 030c 	and.w	r3, r3, #12
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00b      	beq.n	800435a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004342:	4b49      	ldr	r3, [pc, #292]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f003 030c 	and.w	r3, r3, #12
 800434a:	2b08      	cmp	r3, #8
 800434c:	d11c      	bne.n	8004388 <HAL_RCC_OscConfig+0x18c>
 800434e:	4b46      	ldr	r3, [pc, #280]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d116      	bne.n	8004388 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800435a:	4b43      	ldr	r3, [pc, #268]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d005      	beq.n	8004372 <HAL_RCC_OscConfig+0x176>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d001      	beq.n	8004372 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e1c0      	b.n	80046f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004372:	4b3d      	ldr	r3, [pc, #244]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4939      	ldr	r1, [pc, #228]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 8004382:	4313      	orrs	r3, r2
 8004384:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004386:	e03a      	b.n	80043fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d020      	beq.n	80043d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004390:	4b36      	ldr	r3, [pc, #216]	@ (800446c <HAL_RCC_OscConfig+0x270>)
 8004392:	2201      	movs	r2, #1
 8004394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004396:	f7fe fb41 	bl	8002a1c <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439c:	e008      	b.n	80043b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800439e:	f7fe fb3d 	bl	8002a1c <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e1a1      	b.n	80046f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0f0      	beq.n	800439e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043bc:	4b2a      	ldr	r3, [pc, #168]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	4927      	ldr	r1, [pc, #156]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	600b      	str	r3, [r1, #0]
 80043d0:	e015      	b.n	80043fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043d2:	4b26      	ldr	r3, [pc, #152]	@ (800446c <HAL_RCC_OscConfig+0x270>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d8:	f7fe fb20 	bl	8002a1c <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043e0:	f7fe fb1c 	bl	8002a1c <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e180      	b.n	80046f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1f0      	bne.n	80043e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b00      	cmp	r3, #0
 8004408:	d03a      	beq.n	8004480 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d019      	beq.n	8004446 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004412:	4b17      	ldr	r3, [pc, #92]	@ (8004470 <HAL_RCC_OscConfig+0x274>)
 8004414:	2201      	movs	r2, #1
 8004416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004418:	f7fe fb00 	bl	8002a1c <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004420:	f7fe fafc 	bl	8002a1c <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e160      	b.n	80046f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004432:	4b0d      	ldr	r3, [pc, #52]	@ (8004468 <HAL_RCC_OscConfig+0x26c>)
 8004434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0f0      	beq.n	8004420 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800443e:	2001      	movs	r0, #1
 8004440:	f000 face 	bl	80049e0 <RCC_Delay>
 8004444:	e01c      	b.n	8004480 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004446:	4b0a      	ldr	r3, [pc, #40]	@ (8004470 <HAL_RCC_OscConfig+0x274>)
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800444c:	f7fe fae6 	bl	8002a1c <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004452:	e00f      	b.n	8004474 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004454:	f7fe fae2 	bl	8002a1c <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d908      	bls.n	8004474 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e146      	b.n	80046f4 <HAL_RCC_OscConfig+0x4f8>
 8004466:	bf00      	nop
 8004468:	40021000 	.word	0x40021000
 800446c:	42420000 	.word	0x42420000
 8004470:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004474:	4b92      	ldr	r3, [pc, #584]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 8004476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1e9      	bne.n	8004454 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 80a6 	beq.w	80045da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800448e:	2300      	movs	r3, #0
 8004490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004492:	4b8b      	ldr	r3, [pc, #556]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10d      	bne.n	80044ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800449e:	4b88      	ldr	r3, [pc, #544]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	4a87      	ldr	r2, [pc, #540]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 80044a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044a8:	61d3      	str	r3, [r2, #28]
 80044aa:	4b85      	ldr	r3, [pc, #532]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044b2:	60bb      	str	r3, [r7, #8]
 80044b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044b6:	2301      	movs	r3, #1
 80044b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ba:	4b82      	ldr	r3, [pc, #520]	@ (80046c4 <HAL_RCC_OscConfig+0x4c8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d118      	bne.n	80044f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044c6:	4b7f      	ldr	r3, [pc, #508]	@ (80046c4 <HAL_RCC_OscConfig+0x4c8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a7e      	ldr	r2, [pc, #504]	@ (80046c4 <HAL_RCC_OscConfig+0x4c8>)
 80044cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044d2:	f7fe faa3 	bl	8002a1c <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044da:	f7fe fa9f 	bl	8002a1c <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b64      	cmp	r3, #100	@ 0x64
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e103      	b.n	80046f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ec:	4b75      	ldr	r3, [pc, #468]	@ (80046c4 <HAL_RCC_OscConfig+0x4c8>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0f0      	beq.n	80044da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d106      	bne.n	800450e <HAL_RCC_OscConfig+0x312>
 8004500:	4b6f      	ldr	r3, [pc, #444]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	4a6e      	ldr	r2, [pc, #440]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 8004506:	f043 0301 	orr.w	r3, r3, #1
 800450a:	6213      	str	r3, [r2, #32]
 800450c:	e02d      	b.n	800456a <HAL_RCC_OscConfig+0x36e>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10c      	bne.n	8004530 <HAL_RCC_OscConfig+0x334>
 8004516:	4b6a      	ldr	r3, [pc, #424]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	4a69      	ldr	r2, [pc, #420]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 800451c:	f023 0301 	bic.w	r3, r3, #1
 8004520:	6213      	str	r3, [r2, #32]
 8004522:	4b67      	ldr	r3, [pc, #412]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	4a66      	ldr	r2, [pc, #408]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 8004528:	f023 0304 	bic.w	r3, r3, #4
 800452c:	6213      	str	r3, [r2, #32]
 800452e:	e01c      	b.n	800456a <HAL_RCC_OscConfig+0x36e>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	2b05      	cmp	r3, #5
 8004536:	d10c      	bne.n	8004552 <HAL_RCC_OscConfig+0x356>
 8004538:	4b61      	ldr	r3, [pc, #388]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	4a60      	ldr	r2, [pc, #384]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 800453e:	f043 0304 	orr.w	r3, r3, #4
 8004542:	6213      	str	r3, [r2, #32]
 8004544:	4b5e      	ldr	r3, [pc, #376]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	4a5d      	ldr	r2, [pc, #372]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	6213      	str	r3, [r2, #32]
 8004550:	e00b      	b.n	800456a <HAL_RCC_OscConfig+0x36e>
 8004552:	4b5b      	ldr	r3, [pc, #364]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	4a5a      	ldr	r2, [pc, #360]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 8004558:	f023 0301 	bic.w	r3, r3, #1
 800455c:	6213      	str	r3, [r2, #32]
 800455e:	4b58      	ldr	r3, [pc, #352]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	4a57      	ldr	r2, [pc, #348]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 8004564:	f023 0304 	bic.w	r3, r3, #4
 8004568:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d015      	beq.n	800459e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004572:	f7fe fa53 	bl	8002a1c <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004578:	e00a      	b.n	8004590 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800457a:	f7fe fa4f 	bl	8002a1c <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004588:	4293      	cmp	r3, r2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e0b1      	b.n	80046f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004590:	4b4b      	ldr	r3, [pc, #300]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0ee      	beq.n	800457a <HAL_RCC_OscConfig+0x37e>
 800459c:	e014      	b.n	80045c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800459e:	f7fe fa3d 	bl	8002a1c <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045a4:	e00a      	b.n	80045bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a6:	f7fe fa39 	bl	8002a1c <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e09b      	b.n	80046f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045bc:	4b40      	ldr	r3, [pc, #256]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1ee      	bne.n	80045a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045c8:	7dfb      	ldrb	r3, [r7, #23]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d105      	bne.n	80045da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ce:	4b3c      	ldr	r3, [pc, #240]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	4a3b      	ldr	r2, [pc, #236]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 80045d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 8087 	beq.w	80046f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045e4:	4b36      	ldr	r3, [pc, #216]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f003 030c 	and.w	r3, r3, #12
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d061      	beq.n	80046b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d146      	bne.n	8004686 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f8:	4b33      	ldr	r3, [pc, #204]	@ (80046c8 <HAL_RCC_OscConfig+0x4cc>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fe:	f7fe fa0d 	bl	8002a1c <HAL_GetTick>
 8004602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004604:	e008      	b.n	8004618 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004606:	f7fe fa09 	bl	8002a1c <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e06d      	b.n	80046f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004618:	4b29      	ldr	r3, [pc, #164]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1f0      	bne.n	8004606 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800462c:	d108      	bne.n	8004640 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800462e:	4b24      	ldr	r3, [pc, #144]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	4921      	ldr	r1, [pc, #132]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 800463c:	4313      	orrs	r3, r2
 800463e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004640:	4b1f      	ldr	r3, [pc, #124]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a19      	ldr	r1, [r3, #32]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004650:	430b      	orrs	r3, r1
 8004652:	491b      	ldr	r1, [pc, #108]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004658:	4b1b      	ldr	r3, [pc, #108]	@ (80046c8 <HAL_RCC_OscConfig+0x4cc>)
 800465a:	2201      	movs	r2, #1
 800465c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465e:	f7fe f9dd 	bl	8002a1c <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004664:	e008      	b.n	8004678 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004666:	f7fe f9d9 	bl	8002a1c <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e03d      	b.n	80046f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004678:	4b11      	ldr	r3, [pc, #68]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0f0      	beq.n	8004666 <HAL_RCC_OscConfig+0x46a>
 8004684:	e035      	b.n	80046f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004686:	4b10      	ldr	r3, [pc, #64]	@ (80046c8 <HAL_RCC_OscConfig+0x4cc>)
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468c:	f7fe f9c6 	bl	8002a1c <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004694:	f7fe f9c2 	bl	8002a1c <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e026      	b.n	80046f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046a6:	4b06      	ldr	r3, [pc, #24]	@ (80046c0 <HAL_RCC_OscConfig+0x4c4>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f0      	bne.n	8004694 <HAL_RCC_OscConfig+0x498>
 80046b2:	e01e      	b.n	80046f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d107      	bne.n	80046cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e019      	b.n	80046f4 <HAL_RCC_OscConfig+0x4f8>
 80046c0:	40021000 	.word	0x40021000
 80046c4:	40007000 	.word	0x40007000
 80046c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046cc:	4b0b      	ldr	r3, [pc, #44]	@ (80046fc <HAL_RCC_OscConfig+0x500>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d106      	bne.n	80046ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d001      	beq.n	80046f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40021000 	.word	0x40021000

08004700 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e0d0      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004714:	4b6a      	ldr	r3, [pc, #424]	@ (80048c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	429a      	cmp	r2, r3
 8004720:	d910      	bls.n	8004744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004722:	4b67      	ldr	r3, [pc, #412]	@ (80048c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f023 0207 	bic.w	r2, r3, #7
 800472a:	4965      	ldr	r1, [pc, #404]	@ (80048c0 <HAL_RCC_ClockConfig+0x1c0>)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	4313      	orrs	r3, r2
 8004730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004732:	4b63      	ldr	r3, [pc, #396]	@ (80048c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	429a      	cmp	r2, r3
 800473e:	d001      	beq.n	8004744 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0b8      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d020      	beq.n	8004792 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d005      	beq.n	8004768 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800475c:	4b59      	ldr	r3, [pc, #356]	@ (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	4a58      	ldr	r2, [pc, #352]	@ (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004762:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004766:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004774:	4b53      	ldr	r3, [pc, #332]	@ (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	4a52      	ldr	r2, [pc, #328]	@ (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 800477a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800477e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004780:	4b50      	ldr	r3, [pc, #320]	@ (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	494d      	ldr	r1, [pc, #308]	@ (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 800478e:	4313      	orrs	r3, r2
 8004790:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d040      	beq.n	8004820 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d107      	bne.n	80047b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a6:	4b47      	ldr	r3, [pc, #284]	@ (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d115      	bne.n	80047de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e07f      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d107      	bne.n	80047ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047be:	4b41      	ldr	r3, [pc, #260]	@ (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d109      	bne.n	80047de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e073      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ce:	4b3d      	ldr	r3, [pc, #244]	@ (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e06b      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047de:	4b39      	ldr	r3, [pc, #228]	@ (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f023 0203 	bic.w	r2, r3, #3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	4936      	ldr	r1, [pc, #216]	@ (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047f0:	f7fe f914 	bl	8002a1c <HAL_GetTick>
 80047f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f6:	e00a      	b.n	800480e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f8:	f7fe f910 	bl	8002a1c <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004806:	4293      	cmp	r3, r2
 8004808:	d901      	bls.n	800480e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e053      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480e:	4b2d      	ldr	r3, [pc, #180]	@ (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f003 020c 	and.w	r2, r3, #12
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	429a      	cmp	r2, r3
 800481e:	d1eb      	bne.n	80047f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004820:	4b27      	ldr	r3, [pc, #156]	@ (80048c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d210      	bcs.n	8004850 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482e:	4b24      	ldr	r3, [pc, #144]	@ (80048c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f023 0207 	bic.w	r2, r3, #7
 8004836:	4922      	ldr	r1, [pc, #136]	@ (80048c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	4313      	orrs	r3, r2
 800483c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800483e:	4b20      	ldr	r3, [pc, #128]	@ (80048c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d001      	beq.n	8004850 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e032      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	d008      	beq.n	800486e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800485c:	4b19      	ldr	r3, [pc, #100]	@ (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	4916      	ldr	r1, [pc, #88]	@ (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 800486a:	4313      	orrs	r3, r2
 800486c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b00      	cmp	r3, #0
 8004878:	d009      	beq.n	800488e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800487a:	4b12      	ldr	r3, [pc, #72]	@ (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	490e      	ldr	r1, [pc, #56]	@ (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 800488a:	4313      	orrs	r3, r2
 800488c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800488e:	f000 f821 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 8004892:	4602      	mov	r2, r0
 8004894:	4b0b      	ldr	r3, [pc, #44]	@ (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	091b      	lsrs	r3, r3, #4
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	490a      	ldr	r1, [pc, #40]	@ (80048c8 <HAL_RCC_ClockConfig+0x1c8>)
 80048a0:	5ccb      	ldrb	r3, [r1, r3]
 80048a2:	fa22 f303 	lsr.w	r3, r2, r3
 80048a6:	4a09      	ldr	r2, [pc, #36]	@ (80048cc <HAL_RCC_ClockConfig+0x1cc>)
 80048a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048aa:	4b09      	ldr	r3, [pc, #36]	@ (80048d0 <HAL_RCC_ClockConfig+0x1d0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fe f872 	bl	8002998 <HAL_InitTick>

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	40022000 	.word	0x40022000
 80048c4:	40021000 	.word	0x40021000
 80048c8:	08009794 	.word	0x08009794
 80048cc:	20000008 	.word	0x20000008
 80048d0:	2000000c 	.word	0x2000000c

080048d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	2300      	movs	r3, #0
 80048e0:	60bb      	str	r3, [r7, #8]
 80048e2:	2300      	movs	r3, #0
 80048e4:	617b      	str	r3, [r7, #20]
 80048e6:	2300      	movs	r3, #0
 80048e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80048ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x94>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f003 030c 	and.w	r3, r3, #12
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d002      	beq.n	8004904 <HAL_RCC_GetSysClockFreq+0x30>
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d003      	beq.n	800490a <HAL_RCC_GetSysClockFreq+0x36>
 8004902:	e027      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004904:	4b19      	ldr	r3, [pc, #100]	@ (800496c <HAL_RCC_GetSysClockFreq+0x98>)
 8004906:	613b      	str	r3, [r7, #16]
      break;
 8004908:	e027      	b.n	800495a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	0c9b      	lsrs	r3, r3, #18
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	4a17      	ldr	r2, [pc, #92]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004914:	5cd3      	ldrb	r3, [r2, r3]
 8004916:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d010      	beq.n	8004944 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004922:	4b11      	ldr	r3, [pc, #68]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x94>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	0c5b      	lsrs	r3, r3, #17
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	4a11      	ldr	r2, [pc, #68]	@ (8004974 <HAL_RCC_GetSysClockFreq+0xa0>)
 800492e:	5cd3      	ldrb	r3, [r2, r3]
 8004930:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a0d      	ldr	r2, [pc, #52]	@ (800496c <HAL_RCC_GetSysClockFreq+0x98>)
 8004936:	fb03 f202 	mul.w	r2, r3, r2
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	e004      	b.n	800494e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a0c      	ldr	r2, [pc, #48]	@ (8004978 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004948:	fb02 f303 	mul.w	r3, r2, r3
 800494c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	613b      	str	r3, [r7, #16]
      break;
 8004952:	e002      	b.n	800495a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004954:	4b05      	ldr	r3, [pc, #20]	@ (800496c <HAL_RCC_GetSysClockFreq+0x98>)
 8004956:	613b      	str	r3, [r7, #16]
      break;
 8004958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800495a:	693b      	ldr	r3, [r7, #16]
}
 800495c:	4618      	mov	r0, r3
 800495e:	371c      	adds	r7, #28
 8004960:	46bd      	mov	sp, r7
 8004962:	bc80      	pop	{r7}
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	40021000 	.word	0x40021000
 800496c:	007a1200 	.word	0x007a1200
 8004970:	080097ac 	.word	0x080097ac
 8004974:	080097bc 	.word	0x080097bc
 8004978:	003d0900 	.word	0x003d0900

0800497c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004980:	4b02      	ldr	r3, [pc, #8]	@ (800498c <HAL_RCC_GetHCLKFreq+0x10>)
 8004982:	681b      	ldr	r3, [r3, #0]
}
 8004984:	4618      	mov	r0, r3
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr
 800498c:	20000008 	.word	0x20000008

08004990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004994:	f7ff fff2 	bl	800497c <HAL_RCC_GetHCLKFreq>
 8004998:	4602      	mov	r2, r0
 800499a:	4b05      	ldr	r3, [pc, #20]	@ (80049b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	0a1b      	lsrs	r3, r3, #8
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	4903      	ldr	r1, [pc, #12]	@ (80049b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049a6:	5ccb      	ldrb	r3, [r1, r3]
 80049a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40021000 	.word	0x40021000
 80049b4:	080097a4 	.word	0x080097a4

080049b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049bc:	f7ff ffde 	bl	800497c <HAL_RCC_GetHCLKFreq>
 80049c0:	4602      	mov	r2, r0
 80049c2:	4b05      	ldr	r3, [pc, #20]	@ (80049d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	0adb      	lsrs	r3, r3, #11
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	4903      	ldr	r1, [pc, #12]	@ (80049dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80049ce:	5ccb      	ldrb	r3, [r1, r3]
 80049d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	40021000 	.word	0x40021000
 80049dc:	080097a4 	.word	0x080097a4

080049e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80049e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004a14 <RCC_Delay+0x34>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a0a      	ldr	r2, [pc, #40]	@ (8004a18 <RCC_Delay+0x38>)
 80049ee:	fba2 2303 	umull	r2, r3, r2, r3
 80049f2:	0a5b      	lsrs	r3, r3, #9
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	fb02 f303 	mul.w	r3, r2, r3
 80049fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80049fc:	bf00      	nop
  }
  while (Delay --);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	1e5a      	subs	r2, r3, #1
 8004a02:	60fa      	str	r2, [r7, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1f9      	bne.n	80049fc <RCC_Delay+0x1c>
}
 8004a08:	bf00      	nop
 8004a0a:	bf00      	nop
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr
 8004a14:	20000008 	.word	0x20000008
 8004a18:	10624dd3 	.word	0x10624dd3

08004a1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e076      	b.n	8004b1c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d108      	bne.n	8004a48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a3e:	d009      	beq.n	8004a54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	61da      	str	r2, [r3, #28]
 8004a46:	e005      	b.n	8004a54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d106      	bne.n	8004a74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fd fdda 	bl	8002628 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ad8:	ea42 0103 	orr.w	r1, r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	0c1a      	lsrs	r2, r3, #16
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f002 0204 	and.w	r2, r2, #4
 8004afa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	69da      	ldr	r2, [r3, #28]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	4613      	mov	r3, r2
 8004b32:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b34:	f7fd ff72 	bl	8002a1c <HAL_GetTick>
 8004b38:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004b3a:	88fb      	ldrh	r3, [r7, #6]
 8004b3c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d001      	beq.n	8004b4e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e12a      	b.n	8004da4 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <HAL_SPI_Transmit+0x36>
 8004b54:	88fb      	ldrh	r3, [r7, #6]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e122      	b.n	8004da4 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_SPI_Transmit+0x48>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e11b      	b.n	8004da4 <HAL_SPI_Transmit+0x280>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2203      	movs	r2, #3
 8004b78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	88fa      	ldrh	r2, [r7, #6]
 8004b8c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	88fa      	ldrh	r2, [r7, #6]
 8004b92:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bba:	d10f      	bne.n	8004bdc <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be6:	2b40      	cmp	r3, #64	@ 0x40
 8004be8:	d007      	beq.n	8004bfa <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bf8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c02:	d152      	bne.n	8004caa <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <HAL_SPI_Transmit+0xee>
 8004c0c:	8b7b      	ldrh	r3, [r7, #26]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d145      	bne.n	8004c9e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c16:	881a      	ldrh	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c22:	1c9a      	adds	r2, r3, #2
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c36:	e032      	b.n	8004c9e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d112      	bne.n	8004c6c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4a:	881a      	ldrh	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c56:	1c9a      	adds	r2, r3, #2
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004c6a:	e018      	b.n	8004c9e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c6c:	f7fd fed6 	bl	8002a1c <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d803      	bhi.n	8004c84 <HAL_SPI_Transmit+0x160>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c82:	d102      	bne.n	8004c8a <HAL_SPI_Transmit+0x166>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d109      	bne.n	8004c9e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e082      	b.n	8004da4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1c7      	bne.n	8004c38 <HAL_SPI_Transmit+0x114>
 8004ca8:	e053      	b.n	8004d52 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <HAL_SPI_Transmit+0x194>
 8004cb2:	8b7b      	ldrh	r3, [r7, #26]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d147      	bne.n	8004d48 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	330c      	adds	r3, #12
 8004cc2:	7812      	ldrb	r2, [r2, #0]
 8004cc4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004cde:	e033      	b.n	8004d48 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d113      	bne.n	8004d16 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	330c      	adds	r3, #12
 8004cf8:	7812      	ldrb	r2, [r2, #0]
 8004cfa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004d14:	e018      	b.n	8004d48 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d16:	f7fd fe81 	bl	8002a1c <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d803      	bhi.n	8004d2e <HAL_SPI_Transmit+0x20a>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2c:	d102      	bne.n	8004d34 <HAL_SPI_Transmit+0x210>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d109      	bne.n	8004d48 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e02d      	b.n	8004da4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1c6      	bne.n	8004ce0 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	6839      	ldr	r1, [r7, #0]
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 fbd2 	bl	8005500 <SPI_EndRxTxTransaction>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2220      	movs	r2, #32
 8004d66:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10a      	bne.n	8004d86 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d70:	2300      	movs	r3, #0
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e000      	b.n	8004da4 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004da2:	2300      	movs	r3, #0
  }
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3720      	adds	r7, #32
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b088      	sub	sp, #32
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	4613      	mov	r3, r2
 8004dba:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d001      	beq.n	8004dcc <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004dc8:	2302      	movs	r3, #2
 8004dca:	e104      	b.n	8004fd6 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dd4:	d112      	bne.n	8004dfc <HAL_SPI_Receive+0x50>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10e      	bne.n	8004dfc <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2204      	movs	r2, #4
 8004de2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004de6:	88fa      	ldrh	r2, [r7, #6]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	4613      	mov	r3, r2
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	68b9      	ldr	r1, [r7, #8]
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 f8f3 	bl	8004fde <HAL_SPI_TransmitReceive>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	e0ec      	b.n	8004fd6 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dfc:	f7fd fe0e 	bl	8002a1c <HAL_GetTick>
 8004e00:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <HAL_SPI_Receive+0x62>
 8004e08:	88fb      	ldrh	r3, [r7, #6]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e0e1      	b.n	8004fd6 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_SPI_Receive+0x74>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e0da      	b.n	8004fd6 <HAL_SPI_Receive+0x22a>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2204      	movs	r2, #4
 8004e2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	88fa      	ldrh	r2, [r7, #6]
 8004e40:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	88fa      	ldrh	r2, [r7, #6]
 8004e46:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e6e:	d10f      	bne.n	8004e90 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e7e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004e8e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e9a:	2b40      	cmp	r3, #64	@ 0x40
 8004e9c:	d007      	beq.n	8004eae <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004eac:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d170      	bne.n	8004f98 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004eb6:	e035      	b.n	8004f24 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d115      	bne.n	8004ef2 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f103 020c 	add.w	r2, r3, #12
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed2:	7812      	ldrb	r2, [r2, #0]
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ef0:	e018      	b.n	8004f24 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ef2:	f7fd fd93 	bl	8002a1c <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d803      	bhi.n	8004f0a <HAL_SPI_Receive+0x15e>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f08:	d102      	bne.n	8004f10 <HAL_SPI_Receive+0x164>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d109      	bne.n	8004f24 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e058      	b.n	8004fd6 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1c4      	bne.n	8004eb8 <HAL_SPI_Receive+0x10c>
 8004f2e:	e038      	b.n	8004fa2 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d113      	bne.n	8004f66 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f48:	b292      	uxth	r2, r2
 8004f4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f50:	1c9a      	adds	r2, r3, #2
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f64:	e018      	b.n	8004f98 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f66:	f7fd fd59 	bl	8002a1c <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d803      	bhi.n	8004f7e <HAL_SPI_Receive+0x1d2>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7c:	d102      	bne.n	8004f84 <HAL_SPI_Receive+0x1d8>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d109      	bne.n	8004f98 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e01e      	b.n	8004fd6 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1c6      	bne.n	8004f30 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	6839      	ldr	r1, [r7, #0]
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 fa58 	bl	800545c <SPI_EndRxTransaction>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d002      	beq.n	8004fb8 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e000      	b.n	8004fd6 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
  }
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b08a      	sub	sp, #40	@ 0x28
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	60f8      	str	r0, [r7, #12]
 8004fe6:	60b9      	str	r1, [r7, #8]
 8004fe8:	607a      	str	r2, [r7, #4]
 8004fea:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fec:	2301      	movs	r3, #1
 8004fee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ff0:	f7fd fd14 	bl	8002a1c <HAL_GetTick>
 8004ff4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ffc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005004:	887b      	ldrh	r3, [r7, #2]
 8005006:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005008:	7ffb      	ldrb	r3, [r7, #31]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d00c      	beq.n	8005028 <HAL_SPI_TransmitReceive+0x4a>
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005014:	d106      	bne.n	8005024 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d102      	bne.n	8005024 <HAL_SPI_TransmitReceive+0x46>
 800501e:	7ffb      	ldrb	r3, [r7, #31]
 8005020:	2b04      	cmp	r3, #4
 8005022:	d001      	beq.n	8005028 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005024:	2302      	movs	r3, #2
 8005026:	e17f      	b.n	8005328 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d005      	beq.n	800503a <HAL_SPI_TransmitReceive+0x5c>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <HAL_SPI_TransmitReceive+0x5c>
 8005034:	887b      	ldrh	r3, [r7, #2]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e174      	b.n	8005328 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <HAL_SPI_TransmitReceive+0x6e>
 8005048:	2302      	movs	r3, #2
 800504a:	e16d      	b.n	8005328 <HAL_SPI_TransmitReceive+0x34a>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b04      	cmp	r3, #4
 800505e:	d003      	beq.n	8005068 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2205      	movs	r2, #5
 8005064:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	887a      	ldrh	r2, [r7, #2]
 8005078:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	887a      	ldrh	r2, [r7, #2]
 800507e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	887a      	ldrh	r2, [r7, #2]
 800508a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	887a      	ldrh	r2, [r7, #2]
 8005090:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a8:	2b40      	cmp	r3, #64	@ 0x40
 80050aa:	d007      	beq.n	80050bc <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050c4:	d17e      	bne.n	80051c4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <HAL_SPI_TransmitReceive+0xf6>
 80050ce:	8afb      	ldrh	r3, [r7, #22]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d16c      	bne.n	80051ae <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d8:	881a      	ldrh	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e4:	1c9a      	adds	r2, r3, #2
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	3b01      	subs	r3, #1
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050f8:	e059      	b.n	80051ae <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b02      	cmp	r3, #2
 8005106:	d11b      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x162>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d016      	beq.n	8005140 <HAL_SPI_TransmitReceive+0x162>
 8005112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005114:	2b01      	cmp	r3, #1
 8005116:	d113      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511c:	881a      	ldrh	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005128:	1c9a      	adds	r2, r3, #2
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005132:	b29b      	uxth	r3, r3
 8005134:	3b01      	subs	r3, #1
 8005136:	b29a      	uxth	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b01      	cmp	r3, #1
 800514c:	d119      	bne.n	8005182 <HAL_SPI_TransmitReceive+0x1a4>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005152:	b29b      	uxth	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d014      	beq.n	8005182 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005162:	b292      	uxth	r2, r2
 8005164:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800516a:	1c9a      	adds	r2, r3, #2
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005174:	b29b      	uxth	r3, r3
 8005176:	3b01      	subs	r3, #1
 8005178:	b29a      	uxth	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800517e:	2301      	movs	r3, #1
 8005180:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005182:	f7fd fc4b 	bl	8002a1c <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800518e:	429a      	cmp	r2, r3
 8005190:	d80d      	bhi.n	80051ae <HAL_SPI_TransmitReceive+0x1d0>
 8005192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005198:	d009      	beq.n	80051ae <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e0bc      	b.n	8005328 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1a0      	bne.n	80050fa <HAL_SPI_TransmitReceive+0x11c>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d19b      	bne.n	80050fa <HAL_SPI_TransmitReceive+0x11c>
 80051c2:	e082      	b.n	80052ca <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <HAL_SPI_TransmitReceive+0x1f4>
 80051cc:	8afb      	ldrh	r3, [r7, #22]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d171      	bne.n	80052b6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	330c      	adds	r3, #12
 80051dc:	7812      	ldrb	r2, [r2, #0]
 80051de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051f8:	e05d      	b.n	80052b6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b02      	cmp	r3, #2
 8005206:	d11c      	bne.n	8005242 <HAL_SPI_TransmitReceive+0x264>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800520c:	b29b      	uxth	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d017      	beq.n	8005242 <HAL_SPI_TransmitReceive+0x264>
 8005212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005214:	2b01      	cmp	r3, #1
 8005216:	d114      	bne.n	8005242 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	330c      	adds	r3, #12
 8005222:	7812      	ldrb	r2, [r2, #0]
 8005224:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005234:	b29b      	uxth	r3, r3
 8005236:	3b01      	subs	r3, #1
 8005238:	b29a      	uxth	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b01      	cmp	r3, #1
 800524e:	d119      	bne.n	8005284 <HAL_SPI_TransmitReceive+0x2a6>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005254:	b29b      	uxth	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d014      	beq.n	8005284 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005280:	2301      	movs	r3, #1
 8005282:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005284:	f7fd fbca 	bl	8002a1c <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005290:	429a      	cmp	r2, r3
 8005292:	d803      	bhi.n	800529c <HAL_SPI_TransmitReceive+0x2be>
 8005294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529a:	d102      	bne.n	80052a2 <HAL_SPI_TransmitReceive+0x2c4>
 800529c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d109      	bne.n	80052b6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e038      	b.n	8005328 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d19c      	bne.n	80051fa <HAL_SPI_TransmitReceive+0x21c>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d197      	bne.n	80051fa <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052ca:	6a3a      	ldr	r2, [r7, #32]
 80052cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f000 f916 	bl	8005500 <SPI_EndRxTxTransaction>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d008      	beq.n	80052ec <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2220      	movs	r2, #32
 80052de:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e01d      	b.n	8005328 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10a      	bne.n	800530a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052f4:	2300      	movs	r3, #0
 80052f6:	613b      	str	r3, [r7, #16]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	613b      	str	r3, [r7, #16]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	613b      	str	r3, [r7, #16]
 8005308:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005326:	2300      	movs	r3, #0
  }
}
 8005328:	4618      	mov	r0, r3
 800532a:	3728      	adds	r7, #40	@ 0x28
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800533e:	b2db      	uxtb	r3, r3
}
 8005340:	4618      	mov	r0, r3
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	bc80      	pop	{r7}
 8005348:	4770      	bx	lr
	...

0800534c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b088      	sub	sp, #32
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	603b      	str	r3, [r7, #0]
 8005358:	4613      	mov	r3, r2
 800535a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800535c:	f7fd fb5e 	bl	8002a1c <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005364:	1a9b      	subs	r3, r3, r2
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	4413      	add	r3, r2
 800536a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800536c:	f7fd fb56 	bl	8002a1c <HAL_GetTick>
 8005370:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005372:	4b39      	ldr	r3, [pc, #228]	@ (8005458 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	015b      	lsls	r3, r3, #5
 8005378:	0d1b      	lsrs	r3, r3, #20
 800537a:	69fa      	ldr	r2, [r7, #28]
 800537c:	fb02 f303 	mul.w	r3, r2, r3
 8005380:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005382:	e054      	b.n	800542e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538a:	d050      	beq.n	800542e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800538c:	f7fd fb46 	bl	8002a1c <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	69fa      	ldr	r2, [r7, #28]
 8005398:	429a      	cmp	r2, r3
 800539a:	d902      	bls.n	80053a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d13d      	bne.n	800541e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80053b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053ba:	d111      	bne.n	80053e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053c4:	d004      	beq.n	80053d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ce:	d107      	bne.n	80053e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053e8:	d10f      	bne.n	800540a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005408:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e017      	b.n	800544e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005424:	2300      	movs	r3, #0
 8005426:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	3b01      	subs	r3, #1
 800542c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	4013      	ands	r3, r2
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	429a      	cmp	r2, r3
 800543c:	bf0c      	ite	eq
 800543e:	2301      	moveq	r3, #1
 8005440:	2300      	movne	r3, #0
 8005442:	b2db      	uxtb	r3, r3
 8005444:	461a      	mov	r2, r3
 8005446:	79fb      	ldrb	r3, [r7, #7]
 8005448:	429a      	cmp	r2, r3
 800544a:	d19b      	bne.n	8005384 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3720      	adds	r7, #32
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20000008 	.word	0x20000008

0800545c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af02      	add	r7, sp, #8
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005470:	d111      	bne.n	8005496 <SPI_EndRxTransaction+0x3a>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800547a:	d004      	beq.n	8005486 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005484:	d107      	bne.n	8005496 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005494:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800549e:	d117      	bne.n	80054d0 <SPI_EndRxTransaction+0x74>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054a8:	d112      	bne.n	80054d0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2200      	movs	r2, #0
 80054b2:	2101      	movs	r1, #1
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f7ff ff49 	bl	800534c <SPI_WaitFlagStateUntilTimeout>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01a      	beq.n	80054f6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c4:	f043 0220 	orr.w	r2, r3, #32
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e013      	b.n	80054f8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2200      	movs	r2, #0
 80054d8:	2180      	movs	r1, #128	@ 0x80
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f7ff ff36 	bl	800534c <SPI_WaitFlagStateUntilTimeout>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d007      	beq.n	80054f6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ea:	f043 0220 	orr.w	r2, r3, #32
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e000      	b.n	80054f8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af02      	add	r7, sp, #8
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2201      	movs	r2, #1
 8005514:	2102      	movs	r1, #2
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f7ff ff18 	bl	800534c <SPI_WaitFlagStateUntilTimeout>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d007      	beq.n	8005532 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005526:	f043 0220 	orr.w	r2, r3, #32
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e013      	b.n	800555a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2200      	movs	r2, #0
 800553a:	2180      	movs	r1, #128	@ 0x80
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f7ff ff05 	bl	800534c <SPI_WaitFlagStateUntilTimeout>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d007      	beq.n	8005558 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800554c:	f043 0220 	orr.w	r2, r3, #32
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e000      	b.n	800555a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b082      	sub	sp, #8
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e042      	b.n	80055fa <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d106      	bne.n	800558e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7fd f897 	bl	80026bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2224      	movs	r2, #36	@ 0x24
 8005592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68da      	ldr	r2, [r3, #12]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055a4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fdc2 	bl	8006130 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	691a      	ldr	r2, [r3, #16]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055ba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	695a      	ldr	r2, [r3, #20]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055ca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68da      	ldr	r2, [r3, #12]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055da:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2220      	movs	r2, #32
 80055e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2220      	movs	r2, #32
 80055ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b08a      	sub	sp, #40	@ 0x28
 8005606:	af02      	add	r7, sp, #8
 8005608:	60f8      	str	r0, [r7, #12]
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	603b      	str	r3, [r7, #0]
 800560e:	4613      	mov	r3, r2
 8005610:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b20      	cmp	r3, #32
 8005620:	d175      	bne.n	800570e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <HAL_UART_Transmit+0x2c>
 8005628:	88fb      	ldrh	r3, [r7, #6]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e06e      	b.n	8005710 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2221      	movs	r2, #33	@ 0x21
 800563c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005640:	f7fd f9ec 	bl	8002a1c <HAL_GetTick>
 8005644:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	88fa      	ldrh	r2, [r7, #6]
 800564a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	88fa      	ldrh	r2, [r7, #6]
 8005650:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800565a:	d108      	bne.n	800566e <HAL_UART_Transmit+0x6c>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d104      	bne.n	800566e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005664:	2300      	movs	r3, #0
 8005666:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	61bb      	str	r3, [r7, #24]
 800566c:	e003      	b.n	8005676 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005672:	2300      	movs	r3, #0
 8005674:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005676:	e02e      	b.n	80056d6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	2200      	movs	r2, #0
 8005680:	2180      	movs	r1, #128	@ 0x80
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 fb26 	bl	8005cd4 <UART_WaitOnFlagUntilTimeout>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d005      	beq.n	800569a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2220      	movs	r2, #32
 8005692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e03a      	b.n	8005710 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10b      	bne.n	80056b8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	881b      	ldrh	r3, [r3, #0]
 80056a4:	461a      	mov	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056ae:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	3302      	adds	r3, #2
 80056b4:	61bb      	str	r3, [r7, #24]
 80056b6:	e007      	b.n	80056c8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	781a      	ldrb	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	3301      	adds	r3, #1
 80056c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	3b01      	subs	r3, #1
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056da:	b29b      	uxth	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1cb      	bne.n	8005678 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	2200      	movs	r2, #0
 80056e8:	2140      	movs	r1, #64	@ 0x40
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 faf2 	bl	8005cd4 <UART_WaitOnFlagUntilTimeout>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d005      	beq.n	8005702 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2220      	movs	r2, #32
 80056fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e006      	b.n	8005710 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2220      	movs	r2, #32
 8005706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	e000      	b.n	8005710 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800570e:	2302      	movs	r3, #2
  }
}
 8005710:	4618      	mov	r0, r3
 8005712:	3720      	adds	r7, #32
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	4613      	mov	r3, r2
 8005724:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b20      	cmp	r3, #32
 8005730:	d112      	bne.n	8005758 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <HAL_UART_Receive_IT+0x26>
 8005738:	88fb      	ldrh	r3, [r7, #6]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e00b      	b.n	800575a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005748:	88fb      	ldrh	r3, [r7, #6]
 800574a:	461a      	mov	r2, r3
 800574c:	68b9      	ldr	r1, [r7, #8]
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 fb19 	bl	8005d86 <UART_Start_Receive_IT>
 8005754:	4603      	mov	r3, r0
 8005756:	e000      	b.n	800575a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005758:	2302      	movs	r3, #2
  }
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b0ba      	sub	sp, #232	@ 0xe8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800578a:	2300      	movs	r3, #0
 800578c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005790:	2300      	movs	r3, #0
 8005792:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800579a:	f003 030f 	and.w	r3, r3, #15
 800579e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80057a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10f      	bne.n	80057ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ae:	f003 0320 	and.w	r3, r3, #32
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d009      	beq.n	80057ca <HAL_UART_IRQHandler+0x66>
 80057b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fbf5 	bl	8005fb2 <UART_Receive_IT>
      return;
 80057c8:	e25b      	b.n	8005c82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80057ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 80de 	beq.w	8005990 <HAL_UART_IRQHandler+0x22c>
 80057d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d106      	bne.n	80057ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 80d1 	beq.w	8005990 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00b      	beq.n	8005812 <HAL_UART_IRQHandler+0xae>
 80057fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005802:	2b00      	cmp	r3, #0
 8005804:	d005      	beq.n	8005812 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800580a:	f043 0201 	orr.w	r2, r3, #1
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005816:	f003 0304 	and.w	r3, r3, #4
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00b      	beq.n	8005836 <HAL_UART_IRQHandler+0xd2>
 800581e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d005      	beq.n	8005836 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800582e:	f043 0202 	orr.w	r2, r3, #2
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00b      	beq.n	800585a <HAL_UART_IRQHandler+0xf6>
 8005842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d005      	beq.n	800585a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005852:	f043 0204 	orr.w	r2, r3, #4
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800585a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	2b00      	cmp	r3, #0
 8005864:	d011      	beq.n	800588a <HAL_UART_IRQHandler+0x126>
 8005866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800586a:	f003 0320 	and.w	r3, r3, #32
 800586e:	2b00      	cmp	r3, #0
 8005870:	d105      	bne.n	800587e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d005      	beq.n	800588a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005882:	f043 0208 	orr.w	r2, r3, #8
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 81f2 	beq.w	8005c78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005898:	f003 0320 	and.w	r3, r3, #32
 800589c:	2b00      	cmp	r3, #0
 800589e:	d008      	beq.n	80058b2 <HAL_UART_IRQHandler+0x14e>
 80058a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058a4:	f003 0320 	and.w	r3, r3, #32
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d002      	beq.n	80058b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fb80 	bl	8005fb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058bc:	2b00      	cmp	r3, #0
 80058be:	bf14      	ite	ne
 80058c0:	2301      	movne	r3, #1
 80058c2:	2300      	moveq	r3, #0
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ce:	f003 0308 	and.w	r3, r3, #8
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d103      	bne.n	80058de <HAL_UART_IRQHandler+0x17a>
 80058d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d04f      	beq.n	800597e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fa8a 	bl	8005df8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d041      	beq.n	8005976 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3314      	adds	r3, #20
 80058f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005900:	e853 3f00 	ldrex	r3, [r3]
 8005904:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005908:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800590c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005910:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	3314      	adds	r3, #20
 800591a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800591e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005922:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005926:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800592a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800592e:	e841 2300 	strex	r3, r2, [r1]
 8005932:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005936:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1d9      	bne.n	80058f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005942:	2b00      	cmp	r3, #0
 8005944:	d013      	beq.n	800596e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800594a:	4a7e      	ldr	r2, [pc, #504]	@ (8005b44 <HAL_UART_IRQHandler+0x3e0>)
 800594c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005952:	4618      	mov	r0, r3
 8005954:	f7fd f9d8 	bl	8002d08 <HAL_DMA_Abort_IT>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d016      	beq.n	800598c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005968:	4610      	mov	r0, r2
 800596a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800596c:	e00e      	b.n	800598c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f99c 	bl	8005cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005974:	e00a      	b.n	800598c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f998 	bl	8005cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800597c:	e006      	b.n	800598c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f994 	bl	8005cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800598a:	e175      	b.n	8005c78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800598c:	bf00      	nop
    return;
 800598e:	e173      	b.n	8005c78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005994:	2b01      	cmp	r3, #1
 8005996:	f040 814f 	bne.w	8005c38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800599a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800599e:	f003 0310 	and.w	r3, r3, #16
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 8148 	beq.w	8005c38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80059a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059ac:	f003 0310 	and.w	r3, r3, #16
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 8141 	beq.w	8005c38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059b6:	2300      	movs	r3, #0
 80059b8:	60bb      	str	r3, [r7, #8]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	60bb      	str	r3, [r7, #8]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	60bb      	str	r3, [r7, #8]
 80059ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 80b6 	beq.w	8005b48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 8145 	beq.w	8005c7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059fa:	429a      	cmp	r2, r3
 80059fc:	f080 813e 	bcs.w	8005c7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a06:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	2b20      	cmp	r3, #32
 8005a10:	f000 8088 	beq.w	8005b24 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	330c      	adds	r3, #12
 8005a1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a22:	e853 3f00 	ldrex	r3, [r3]
 8005a26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	330c      	adds	r3, #12
 8005a3c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005a40:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a48:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a50:	e841 2300 	strex	r3, r2, [r1]
 8005a54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1d9      	bne.n	8005a14 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3314      	adds	r3, #20
 8005a66:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a6a:	e853 3f00 	ldrex	r3, [r3]
 8005a6e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a72:	f023 0301 	bic.w	r3, r3, #1
 8005a76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3314      	adds	r3, #20
 8005a80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a84:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a88:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a90:	e841 2300 	strex	r3, r2, [r1]
 8005a94:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e1      	bne.n	8005a60 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3314      	adds	r3, #20
 8005aa2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005aa6:	e853 3f00 	ldrex	r3, [r3]
 8005aaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005aac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005aae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	3314      	adds	r3, #20
 8005abc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005ac0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ac2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ac6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005ac8:	e841 2300 	strex	r3, r2, [r1]
 8005acc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ace:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1e3      	bne.n	8005a9c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	330c      	adds	r3, #12
 8005ae8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aec:	e853 3f00 	ldrex	r3, [r3]
 8005af0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005af2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005af4:	f023 0310 	bic.w	r3, r3, #16
 8005af8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	330c      	adds	r3, #12
 8005b02:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005b06:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005b08:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b0e:	e841 2300 	strex	r3, r2, [r1]
 8005b12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1e3      	bne.n	8005ae2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fd f8b7 	bl	8002c92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	4619      	mov	r1, r3
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f8bf 	bl	8005cbe <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b40:	e09c      	b.n	8005c7c <HAL_UART_IRQHandler+0x518>
 8005b42:	bf00      	nop
 8005b44:	08005ebd 	.word	0x08005ebd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 808e 	beq.w	8005c80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005b64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 8089 	beq.w	8005c80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	330c      	adds	r3, #12
 8005b74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	330c      	adds	r3, #12
 8005b8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005b92:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b9a:	e841 2300 	strex	r3, r2, [r1]
 8005b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1e3      	bne.n	8005b6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3314      	adds	r3, #20
 8005bac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb0:	e853 3f00 	ldrex	r3, [r3]
 8005bb4:	623b      	str	r3, [r7, #32]
   return(result);
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	f023 0301 	bic.w	r3, r3, #1
 8005bbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3314      	adds	r3, #20
 8005bc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005bca:	633a      	str	r2, [r7, #48]	@ 0x30
 8005bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bd2:	e841 2300 	strex	r3, r2, [r1]
 8005bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1e3      	bne.n	8005ba6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2220      	movs	r2, #32
 8005be2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	330c      	adds	r3, #12
 8005bf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	e853 3f00 	ldrex	r3, [r3]
 8005bfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f023 0310 	bic.w	r3, r3, #16
 8005c02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	330c      	adds	r3, #12
 8005c0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005c10:	61fa      	str	r2, [r7, #28]
 8005c12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c14:	69b9      	ldr	r1, [r7, #24]
 8005c16:	69fa      	ldr	r2, [r7, #28]
 8005c18:	e841 2300 	strex	r3, r2, [r1]
 8005c1c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1e3      	bne.n	8005bec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c2e:	4619      	mov	r1, r3
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f844 	bl	8005cbe <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c36:	e023      	b.n	8005c80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d009      	beq.n	8005c58 <HAL_UART_IRQHandler+0x4f4>
 8005c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 f947 	bl	8005ee4 <UART_Transmit_IT>
    return;
 8005c56:	e014      	b.n	8005c82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00e      	beq.n	8005c82 <HAL_UART_IRQHandler+0x51e>
 8005c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d008      	beq.n	8005c82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f986 	bl	8005f82 <UART_EndTransmit_IT>
    return;
 8005c76:	e004      	b.n	8005c82 <HAL_UART_IRQHandler+0x51e>
    return;
 8005c78:	bf00      	nop
 8005c7a:	e002      	b.n	8005c82 <HAL_UART_IRQHandler+0x51e>
      return;
 8005c7c:	bf00      	nop
 8005c7e:	e000      	b.n	8005c82 <HAL_UART_IRQHandler+0x51e>
      return;
 8005c80:	bf00      	nop
  }
}
 8005c82:	37e8      	adds	r7, #232	@ 0xe8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bc80      	pop	{r7}
 8005c98:	4770      	bx	lr

08005c9a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bc80      	pop	{r7}
 8005caa:	4770      	bx	lr

08005cac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bc80      	pop	{r7}
 8005cbc:	4770      	bx	lr

08005cbe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cca:	bf00      	nop
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bc80      	pop	{r7}
 8005cd2:	4770      	bx	lr

08005cd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	603b      	str	r3, [r7, #0]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ce4:	e03b      	b.n	8005d5e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cec:	d037      	beq.n	8005d5e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cee:	f7fc fe95 	bl	8002a1c <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	6a3a      	ldr	r2, [r7, #32]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d302      	bcc.n	8005d04 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e03a      	b.n	8005d7e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f003 0304 	and.w	r3, r3, #4
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d023      	beq.n	8005d5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	2b80      	cmp	r3, #128	@ 0x80
 8005d1a:	d020      	beq.n	8005d5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b40      	cmp	r3, #64	@ 0x40
 8005d20:	d01d      	beq.n	8005d5e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0308 	and.w	r3, r3, #8
 8005d2c:	2b08      	cmp	r3, #8
 8005d2e:	d116      	bne.n	8005d5e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005d30:	2300      	movs	r3, #0
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	617b      	str	r3, [r7, #20]
 8005d44:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 f856 	bl	8005df8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2208      	movs	r2, #8
 8005d50:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e00f      	b.n	8005d7e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	4013      	ands	r3, r2
 8005d68:	68ba      	ldr	r2, [r7, #8]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	bf0c      	ite	eq
 8005d6e:	2301      	moveq	r3, #1
 8005d70:	2300      	movne	r3, #0
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	461a      	mov	r2, r3
 8005d76:	79fb      	ldrb	r3, [r7, #7]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d0b4      	beq.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3718      	adds	r7, #24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b085      	sub	sp, #20
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	60f8      	str	r0, [r7, #12]
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	4613      	mov	r3, r2
 8005d92:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	88fa      	ldrh	r2, [r7, #6]
 8005d9e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	88fa      	ldrh	r2, [r7, #6]
 8005da4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2222      	movs	r2, #34	@ 0x22
 8005db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d007      	beq.n	8005dcc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005dca:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	695a      	ldr	r2, [r3, #20]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0201 	orr.w	r2, r2, #1
 8005dda:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68da      	ldr	r2, [r3, #12]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f042 0220 	orr.w	r2, r2, #32
 8005dea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bc80      	pop	{r7}
 8005df6:	4770      	bx	lr

08005df8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b095      	sub	sp, #84	@ 0x54
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	330c      	adds	r3, #12
 8005e06:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e0a:	e853 3f00 	ldrex	r3, [r3]
 8005e0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	330c      	adds	r3, #12
 8005e1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e20:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e28:	e841 2300 	strex	r3, r2, [r1]
 8005e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1e5      	bne.n	8005e00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	3314      	adds	r3, #20
 8005e3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	e853 3f00 	ldrex	r3, [r3]
 8005e42:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	f023 0301 	bic.w	r3, r3, #1
 8005e4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3314      	adds	r3, #20
 8005e52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e5c:	e841 2300 	strex	r3, r2, [r1]
 8005e60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1e5      	bne.n	8005e34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d119      	bne.n	8005ea4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	330c      	adds	r3, #12
 8005e76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	e853 3f00 	ldrex	r3, [r3]
 8005e7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f023 0310 	bic.w	r3, r3, #16
 8005e86:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	330c      	adds	r3, #12
 8005e8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e90:	61ba      	str	r2, [r7, #24]
 8005e92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e94:	6979      	ldr	r1, [r7, #20]
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	e841 2300 	strex	r3, r2, [r1]
 8005e9c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1e5      	bne.n	8005e70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005eb2:	bf00      	nop
 8005eb4:	3754      	adds	r7, #84	@ 0x54
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bc80      	pop	{r7}
 8005eba:	4770      	bx	lr

08005ebc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f7ff fee8 	bl	8005cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005edc:	bf00      	nop
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b21      	cmp	r3, #33	@ 0x21
 8005ef6:	d13e      	bne.n	8005f76 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f00:	d114      	bne.n	8005f2c <UART_Transmit_IT+0x48>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d110      	bne.n	8005f2c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	881b      	ldrh	r3, [r3, #0]
 8005f14:	461a      	mov	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f1e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	1c9a      	adds	r2, r3, #2
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	621a      	str	r2, [r3, #32]
 8005f2a:	e008      	b.n	8005f3e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	1c59      	adds	r1, r3, #1
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	6211      	str	r1, [r2, #32]
 8005f36:	781a      	ldrb	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	3b01      	subs	r3, #1
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10f      	bne.n	8005f72 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68da      	ldr	r2, [r3, #12]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f60:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f70:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f72:	2300      	movs	r3, #0
 8005f74:	e000      	b.n	8005f78 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f76:	2302      	movs	r3, #2
  }
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bc80      	pop	{r7}
 8005f80:	4770      	bx	lr

08005f82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b082      	sub	sp, #8
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68da      	ldr	r2, [r3, #12]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7ff fe70 	bl	8005c88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b08c      	sub	sp, #48	@ 0x30
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b22      	cmp	r3, #34	@ 0x22
 8005fc4:	f040 80ae 	bne.w	8006124 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fd0:	d117      	bne.n	8006002 <UART_Receive_IT+0x50>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d113      	bne.n	8006002 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ffa:	1c9a      	adds	r2, r3, #2
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	629a      	str	r2, [r3, #40]	@ 0x28
 8006000:	e026      	b.n	8006050 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006006:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006008:	2300      	movs	r3, #0
 800600a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006014:	d007      	beq.n	8006026 <UART_Receive_IT+0x74>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10a      	bne.n	8006034 <UART_Receive_IT+0x82>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d106      	bne.n	8006034 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	b2da      	uxtb	r2, r3
 800602e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006030:	701a      	strb	r2, [r3, #0]
 8006032:	e008      	b.n	8006046 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	b2db      	uxtb	r3, r3
 800603c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006040:	b2da      	uxtb	r2, r3
 8006042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006044:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006054:	b29b      	uxth	r3, r3
 8006056:	3b01      	subs	r3, #1
 8006058:	b29b      	uxth	r3, r3
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	4619      	mov	r1, r3
 800605e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006060:	2b00      	cmp	r3, #0
 8006062:	d15d      	bne.n	8006120 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0220 	bic.w	r2, r2, #32
 8006072:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006082:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	695a      	ldr	r2, [r3, #20]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f022 0201 	bic.w	r2, r2, #1
 8006092:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2220      	movs	r2, #32
 8006098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d135      	bne.n	8006116 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	330c      	adds	r3, #12
 80060b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	e853 3f00 	ldrex	r3, [r3]
 80060be:	613b      	str	r3, [r7, #16]
   return(result);
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	f023 0310 	bic.w	r3, r3, #16
 80060c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	330c      	adds	r3, #12
 80060ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060d0:	623a      	str	r2, [r7, #32]
 80060d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d4:	69f9      	ldr	r1, [r7, #28]
 80060d6:	6a3a      	ldr	r2, [r7, #32]
 80060d8:	e841 2300 	strex	r3, r2, [r1]
 80060dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1e5      	bne.n	80060b0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0310 	and.w	r3, r3, #16
 80060ee:	2b10      	cmp	r3, #16
 80060f0:	d10a      	bne.n	8006108 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060f2:	2300      	movs	r3, #0
 80060f4:	60fb      	str	r3, [r7, #12]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800610c:	4619      	mov	r1, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7ff fdd5 	bl	8005cbe <HAL_UARTEx_RxEventCallback>
 8006114:	e002      	b.n	800611c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7ff fdbf 	bl	8005c9a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	e002      	b.n	8006126 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006120:	2300      	movs	r3, #0
 8006122:	e000      	b.n	8006126 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006124:	2302      	movs	r3, #2
  }
}
 8006126:	4618      	mov	r0, r3
 8006128:	3730      	adds	r7, #48	@ 0x30
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
	...

08006130 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68da      	ldr	r2, [r3, #12]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	689a      	ldr	r2, [r3, #8]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	431a      	orrs	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	4313      	orrs	r3, r2
 800615e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800616a:	f023 030c 	bic.w	r3, r3, #12
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	6812      	ldr	r2, [r2, #0]
 8006172:	68b9      	ldr	r1, [r7, #8]
 8006174:	430b      	orrs	r3, r1
 8006176:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	699a      	ldr	r2, [r3, #24]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a2c      	ldr	r2, [pc, #176]	@ (8006244 <UART_SetConfig+0x114>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d103      	bne.n	80061a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006198:	f7fe fc0e 	bl	80049b8 <HAL_RCC_GetPCLK2Freq>
 800619c:	60f8      	str	r0, [r7, #12]
 800619e:	e002      	b.n	80061a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80061a0:	f7fe fbf6 	bl	8004990 <HAL_RCC_GetPCLK1Freq>
 80061a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	009a      	lsls	r2, r3, #2
 80061b0:	441a      	add	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061bc:	4a22      	ldr	r2, [pc, #136]	@ (8006248 <UART_SetConfig+0x118>)
 80061be:	fba2 2303 	umull	r2, r3, r2, r3
 80061c2:	095b      	lsrs	r3, r3, #5
 80061c4:	0119      	lsls	r1, r3, #4
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	4613      	mov	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	009a      	lsls	r2, r3, #2
 80061d0:	441a      	add	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80061dc:	4b1a      	ldr	r3, [pc, #104]	@ (8006248 <UART_SetConfig+0x118>)
 80061de:	fba3 0302 	umull	r0, r3, r3, r2
 80061e2:	095b      	lsrs	r3, r3, #5
 80061e4:	2064      	movs	r0, #100	@ 0x64
 80061e6:	fb00 f303 	mul.w	r3, r0, r3
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	011b      	lsls	r3, r3, #4
 80061ee:	3332      	adds	r3, #50	@ 0x32
 80061f0:	4a15      	ldr	r2, [pc, #84]	@ (8006248 <UART_SetConfig+0x118>)
 80061f2:	fba2 2303 	umull	r2, r3, r2, r3
 80061f6:	095b      	lsrs	r3, r3, #5
 80061f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061fc:	4419      	add	r1, r3
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	009a      	lsls	r2, r3, #2
 8006208:	441a      	add	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	fbb2 f2f3 	udiv	r2, r2, r3
 8006214:	4b0c      	ldr	r3, [pc, #48]	@ (8006248 <UART_SetConfig+0x118>)
 8006216:	fba3 0302 	umull	r0, r3, r3, r2
 800621a:	095b      	lsrs	r3, r3, #5
 800621c:	2064      	movs	r0, #100	@ 0x64
 800621e:	fb00 f303 	mul.w	r3, r0, r3
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	011b      	lsls	r3, r3, #4
 8006226:	3332      	adds	r3, #50	@ 0x32
 8006228:	4a07      	ldr	r2, [pc, #28]	@ (8006248 <UART_SetConfig+0x118>)
 800622a:	fba2 2303 	umull	r2, r3, r2, r3
 800622e:	095b      	lsrs	r3, r3, #5
 8006230:	f003 020f 	and.w	r2, r3, #15
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	440a      	add	r2, r1
 800623a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800623c:	bf00      	nop
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	40013800 	.word	0x40013800
 8006248:	51eb851f 	.word	0x51eb851f

0800624c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	4603      	mov	r3, r0
 8006254:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006256:	2300      	movs	r3, #0
 8006258:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800625a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800625e:	2b84      	cmp	r3, #132	@ 0x84
 8006260:	d005      	beq.n	800626e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006262:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	4413      	add	r3, r2
 800626a:	3303      	adds	r3, #3
 800626c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800626e:	68fb      	ldr	r3, [r7, #12]
}
 8006270:	4618      	mov	r0, r3
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	bc80      	pop	{r7}
 8006278:	4770      	bx	lr

0800627a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800627e:	f001 f80f 	bl	80072a0 <vTaskStartScheduler>
  
  return osOK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	bd80      	pop	{r7, pc}

08006288 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800628a:	b089      	sub	sp, #36	@ 0x24
 800628c:	af04      	add	r7, sp, #16
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d020      	beq.n	80062dc <osThreadCreate+0x54>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d01c      	beq.n	80062dc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685c      	ldr	r4, [r3, #4]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	691e      	ldr	r6, [r3, #16]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff ffc9 	bl	800624c <makeFreeRtosPriority>
 80062ba:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062c4:	9202      	str	r2, [sp, #8]
 80062c6:	9301      	str	r3, [sp, #4]
 80062c8:	9100      	str	r1, [sp, #0]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	4632      	mov	r2, r6
 80062ce:	4629      	mov	r1, r5
 80062d0:	4620      	mov	r0, r4
 80062d2:	f000 fe17 	bl	8006f04 <xTaskCreateStatic>
 80062d6:	4603      	mov	r3, r0
 80062d8:	60fb      	str	r3, [r7, #12]
 80062da:	e01c      	b.n	8006316 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685c      	ldr	r4, [r3, #4]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062e8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7ff ffab 	bl	800624c <makeFreeRtosPriority>
 80062f6:	4602      	mov	r2, r0
 80062f8:	f107 030c 	add.w	r3, r7, #12
 80062fc:	9301      	str	r3, [sp, #4]
 80062fe:	9200      	str	r2, [sp, #0]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	4632      	mov	r2, r6
 8006304:	4629      	mov	r1, r5
 8006306:	4620      	mov	r0, r4
 8006308:	f000 fe5c 	bl	8006fc4 <xTaskCreate>
 800630c:	4603      	mov	r3, r0
 800630e:	2b01      	cmp	r3, #1
 8006310:	d001      	beq.n	8006316 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006312:	2300      	movs	r3, #0
 8006314:	e000      	b.n	8006318 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006316:	68fb      	ldr	r3, [r7, #12]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006320 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <osDelay+0x16>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	e000      	b.n	8006338 <osDelay+0x18>
 8006336:	2301      	movs	r3, #1
 8006338:	4618      	mov	r0, r3
 800633a:	f000 ff7b 	bl	8007234 <vTaskDelay>
  
  return osOK;
 800633e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af02      	add	r7, sp, #8
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00f      	beq.n	800637a <osSemaphoreCreate+0x32>
    if (count == 1) {
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d10a      	bne.n	8006376 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	2203      	movs	r2, #3
 8006366:	9200      	str	r2, [sp, #0]
 8006368:	2200      	movs	r2, #0
 800636a:	2100      	movs	r1, #0
 800636c:	2001      	movs	r0, #1
 800636e:	f000 f95f 	bl	8006630 <xQueueGenericCreateStatic>
 8006372:	4603      	mov	r3, r0
 8006374:	e016      	b.n	80063a4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006376:	2300      	movs	r3, #0
 8006378:	e014      	b.n	80063a4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d110      	bne.n	80063a2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006380:	2203      	movs	r2, #3
 8006382:	2100      	movs	r1, #0
 8006384:	2001      	movs	r0, #1
 8006386:	f000 f9d0 	bl	800672a <xQueueGenericCreate>
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d005      	beq.n	800639e <osSemaphoreCreate+0x56>
 8006392:	2300      	movs	r3, #0
 8006394:	2200      	movs	r2, #0
 8006396:	2100      	movs	r1, #0
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 fa21 	bl	80067e0 <xQueueGenericSend>
      return sema;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	e000      	b.n	80063a4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80063a2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80063ac:	b590      	push	{r4, r7, lr}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af02      	add	r7, sp, #8
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d011      	beq.n	80063e2 <osMessageCreate+0x36>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00d      	beq.n	80063e2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6818      	ldr	r0, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6859      	ldr	r1, [r3, #4]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	2400      	movs	r4, #0
 80063d8:	9400      	str	r4, [sp, #0]
 80063da:	f000 f929 	bl	8006630 <xQueueGenericCreateStatic>
 80063de:	4603      	mov	r3, r0
 80063e0:	e008      	b.n	80063f4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6818      	ldr	r0, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	4619      	mov	r1, r3
 80063ee:	f000 f99c 	bl	800672a <xQueueGenericCreate>
 80063f2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd90      	pop	{r4, r7, pc}

080063fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f103 0208 	add.w	r2, r3, #8
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f04f 32ff 	mov.w	r2, #4294967295
 8006414:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f103 0208 	add.w	r2, r3, #8
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f103 0208 	add.w	r2, r3, #8
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	bc80      	pop	{r7}
 8006438:	4770      	bx	lr

0800643a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	bc80      	pop	{r7}
 8006450:	4770      	bx	lr

08006452 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006452:	b480      	push	{r7}
 8006454:	b085      	sub	sp, #20
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	689a      	ldr	r2, [r3, #8]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	1c5a      	adds	r2, r3, #1
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	601a      	str	r2, [r3, #0]
}
 800648e:	bf00      	nop
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	bc80      	pop	{r7}
 8006496:	4770      	bx	lr

08006498 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ae:	d103      	bne.n	80064b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	60fb      	str	r3, [r7, #12]
 80064b6:	e00c      	b.n	80064d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	3308      	adds	r3, #8
 80064bc:	60fb      	str	r3, [r7, #12]
 80064be:	e002      	b.n	80064c6 <vListInsert+0x2e>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	60fb      	str	r3, [r7, #12]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d2f6      	bcs.n	80064c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	683a      	ldr	r2, [r7, #0]
 80064ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	1c5a      	adds	r2, r3, #1
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	601a      	str	r2, [r3, #0]
}
 80064fe:	bf00      	nop
 8006500:	3714      	adds	r7, #20
 8006502:	46bd      	mov	sp, r7
 8006504:	bc80      	pop	{r7}
 8006506:	4770      	bx	lr

08006508 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	6892      	ldr	r2, [r2, #8]
 800651e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	6852      	ldr	r2, [r2, #4]
 8006528:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	429a      	cmp	r2, r3
 8006532:	d103      	bne.n	800653c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	1e5a      	subs	r2, r3, #1
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	bc80      	pop	{r7}
 8006558:	4770      	bx	lr
	...

0800655c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10b      	bne.n	8006588 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006582:	bf00      	nop
 8006584:	bf00      	nop
 8006586:	e7fd      	b.n	8006584 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006588:	f001 fca0 	bl	8007ecc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006594:	68f9      	ldr	r1, [r7, #12]
 8006596:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006598:	fb01 f303 	mul.w	r3, r1, r3
 800659c:	441a      	add	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065b8:	3b01      	subs	r3, #1
 80065ba:	68f9      	ldr	r1, [r7, #12]
 80065bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80065be:	fb01 f303 	mul.w	r3, r1, r3
 80065c2:	441a      	add	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	22ff      	movs	r2, #255	@ 0xff
 80065cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	22ff      	movs	r2, #255	@ 0xff
 80065d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d114      	bne.n	8006608 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d01a      	beq.n	800661c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	3310      	adds	r3, #16
 80065ea:	4618      	mov	r0, r3
 80065ec:	f001 f8b0 	bl	8007750 <xTaskRemoveFromEventList>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d012      	beq.n	800661c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80065f6:	4b0d      	ldr	r3, [pc, #52]	@ (800662c <xQueueGenericReset+0xd0>)
 80065f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	e009      	b.n	800661c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	3310      	adds	r3, #16
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff fef5 	bl	80063fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3324      	adds	r3, #36	@ 0x24
 8006616:	4618      	mov	r0, r3
 8006618:	f7ff fef0 	bl	80063fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800661c:	f001 fc86 	bl	8007f2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006620:	2301      	movs	r3, #1
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	e000ed04 	.word	0xe000ed04

08006630 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006630:	b580      	push	{r7, lr}
 8006632:	b08e      	sub	sp, #56	@ 0x38
 8006634:	af02      	add	r7, sp, #8
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
 800663c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10b      	bne.n	800665c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006656:	bf00      	nop
 8006658:	bf00      	nop
 800665a:	e7fd      	b.n	8006658 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10b      	bne.n	800667a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006674:	bf00      	nop
 8006676:	bf00      	nop
 8006678:	e7fd      	b.n	8006676 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d002      	beq.n	8006686 <xQueueGenericCreateStatic+0x56>
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <xQueueGenericCreateStatic+0x5a>
 8006686:	2301      	movs	r3, #1
 8006688:	e000      	b.n	800668c <xQueueGenericCreateStatic+0x5c>
 800668a:	2300      	movs	r3, #0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10b      	bne.n	80066a8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	623b      	str	r3, [r7, #32]
}
 80066a2:	bf00      	nop
 80066a4:	bf00      	nop
 80066a6:	e7fd      	b.n	80066a4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d102      	bne.n	80066b4 <xQueueGenericCreateStatic+0x84>
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <xQueueGenericCreateStatic+0x88>
 80066b4:	2301      	movs	r3, #1
 80066b6:	e000      	b.n	80066ba <xQueueGenericCreateStatic+0x8a>
 80066b8:	2300      	movs	r3, #0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10b      	bne.n	80066d6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	61fb      	str	r3, [r7, #28]
}
 80066d0:	bf00      	nop
 80066d2:	bf00      	nop
 80066d4:	e7fd      	b.n	80066d2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80066d6:	2348      	movs	r3, #72	@ 0x48
 80066d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	2b48      	cmp	r3, #72	@ 0x48
 80066de:	d00b      	beq.n	80066f8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	61bb      	str	r3, [r7, #24]
}
 80066f2:	bf00      	nop
 80066f4:	bf00      	nop
 80066f6:	e7fd      	b.n	80066f4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80066f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80066fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00d      	beq.n	8006720 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800670c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	4613      	mov	r3, r2
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	68b9      	ldr	r1, [r7, #8]
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f000 f840 	bl	80067a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006722:	4618      	mov	r0, r3
 8006724:	3730      	adds	r7, #48	@ 0x30
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800672a:	b580      	push	{r7, lr}
 800672c:	b08a      	sub	sp, #40	@ 0x28
 800672e:	af02      	add	r7, sp, #8
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	4613      	mov	r3, r2
 8006736:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10b      	bne.n	8006756 <xQueueGenericCreate+0x2c>
	__asm volatile
 800673e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	f3bf 8f6f 	isb	sy
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	613b      	str	r3, [r7, #16]
}
 8006750:	bf00      	nop
 8006752:	bf00      	nop
 8006754:	e7fd      	b.n	8006752 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	fb02 f303 	mul.w	r3, r2, r3
 800675e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	3348      	adds	r3, #72	@ 0x48
 8006764:	4618      	mov	r0, r3
 8006766:	f001 fcb3 	bl	80080d0 <pvPortMalloc>
 800676a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d011      	beq.n	8006796 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	3348      	adds	r3, #72	@ 0x48
 800677a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006784:	79fa      	ldrb	r2, [r7, #7]
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	4613      	mov	r3, r2
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	68b9      	ldr	r1, [r7, #8]
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 f805 	bl	80067a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006796:	69bb      	ldr	r3, [r7, #24]
	}
 8006798:	4618      	mov	r0, r3
 800679a:	3720      	adds	r7, #32
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
 80067ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d103      	bne.n	80067bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	69ba      	ldr	r2, [r7, #24]
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	e002      	b.n	80067c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067ce:	2101      	movs	r1, #1
 80067d0:	69b8      	ldr	r0, [r7, #24]
 80067d2:	f7ff fec3 	bl	800655c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80067d6:	bf00      	nop
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b08e      	sub	sp, #56	@ 0x38
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
 80067ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80067ee:	2300      	movs	r3, #0
 80067f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80067f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10b      	bne.n	8006814 <xQueueGenericSend+0x34>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800680e:	bf00      	nop
 8006810:	bf00      	nop
 8006812:	e7fd      	b.n	8006810 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d103      	bne.n	8006822 <xQueueGenericSend+0x42>
 800681a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <xQueueGenericSend+0x46>
 8006822:	2301      	movs	r3, #1
 8006824:	e000      	b.n	8006828 <xQueueGenericSend+0x48>
 8006826:	2300      	movs	r3, #0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10b      	bne.n	8006844 <xQueueGenericSend+0x64>
	__asm volatile
 800682c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800683e:	bf00      	nop
 8006840:	bf00      	nop
 8006842:	e7fd      	b.n	8006840 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b02      	cmp	r3, #2
 8006848:	d103      	bne.n	8006852 <xQueueGenericSend+0x72>
 800684a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800684e:	2b01      	cmp	r3, #1
 8006850:	d101      	bne.n	8006856 <xQueueGenericSend+0x76>
 8006852:	2301      	movs	r3, #1
 8006854:	e000      	b.n	8006858 <xQueueGenericSend+0x78>
 8006856:	2300      	movs	r3, #0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10b      	bne.n	8006874 <xQueueGenericSend+0x94>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	623b      	str	r3, [r7, #32]
}
 800686e:	bf00      	nop
 8006870:	bf00      	nop
 8006872:	e7fd      	b.n	8006870 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006874:	f001 f92c 	bl	8007ad0 <xTaskGetSchedulerState>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d102      	bne.n	8006884 <xQueueGenericSend+0xa4>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <xQueueGenericSend+0xa8>
 8006884:	2301      	movs	r3, #1
 8006886:	e000      	b.n	800688a <xQueueGenericSend+0xaa>
 8006888:	2300      	movs	r3, #0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10b      	bne.n	80068a6 <xQueueGenericSend+0xc6>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	61fb      	str	r3, [r7, #28]
}
 80068a0:	bf00      	nop
 80068a2:	bf00      	nop
 80068a4:	e7fd      	b.n	80068a2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068a6:	f001 fb11 	bl	8007ecc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d302      	bcc.n	80068bc <xQueueGenericSend+0xdc>
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d129      	bne.n	8006910 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	68b9      	ldr	r1, [r7, #8]
 80068c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068c2:	f000 fa0f 	bl	8006ce4 <prvCopyDataToQueue>
 80068c6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d010      	beq.n	80068f2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d2:	3324      	adds	r3, #36	@ 0x24
 80068d4:	4618      	mov	r0, r3
 80068d6:	f000 ff3b 	bl	8007750 <xTaskRemoveFromEventList>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d013      	beq.n	8006908 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80068e0:	4b3f      	ldr	r3, [pc, #252]	@ (80069e0 <xQueueGenericSend+0x200>)
 80068e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068e6:	601a      	str	r2, [r3, #0]
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	e00a      	b.n	8006908 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80068f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d007      	beq.n	8006908 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80068f8:	4b39      	ldr	r3, [pc, #228]	@ (80069e0 <xQueueGenericSend+0x200>)
 80068fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006908:	f001 fb10 	bl	8007f2c <vPortExitCritical>
				return pdPASS;
 800690c:	2301      	movs	r3, #1
 800690e:	e063      	b.n	80069d8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d103      	bne.n	800691e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006916:	f001 fb09 	bl	8007f2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800691a:	2300      	movs	r3, #0
 800691c:	e05c      	b.n	80069d8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800691e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006920:	2b00      	cmp	r3, #0
 8006922:	d106      	bne.n	8006932 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006924:	f107 0314 	add.w	r3, r7, #20
 8006928:	4618      	mov	r0, r3
 800692a:	f000 ff75 	bl	8007818 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800692e:	2301      	movs	r3, #1
 8006930:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006932:	f001 fafb 	bl	8007f2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006936:	f000 fd15 	bl	8007364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800693a:	f001 fac7 	bl	8007ecc <vPortEnterCritical>
 800693e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006940:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006944:	b25b      	sxtb	r3, r3
 8006946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694a:	d103      	bne.n	8006954 <xQueueGenericSend+0x174>
 800694c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694e:	2200      	movs	r2, #0
 8006950:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006956:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800695a:	b25b      	sxtb	r3, r3
 800695c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006960:	d103      	bne.n	800696a <xQueueGenericSend+0x18a>
 8006962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006964:	2200      	movs	r2, #0
 8006966:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800696a:	f001 fadf 	bl	8007f2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800696e:	1d3a      	adds	r2, r7, #4
 8006970:	f107 0314 	add.w	r3, r7, #20
 8006974:	4611      	mov	r1, r2
 8006976:	4618      	mov	r0, r3
 8006978:	f000 ff64 	bl	8007844 <xTaskCheckForTimeOut>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d124      	bne.n	80069cc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006982:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006984:	f000 faa6 	bl	8006ed4 <prvIsQueueFull>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d018      	beq.n	80069c0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800698e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006990:	3310      	adds	r3, #16
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	4611      	mov	r1, r2
 8006996:	4618      	mov	r0, r3
 8006998:	f000 feb4 	bl	8007704 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800699c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800699e:	f000 fa31 	bl	8006e04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80069a2:	f000 fced 	bl	8007380 <xTaskResumeAll>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f47f af7c 	bne.w	80068a6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80069ae:	4b0c      	ldr	r3, [pc, #48]	@ (80069e0 <xQueueGenericSend+0x200>)
 80069b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069b4:	601a      	str	r2, [r3, #0]
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	e772      	b.n	80068a6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80069c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069c2:	f000 fa1f 	bl	8006e04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069c6:	f000 fcdb 	bl	8007380 <xTaskResumeAll>
 80069ca:	e76c      	b.n	80068a6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80069cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069ce:	f000 fa19 	bl	8006e04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069d2:	f000 fcd5 	bl	8007380 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80069d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3738      	adds	r7, #56	@ 0x38
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	e000ed04 	.word	0xe000ed04

080069e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b090      	sub	sp, #64	@ 0x40
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
 80069f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80069f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10b      	bne.n	8006a14 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80069fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006a0e:	bf00      	nop
 8006a10:	bf00      	nop
 8006a12:	e7fd      	b.n	8006a10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d103      	bne.n	8006a22 <xQueueGenericSendFromISR+0x3e>
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <xQueueGenericSendFromISR+0x42>
 8006a22:	2301      	movs	r3, #1
 8006a24:	e000      	b.n	8006a28 <xQueueGenericSendFromISR+0x44>
 8006a26:	2300      	movs	r3, #0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10b      	bne.n	8006a44 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a3e:	bf00      	nop
 8006a40:	bf00      	nop
 8006a42:	e7fd      	b.n	8006a40 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d103      	bne.n	8006a52 <xQueueGenericSendFromISR+0x6e>
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d101      	bne.n	8006a56 <xQueueGenericSendFromISR+0x72>
 8006a52:	2301      	movs	r3, #1
 8006a54:	e000      	b.n	8006a58 <xQueueGenericSendFromISR+0x74>
 8006a56:	2300      	movs	r3, #0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10b      	bne.n	8006a74 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	623b      	str	r3, [r7, #32]
}
 8006a6e:	bf00      	nop
 8006a70:	bf00      	nop
 8006a72:	e7fd      	b.n	8006a70 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a74:	f001 faec 	bl	8008050 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a78:	f3ef 8211 	mrs	r2, BASEPRI
 8006a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	61fa      	str	r2, [r7, #28]
 8006a8e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006a90:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a92:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d302      	bcc.n	8006aa6 <xQueueGenericSendFromISR+0xc2>
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d12f      	bne.n	8006b06 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006aac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	68b9      	ldr	r1, [r7, #8]
 8006aba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006abc:	f000 f912 	bl	8006ce4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ac0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac8:	d112      	bne.n	8006af0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d016      	beq.n	8006b00 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad4:	3324      	adds	r3, #36	@ 0x24
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 fe3a 	bl	8007750 <xTaskRemoveFromEventList>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00e      	beq.n	8006b00 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00b      	beq.n	8006b00 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	601a      	str	r2, [r3, #0]
 8006aee:	e007      	b.n	8006b00 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006af0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006af4:	3301      	adds	r3, #1
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	b25a      	sxtb	r2, r3
 8006afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006afc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006b00:	2301      	movs	r3, #1
 8006b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006b04:	e001      	b.n	8006b0a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b06:	2300      	movs	r3, #0
 8006b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b0c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006b14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3740      	adds	r7, #64	@ 0x40
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08c      	sub	sp, #48	@ 0x30
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10b      	bne.n	8006b52 <xQueueReceive+0x32>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	623b      	str	r3, [r7, #32]
}
 8006b4c:	bf00      	nop
 8006b4e:	bf00      	nop
 8006b50:	e7fd      	b.n	8006b4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d103      	bne.n	8006b60 <xQueueReceive+0x40>
 8006b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <xQueueReceive+0x44>
 8006b60:	2301      	movs	r3, #1
 8006b62:	e000      	b.n	8006b66 <xQueueReceive+0x46>
 8006b64:	2300      	movs	r3, #0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10b      	bne.n	8006b82 <xQueueReceive+0x62>
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	61fb      	str	r3, [r7, #28]
}
 8006b7c:	bf00      	nop
 8006b7e:	bf00      	nop
 8006b80:	e7fd      	b.n	8006b7e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b82:	f000 ffa5 	bl	8007ad0 <xTaskGetSchedulerState>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d102      	bne.n	8006b92 <xQueueReceive+0x72>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <xQueueReceive+0x76>
 8006b92:	2301      	movs	r3, #1
 8006b94:	e000      	b.n	8006b98 <xQueueReceive+0x78>
 8006b96:	2300      	movs	r3, #0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10b      	bne.n	8006bb4 <xQueueReceive+0x94>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	61bb      	str	r3, [r7, #24]
}
 8006bae:	bf00      	nop
 8006bb0:	bf00      	nop
 8006bb2:	e7fd      	b.n	8006bb0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bb4:	f001 f98a 	bl	8007ecc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bbc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d01f      	beq.n	8006c04 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006bc4:	68b9      	ldr	r1, [r7, #8]
 8006bc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006bc8:	f000 f8f6 	bl	8006db8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bce:	1e5a      	subs	r2, r3, #1
 8006bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00f      	beq.n	8006bfc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bde:	3310      	adds	r3, #16
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 fdb5 	bl	8007750 <xTaskRemoveFromEventList>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d007      	beq.n	8006bfc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006bec:	4b3c      	ldr	r3, [pc, #240]	@ (8006ce0 <xQueueReceive+0x1c0>)
 8006bee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	f3bf 8f4f 	dsb	sy
 8006bf8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006bfc:	f001 f996 	bl	8007f2c <vPortExitCritical>
				return pdPASS;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e069      	b.n	8006cd8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d103      	bne.n	8006c12 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c0a:	f001 f98f 	bl	8007f2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	e062      	b.n	8006cd8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d106      	bne.n	8006c26 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c18:	f107 0310 	add.w	r3, r7, #16
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 fdfb 	bl	8007818 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c22:	2301      	movs	r3, #1
 8006c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c26:	f001 f981 	bl	8007f2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c2a:	f000 fb9b 	bl	8007364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c2e:	f001 f94d 	bl	8007ecc <vPortEnterCritical>
 8006c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c38:	b25b      	sxtb	r3, r3
 8006c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3e:	d103      	bne.n	8006c48 <xQueueReceive+0x128>
 8006c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c4e:	b25b      	sxtb	r3, r3
 8006c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c54:	d103      	bne.n	8006c5e <xQueueReceive+0x13e>
 8006c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c5e:	f001 f965 	bl	8007f2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c62:	1d3a      	adds	r2, r7, #4
 8006c64:	f107 0310 	add.w	r3, r7, #16
 8006c68:	4611      	mov	r1, r2
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 fdea 	bl	8007844 <xTaskCheckForTimeOut>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d123      	bne.n	8006cbe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c78:	f000 f916 	bl	8006ea8 <prvIsQueueEmpty>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d017      	beq.n	8006cb2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c84:	3324      	adds	r3, #36	@ 0x24
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	4611      	mov	r1, r2
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 fd3a 	bl	8007704 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c92:	f000 f8b7 	bl	8006e04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c96:	f000 fb73 	bl	8007380 <xTaskResumeAll>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d189      	bne.n	8006bb4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8006ce0 <xQueueReceive+0x1c0>)
 8006ca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	e780      	b.n	8006bb4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006cb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cb4:	f000 f8a6 	bl	8006e04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cb8:	f000 fb62 	bl	8007380 <xTaskResumeAll>
 8006cbc:	e77a      	b.n	8006bb4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006cbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cc0:	f000 f8a0 	bl	8006e04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cc4:	f000 fb5c 	bl	8007380 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cca:	f000 f8ed 	bl	8006ea8 <prvIsQueueEmpty>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f43f af6f 	beq.w	8006bb4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006cd6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3730      	adds	r7, #48	@ 0x30
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	e000ed04 	.word	0xe000ed04

08006ce4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10d      	bne.n	8006d1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d14d      	bne.n	8006da6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 fefc 	bl	8007b0c <xTaskPriorityDisinherit>
 8006d14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	609a      	str	r2, [r3, #8]
 8006d1c:	e043      	b.n	8006da6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d119      	bne.n	8006d58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6858      	ldr	r0, [r3, #4]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	68b9      	ldr	r1, [r7, #8]
 8006d30:	f001 fe3f 	bl	80089b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d3c:	441a      	add	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d32b      	bcc.n	8006da6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	605a      	str	r2, [r3, #4]
 8006d56:	e026      	b.n	8006da6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	68d8      	ldr	r0, [r3, #12]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d60:	461a      	mov	r2, r3
 8006d62:	68b9      	ldr	r1, [r7, #8]
 8006d64:	f001 fe25 	bl	80089b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	68da      	ldr	r2, [r3, #12]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d70:	425b      	negs	r3, r3
 8006d72:	441a      	add	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	68da      	ldr	r2, [r3, #12]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d207      	bcs.n	8006d94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	689a      	ldr	r2, [r3, #8]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d8c:	425b      	negs	r3, r3
 8006d8e:	441a      	add	r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d105      	bne.n	8006da6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	3b01      	subs	r3, #1
 8006da4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006dae:	697b      	ldr	r3, [r7, #20]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3718      	adds	r7, #24
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d018      	beq.n	8006dfc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd2:	441a      	add	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	68da      	ldr	r2, [r3, #12]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d303      	bcc.n	8006dec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	68d9      	ldr	r1, [r3, #12]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df4:	461a      	mov	r2, r3
 8006df6:	6838      	ldr	r0, [r7, #0]
 8006df8:	f001 fddb 	bl	80089b2 <memcpy>
	}
}
 8006dfc:	bf00      	nop
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e0c:	f001 f85e 	bl	8007ecc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e18:	e011      	b.n	8006e3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d012      	beq.n	8006e48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	3324      	adds	r3, #36	@ 0x24
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 fc92 	bl	8007750 <xTaskRemoveFromEventList>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e32:	f000 fd6b 	bl	800790c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e36:	7bfb      	ldrb	r3, [r7, #15]
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	dce9      	bgt.n	8006e1a <prvUnlockQueue+0x16>
 8006e46:	e000      	b.n	8006e4a <prvUnlockQueue+0x46>
					break;
 8006e48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	22ff      	movs	r2, #255	@ 0xff
 8006e4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006e52:	f001 f86b 	bl	8007f2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e56:	f001 f839 	bl	8007ecc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e62:	e011      	b.n	8006e88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d012      	beq.n	8006e92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	3310      	adds	r3, #16
 8006e70:	4618      	mov	r0, r3
 8006e72:	f000 fc6d 	bl	8007750 <xTaskRemoveFromEventList>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e7c:	f000 fd46 	bl	800790c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e80:	7bbb      	ldrb	r3, [r7, #14]
 8006e82:	3b01      	subs	r3, #1
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	dce9      	bgt.n	8006e64 <prvUnlockQueue+0x60>
 8006e90:	e000      	b.n	8006e94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	22ff      	movs	r2, #255	@ 0xff
 8006e98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006e9c:	f001 f846 	bl	8007f2c <vPortExitCritical>
}
 8006ea0:	bf00      	nop
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006eb0:	f001 f80c 	bl	8007ecc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d102      	bne.n	8006ec2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	60fb      	str	r3, [r7, #12]
 8006ec0:	e001      	b.n	8006ec6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ec6:	f001 f831 	bl	8007f2c <vPortExitCritical>

	return xReturn;
 8006eca:	68fb      	ldr	r3, [r7, #12]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006edc:	f000 fff6 	bl	8007ecc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d102      	bne.n	8006ef2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006eec:	2301      	movs	r3, #1
 8006eee:	60fb      	str	r3, [r7, #12]
 8006ef0:	e001      	b.n	8006ef6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ef6:	f001 f819 	bl	8007f2c <vPortExitCritical>

	return xReturn;
 8006efa:	68fb      	ldr	r3, [r7, #12]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b08e      	sub	sp, #56	@ 0x38
 8006f08:	af04      	add	r7, sp, #16
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
 8006f10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10b      	bne.n	8006f30 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f1c:	f383 8811 	msr	BASEPRI, r3
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	623b      	str	r3, [r7, #32]
}
 8006f2a:	bf00      	nop
 8006f2c:	bf00      	nop
 8006f2e:	e7fd      	b.n	8006f2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10b      	bne.n	8006f4e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f3a:	f383 8811 	msr	BASEPRI, r3
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	61fb      	str	r3, [r7, #28]
}
 8006f48:	bf00      	nop
 8006f4a:	bf00      	nop
 8006f4c:	e7fd      	b.n	8006f4a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f4e:	2354      	movs	r3, #84	@ 0x54
 8006f50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	2b54      	cmp	r3, #84	@ 0x54
 8006f56:	d00b      	beq.n	8006f70 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	61bb      	str	r3, [r7, #24]
}
 8006f6a:	bf00      	nop
 8006f6c:	bf00      	nop
 8006f6e:	e7fd      	b.n	8006f6c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d01e      	beq.n	8006fb6 <xTaskCreateStatic+0xb2>
 8006f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d01b      	beq.n	8006fb6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f80:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f86:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f90:	2300      	movs	r3, #0
 8006f92:	9303      	str	r3, [sp, #12]
 8006f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f96:	9302      	str	r3, [sp, #8]
 8006f98:	f107 0314 	add.w	r3, r7, #20
 8006f9c:	9301      	str	r3, [sp, #4]
 8006f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	68b9      	ldr	r1, [r7, #8]
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f000 f850 	bl	800704e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006fb0:	f000 f8d6 	bl	8007160 <prvAddNewTaskToReadyList>
 8006fb4:	e001      	b.n	8006fba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006fba:	697b      	ldr	r3, [r7, #20]
	}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3728      	adds	r7, #40	@ 0x28
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b08c      	sub	sp, #48	@ 0x30
 8006fc8:	af04      	add	r7, sp, #16
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	603b      	str	r3, [r7, #0]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006fd4:	88fb      	ldrh	r3, [r7, #6]
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f001 f879 	bl	80080d0 <pvPortMalloc>
 8006fde:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00e      	beq.n	8007004 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006fe6:	2054      	movs	r0, #84	@ 0x54
 8006fe8:	f001 f872 	bl	80080d0 <pvPortMalloc>
 8006fec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ffa:	e005      	b.n	8007008 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ffc:	6978      	ldr	r0, [r7, #20]
 8006ffe:	f001 f935 	bl	800826c <vPortFree>
 8007002:	e001      	b.n	8007008 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007004:	2300      	movs	r3, #0
 8007006:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d017      	beq.n	800703e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007016:	88fa      	ldrh	r2, [r7, #6]
 8007018:	2300      	movs	r3, #0
 800701a:	9303      	str	r3, [sp, #12]
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	9302      	str	r3, [sp, #8]
 8007020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007022:	9301      	str	r3, [sp, #4]
 8007024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	68b9      	ldr	r1, [r7, #8]
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 f80e 	bl	800704e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007032:	69f8      	ldr	r0, [r7, #28]
 8007034:	f000 f894 	bl	8007160 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007038:	2301      	movs	r3, #1
 800703a:	61bb      	str	r3, [r7, #24]
 800703c:	e002      	b.n	8007044 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800703e:	f04f 33ff 	mov.w	r3, #4294967295
 8007042:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007044:	69bb      	ldr	r3, [r7, #24]
	}
 8007046:	4618      	mov	r0, r3
 8007048:	3720      	adds	r7, #32
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b088      	sub	sp, #32
 8007052:	af00      	add	r7, sp, #0
 8007054:	60f8      	str	r0, [r7, #12]
 8007056:	60b9      	str	r1, [r7, #8]
 8007058:	607a      	str	r2, [r7, #4]
 800705a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800705c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007066:	3b01      	subs	r3, #1
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	f023 0307 	bic.w	r3, r3, #7
 8007074:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	f003 0307 	and.w	r3, r3, #7
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00b      	beq.n	8007098 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	617b      	str	r3, [r7, #20]
}
 8007092:	bf00      	nop
 8007094:	bf00      	nop
 8007096:	e7fd      	b.n	8007094 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d01f      	beq.n	80070de <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800709e:	2300      	movs	r3, #0
 80070a0:	61fb      	str	r3, [r7, #28]
 80070a2:	e012      	b.n	80070ca <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	4413      	add	r3, r2
 80070aa:	7819      	ldrb	r1, [r3, #0]
 80070ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	4413      	add	r3, r2
 80070b2:	3334      	adds	r3, #52	@ 0x34
 80070b4:	460a      	mov	r2, r1
 80070b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	4413      	add	r3, r2
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d006      	beq.n	80070d2 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	3301      	adds	r3, #1
 80070c8:	61fb      	str	r3, [r7, #28]
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	2b0f      	cmp	r3, #15
 80070ce:	d9e9      	bls.n	80070a4 <prvInitialiseNewTask+0x56>
 80070d0:	e000      	b.n	80070d4 <prvInitialiseNewTask+0x86>
			{
				break;
 80070d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80070d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80070dc:	e003      	b.n	80070e6 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80070de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80070e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e8:	2b06      	cmp	r3, #6
 80070ea:	d901      	bls.n	80070f0 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80070ec:	2306      	movs	r3, #6
 80070ee:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80070f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070f4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80070f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070fa:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80070fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fe:	2200      	movs	r2, #0
 8007100:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007104:	3304      	adds	r3, #4
 8007106:	4618      	mov	r0, r3
 8007108:	f7ff f997 	bl	800643a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800710c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710e:	3318      	adds	r3, #24
 8007110:	4618      	mov	r0, r3
 8007112:	f7ff f992 	bl	800643a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800711a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800711c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711e:	f1c3 0207 	rsb	r2, r3, #7
 8007122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007124:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007128:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800712a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800712c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712e:	2200      	movs	r2, #0
 8007130:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800713a:	683a      	ldr	r2, [r7, #0]
 800713c:	68f9      	ldr	r1, [r7, #12]
 800713e:	69b8      	ldr	r0, [r7, #24]
 8007140:	f000 fdd2 	bl	8007ce8 <pxPortInitialiseStack>
 8007144:	4602      	mov	r2, r0
 8007146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007148:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800714a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800714c:	2b00      	cmp	r3, #0
 800714e:	d002      	beq.n	8007156 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007156:	bf00      	nop
 8007158:	3720      	adds	r7, #32
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
	...

08007160 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007168:	f000 feb0 	bl	8007ecc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800716c:	4b2a      	ldr	r3, [pc, #168]	@ (8007218 <prvAddNewTaskToReadyList+0xb8>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3301      	adds	r3, #1
 8007172:	4a29      	ldr	r2, [pc, #164]	@ (8007218 <prvAddNewTaskToReadyList+0xb8>)
 8007174:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007176:	4b29      	ldr	r3, [pc, #164]	@ (800721c <prvAddNewTaskToReadyList+0xbc>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d109      	bne.n	8007192 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800717e:	4a27      	ldr	r2, [pc, #156]	@ (800721c <prvAddNewTaskToReadyList+0xbc>)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007184:	4b24      	ldr	r3, [pc, #144]	@ (8007218 <prvAddNewTaskToReadyList+0xb8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d110      	bne.n	80071ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800718c:	f000 fbe2 	bl	8007954 <prvInitialiseTaskLists>
 8007190:	e00d      	b.n	80071ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007192:	4b23      	ldr	r3, [pc, #140]	@ (8007220 <prvAddNewTaskToReadyList+0xc0>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d109      	bne.n	80071ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800719a:	4b20      	ldr	r3, [pc, #128]	@ (800721c <prvAddNewTaskToReadyList+0xbc>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d802      	bhi.n	80071ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80071a8:	4a1c      	ldr	r2, [pc, #112]	@ (800721c <prvAddNewTaskToReadyList+0xbc>)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80071ae:	4b1d      	ldr	r3, [pc, #116]	@ (8007224 <prvAddNewTaskToReadyList+0xc4>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3301      	adds	r3, #1
 80071b4:	4a1b      	ldr	r2, [pc, #108]	@ (8007224 <prvAddNewTaskToReadyList+0xc4>)
 80071b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071bc:	2201      	movs	r2, #1
 80071be:	409a      	lsls	r2, r3
 80071c0:	4b19      	ldr	r3, [pc, #100]	@ (8007228 <prvAddNewTaskToReadyList+0xc8>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	4a18      	ldr	r2, [pc, #96]	@ (8007228 <prvAddNewTaskToReadyList+0xc8>)
 80071c8:	6013      	str	r3, [r2, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ce:	4613      	mov	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4a15      	ldr	r2, [pc, #84]	@ (800722c <prvAddNewTaskToReadyList+0xcc>)
 80071d8:	441a      	add	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	3304      	adds	r3, #4
 80071de:	4619      	mov	r1, r3
 80071e0:	4610      	mov	r0, r2
 80071e2:	f7ff f936 	bl	8006452 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80071e6:	f000 fea1 	bl	8007f2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80071ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007220 <prvAddNewTaskToReadyList+0xc0>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00e      	beq.n	8007210 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80071f2:	4b0a      	ldr	r3, [pc, #40]	@ (800721c <prvAddNewTaskToReadyList+0xbc>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d207      	bcs.n	8007210 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007200:	4b0b      	ldr	r3, [pc, #44]	@ (8007230 <prvAddNewTaskToReadyList+0xd0>)
 8007202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007206:	601a      	str	r2, [r3, #0]
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007210:	bf00      	nop
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	200005cc 	.word	0x200005cc
 800721c:	200004cc 	.word	0x200004cc
 8007220:	200005d8 	.word	0x200005d8
 8007224:	200005e8 	.word	0x200005e8
 8007228:	200005d4 	.word	0x200005d4
 800722c:	200004d0 	.word	0x200004d0
 8007230:	e000ed04 	.word	0xe000ed04

08007234 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800723c:	2300      	movs	r3, #0
 800723e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d018      	beq.n	8007278 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007246:	4b14      	ldr	r3, [pc, #80]	@ (8007298 <vTaskDelay+0x64>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00b      	beq.n	8007266 <vTaskDelay+0x32>
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	60bb      	str	r3, [r7, #8]
}
 8007260:	bf00      	nop
 8007262:	bf00      	nop
 8007264:	e7fd      	b.n	8007262 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007266:	f000 f87d 	bl	8007364 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800726a:	2100      	movs	r1, #0
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fcd5 	bl	8007c1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007272:	f000 f885 	bl	8007380 <xTaskResumeAll>
 8007276:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d107      	bne.n	800728e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800727e:	4b07      	ldr	r3, [pc, #28]	@ (800729c <vTaskDelay+0x68>)
 8007280:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007284:	601a      	str	r2, [r3, #0]
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800728e:	bf00      	nop
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	200005f4 	.word	0x200005f4
 800729c:	e000ed04 	.word	0xe000ed04

080072a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b08a      	sub	sp, #40	@ 0x28
 80072a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80072a6:	2300      	movs	r3, #0
 80072a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80072aa:	2300      	movs	r3, #0
 80072ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80072ae:	463a      	mov	r2, r7
 80072b0:	1d39      	adds	r1, r7, #4
 80072b2:	f107 0308 	add.w	r3, r7, #8
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fa fa8a 	bl	80017d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	9202      	str	r2, [sp, #8]
 80072c4:	9301      	str	r3, [sp, #4]
 80072c6:	2300      	movs	r3, #0
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	2300      	movs	r3, #0
 80072cc:	460a      	mov	r2, r1
 80072ce:	491f      	ldr	r1, [pc, #124]	@ (800734c <vTaskStartScheduler+0xac>)
 80072d0:	481f      	ldr	r0, [pc, #124]	@ (8007350 <vTaskStartScheduler+0xb0>)
 80072d2:	f7ff fe17 	bl	8006f04 <xTaskCreateStatic>
 80072d6:	4603      	mov	r3, r0
 80072d8:	4a1e      	ldr	r2, [pc, #120]	@ (8007354 <vTaskStartScheduler+0xb4>)
 80072da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80072dc:	4b1d      	ldr	r3, [pc, #116]	@ (8007354 <vTaskStartScheduler+0xb4>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d002      	beq.n	80072ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80072e4:	2301      	movs	r3, #1
 80072e6:	617b      	str	r3, [r7, #20]
 80072e8:	e001      	b.n	80072ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80072ea:	2300      	movs	r3, #0
 80072ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d116      	bne.n	8007322 <vTaskStartScheduler+0x82>
	__asm volatile
 80072f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f8:	f383 8811 	msr	BASEPRI, r3
 80072fc:	f3bf 8f6f 	isb	sy
 8007300:	f3bf 8f4f 	dsb	sy
 8007304:	613b      	str	r3, [r7, #16]
}
 8007306:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007308:	4b13      	ldr	r3, [pc, #76]	@ (8007358 <vTaskStartScheduler+0xb8>)
 800730a:	f04f 32ff 	mov.w	r2, #4294967295
 800730e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007310:	4b12      	ldr	r3, [pc, #72]	@ (800735c <vTaskStartScheduler+0xbc>)
 8007312:	2201      	movs	r2, #1
 8007314:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007316:	4b12      	ldr	r3, [pc, #72]	@ (8007360 <vTaskStartScheduler+0xc0>)
 8007318:	2200      	movs	r2, #0
 800731a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800731c:	f000 fd64 	bl	8007de8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007320:	e00f      	b.n	8007342 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007328:	d10b      	bne.n	8007342 <vTaskStartScheduler+0xa2>
	__asm volatile
 800732a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	60fb      	str	r3, [r7, #12]
}
 800733c:	bf00      	nop
 800733e:	bf00      	nop
 8007340:	e7fd      	b.n	800733e <vTaskStartScheduler+0x9e>
}
 8007342:	bf00      	nop
 8007344:	3718      	adds	r7, #24
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	0800978c 	.word	0x0800978c
 8007350:	08007925 	.word	0x08007925
 8007354:	200005f0 	.word	0x200005f0
 8007358:	200005ec 	.word	0x200005ec
 800735c:	200005d8 	.word	0x200005d8
 8007360:	200005d0 	.word	0x200005d0

08007364 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007364:	b480      	push	{r7}
 8007366:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007368:	4b04      	ldr	r3, [pc, #16]	@ (800737c <vTaskSuspendAll+0x18>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3301      	adds	r3, #1
 800736e:	4a03      	ldr	r2, [pc, #12]	@ (800737c <vTaskSuspendAll+0x18>)
 8007370:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007372:	bf00      	nop
 8007374:	46bd      	mov	sp, r7
 8007376:	bc80      	pop	{r7}
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	200005f4 	.word	0x200005f4

08007380 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007386:	2300      	movs	r3, #0
 8007388:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800738a:	2300      	movs	r3, #0
 800738c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800738e:	4b42      	ldr	r3, [pc, #264]	@ (8007498 <xTaskResumeAll+0x118>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10b      	bne.n	80073ae <xTaskResumeAll+0x2e>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	603b      	str	r3, [r7, #0]
}
 80073a8:	bf00      	nop
 80073aa:	bf00      	nop
 80073ac:	e7fd      	b.n	80073aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80073ae:	f000 fd8d 	bl	8007ecc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80073b2:	4b39      	ldr	r3, [pc, #228]	@ (8007498 <xTaskResumeAll+0x118>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	3b01      	subs	r3, #1
 80073b8:	4a37      	ldr	r2, [pc, #220]	@ (8007498 <xTaskResumeAll+0x118>)
 80073ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073bc:	4b36      	ldr	r3, [pc, #216]	@ (8007498 <xTaskResumeAll+0x118>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d161      	bne.n	8007488 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80073c4:	4b35      	ldr	r3, [pc, #212]	@ (800749c <xTaskResumeAll+0x11c>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d05d      	beq.n	8007488 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073cc:	e02e      	b.n	800742c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073ce:	4b34      	ldr	r3, [pc, #208]	@ (80074a0 <xTaskResumeAll+0x120>)
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	3318      	adds	r3, #24
 80073da:	4618      	mov	r0, r3
 80073dc:	f7ff f894 	bl	8006508 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	3304      	adds	r3, #4
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7ff f88f 	bl	8006508 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ee:	2201      	movs	r2, #1
 80073f0:	409a      	lsls	r2, r3
 80073f2:	4b2c      	ldr	r3, [pc, #176]	@ (80074a4 <xTaskResumeAll+0x124>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	4a2a      	ldr	r2, [pc, #168]	@ (80074a4 <xTaskResumeAll+0x124>)
 80073fa:	6013      	str	r3, [r2, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007400:	4613      	mov	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	4a27      	ldr	r2, [pc, #156]	@ (80074a8 <xTaskResumeAll+0x128>)
 800740a:	441a      	add	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	3304      	adds	r3, #4
 8007410:	4619      	mov	r1, r3
 8007412:	4610      	mov	r0, r2
 8007414:	f7ff f81d 	bl	8006452 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800741c:	4b23      	ldr	r3, [pc, #140]	@ (80074ac <xTaskResumeAll+0x12c>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007422:	429a      	cmp	r2, r3
 8007424:	d302      	bcc.n	800742c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007426:	4b22      	ldr	r3, [pc, #136]	@ (80074b0 <xTaskResumeAll+0x130>)
 8007428:	2201      	movs	r2, #1
 800742a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800742c:	4b1c      	ldr	r3, [pc, #112]	@ (80074a0 <xTaskResumeAll+0x120>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1cc      	bne.n	80073ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800743a:	f000 fb29 	bl	8007a90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800743e:	4b1d      	ldr	r3, [pc, #116]	@ (80074b4 <xTaskResumeAll+0x134>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d010      	beq.n	800746c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800744a:	f000 f845 	bl	80074d8 <xTaskIncrementTick>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d002      	beq.n	800745a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007454:	4b16      	ldr	r3, [pc, #88]	@ (80074b0 <xTaskResumeAll+0x130>)
 8007456:	2201      	movs	r2, #1
 8007458:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	3b01      	subs	r3, #1
 800745e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1f1      	bne.n	800744a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007466:	4b13      	ldr	r3, [pc, #76]	@ (80074b4 <xTaskResumeAll+0x134>)
 8007468:	2200      	movs	r2, #0
 800746a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800746c:	4b10      	ldr	r3, [pc, #64]	@ (80074b0 <xTaskResumeAll+0x130>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d009      	beq.n	8007488 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007474:	2301      	movs	r3, #1
 8007476:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007478:	4b0f      	ldr	r3, [pc, #60]	@ (80074b8 <xTaskResumeAll+0x138>)
 800747a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800747e:	601a      	str	r2, [r3, #0]
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007488:	f000 fd50 	bl	8007f2c <vPortExitCritical>

	return xAlreadyYielded;
 800748c:	68bb      	ldr	r3, [r7, #8]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	200005f4 	.word	0x200005f4
 800749c:	200005cc 	.word	0x200005cc
 80074a0:	2000058c 	.word	0x2000058c
 80074a4:	200005d4 	.word	0x200005d4
 80074a8:	200004d0 	.word	0x200004d0
 80074ac:	200004cc 	.word	0x200004cc
 80074b0:	200005e0 	.word	0x200005e0
 80074b4:	200005dc 	.word	0x200005dc
 80074b8:	e000ed04 	.word	0xe000ed04

080074bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80074c2:	4b04      	ldr	r3, [pc, #16]	@ (80074d4 <xTaskGetTickCount+0x18>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80074c8:	687b      	ldr	r3, [r7, #4]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bc80      	pop	{r7}
 80074d2:	4770      	bx	lr
 80074d4:	200005d0 	.word	0x200005d0

080074d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80074de:	2300      	movs	r3, #0
 80074e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074e2:	4b4f      	ldr	r3, [pc, #316]	@ (8007620 <xTaskIncrementTick+0x148>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f040 808f 	bne.w	800760a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80074ec:	4b4d      	ldr	r3, [pc, #308]	@ (8007624 <xTaskIncrementTick+0x14c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	3301      	adds	r3, #1
 80074f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80074f4:	4a4b      	ldr	r2, [pc, #300]	@ (8007624 <xTaskIncrementTick+0x14c>)
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d121      	bne.n	8007544 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007500:	4b49      	ldr	r3, [pc, #292]	@ (8007628 <xTaskIncrementTick+0x150>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00b      	beq.n	8007522 <xTaskIncrementTick+0x4a>
	__asm volatile
 800750a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	603b      	str	r3, [r7, #0]
}
 800751c:	bf00      	nop
 800751e:	bf00      	nop
 8007520:	e7fd      	b.n	800751e <xTaskIncrementTick+0x46>
 8007522:	4b41      	ldr	r3, [pc, #260]	@ (8007628 <xTaskIncrementTick+0x150>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	60fb      	str	r3, [r7, #12]
 8007528:	4b40      	ldr	r3, [pc, #256]	@ (800762c <xTaskIncrementTick+0x154>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a3e      	ldr	r2, [pc, #248]	@ (8007628 <xTaskIncrementTick+0x150>)
 800752e:	6013      	str	r3, [r2, #0]
 8007530:	4a3e      	ldr	r2, [pc, #248]	@ (800762c <xTaskIncrementTick+0x154>)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6013      	str	r3, [r2, #0]
 8007536:	4b3e      	ldr	r3, [pc, #248]	@ (8007630 <xTaskIncrementTick+0x158>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	3301      	adds	r3, #1
 800753c:	4a3c      	ldr	r2, [pc, #240]	@ (8007630 <xTaskIncrementTick+0x158>)
 800753e:	6013      	str	r3, [r2, #0]
 8007540:	f000 faa6 	bl	8007a90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007544:	4b3b      	ldr	r3, [pc, #236]	@ (8007634 <xTaskIncrementTick+0x15c>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	429a      	cmp	r2, r3
 800754c:	d348      	bcc.n	80075e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800754e:	4b36      	ldr	r3, [pc, #216]	@ (8007628 <xTaskIncrementTick+0x150>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d104      	bne.n	8007562 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007558:	4b36      	ldr	r3, [pc, #216]	@ (8007634 <xTaskIncrementTick+0x15c>)
 800755a:	f04f 32ff 	mov.w	r2, #4294967295
 800755e:	601a      	str	r2, [r3, #0]
					break;
 8007560:	e03e      	b.n	80075e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007562:	4b31      	ldr	r3, [pc, #196]	@ (8007628 <xTaskIncrementTick+0x150>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	429a      	cmp	r2, r3
 8007578:	d203      	bcs.n	8007582 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800757a:	4a2e      	ldr	r2, [pc, #184]	@ (8007634 <xTaskIncrementTick+0x15c>)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007580:	e02e      	b.n	80075e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	3304      	adds	r3, #4
 8007586:	4618      	mov	r0, r3
 8007588:	f7fe ffbe 	bl	8006508 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007590:	2b00      	cmp	r3, #0
 8007592:	d004      	beq.n	800759e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	3318      	adds	r3, #24
 8007598:	4618      	mov	r0, r3
 800759a:	f7fe ffb5 	bl	8006508 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a2:	2201      	movs	r2, #1
 80075a4:	409a      	lsls	r2, r3
 80075a6:	4b24      	ldr	r3, [pc, #144]	@ (8007638 <xTaskIncrementTick+0x160>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	4a22      	ldr	r2, [pc, #136]	@ (8007638 <xTaskIncrementTick+0x160>)
 80075ae:	6013      	str	r3, [r2, #0]
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075b4:	4613      	mov	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4a1f      	ldr	r2, [pc, #124]	@ (800763c <xTaskIncrementTick+0x164>)
 80075be:	441a      	add	r2, r3
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	3304      	adds	r3, #4
 80075c4:	4619      	mov	r1, r3
 80075c6:	4610      	mov	r0, r2
 80075c8:	f7fe ff43 	bl	8006452 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075d0:	4b1b      	ldr	r3, [pc, #108]	@ (8007640 <xTaskIncrementTick+0x168>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d3b9      	bcc.n	800754e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80075da:	2301      	movs	r3, #1
 80075dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075de:	e7b6      	b.n	800754e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80075e0:	4b17      	ldr	r3, [pc, #92]	@ (8007640 <xTaskIncrementTick+0x168>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075e6:	4915      	ldr	r1, [pc, #84]	@ (800763c <xTaskIncrementTick+0x164>)
 80075e8:	4613      	mov	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	440b      	add	r3, r1
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d901      	bls.n	80075fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80075f8:	2301      	movs	r3, #1
 80075fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80075fc:	4b11      	ldr	r3, [pc, #68]	@ (8007644 <xTaskIncrementTick+0x16c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d007      	beq.n	8007614 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007604:	2301      	movs	r3, #1
 8007606:	617b      	str	r3, [r7, #20]
 8007608:	e004      	b.n	8007614 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800760a:	4b0f      	ldr	r3, [pc, #60]	@ (8007648 <xTaskIncrementTick+0x170>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3301      	adds	r3, #1
 8007610:	4a0d      	ldr	r2, [pc, #52]	@ (8007648 <xTaskIncrementTick+0x170>)
 8007612:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007614:	697b      	ldr	r3, [r7, #20]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	200005f4 	.word	0x200005f4
 8007624:	200005d0 	.word	0x200005d0
 8007628:	20000584 	.word	0x20000584
 800762c:	20000588 	.word	0x20000588
 8007630:	200005e4 	.word	0x200005e4
 8007634:	200005ec 	.word	0x200005ec
 8007638:	200005d4 	.word	0x200005d4
 800763c:	200004d0 	.word	0x200004d0
 8007640:	200004cc 	.word	0x200004cc
 8007644:	200005e0 	.word	0x200005e0
 8007648:	200005dc 	.word	0x200005dc

0800764c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800764c:	b480      	push	{r7}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007652:	4b27      	ldr	r3, [pc, #156]	@ (80076f0 <vTaskSwitchContext+0xa4>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800765a:	4b26      	ldr	r3, [pc, #152]	@ (80076f4 <vTaskSwitchContext+0xa8>)
 800765c:	2201      	movs	r2, #1
 800765e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007660:	e040      	b.n	80076e4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007662:	4b24      	ldr	r3, [pc, #144]	@ (80076f4 <vTaskSwitchContext+0xa8>)
 8007664:	2200      	movs	r2, #0
 8007666:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007668:	4b23      	ldr	r3, [pc, #140]	@ (80076f8 <vTaskSwitchContext+0xac>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	fab3 f383 	clz	r3, r3
 8007674:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007676:	7afb      	ldrb	r3, [r7, #11]
 8007678:	f1c3 031f 	rsb	r3, r3, #31
 800767c:	617b      	str	r3, [r7, #20]
 800767e:	491f      	ldr	r1, [pc, #124]	@ (80076fc <vTaskSwitchContext+0xb0>)
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	4613      	mov	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	440b      	add	r3, r1
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10b      	bne.n	80076aa <vTaskSwitchContext+0x5e>
	__asm volatile
 8007692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	607b      	str	r3, [r7, #4]
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop
 80076a8:	e7fd      	b.n	80076a6 <vTaskSwitchContext+0x5a>
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	4613      	mov	r3, r2
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4413      	add	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4a11      	ldr	r2, [pc, #68]	@ (80076fc <vTaskSwitchContext+0xb0>)
 80076b6:	4413      	add	r3, r2
 80076b8:	613b      	str	r3, [r7, #16]
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	605a      	str	r2, [r3, #4]
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	3308      	adds	r3, #8
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d104      	bne.n	80076da <vTaskSwitchContext+0x8e>
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	605a      	str	r2, [r3, #4]
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	4a07      	ldr	r2, [pc, #28]	@ (8007700 <vTaskSwitchContext+0xb4>)
 80076e2:	6013      	str	r3, [r2, #0]
}
 80076e4:	bf00      	nop
 80076e6:	371c      	adds	r7, #28
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bc80      	pop	{r7}
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	200005f4 	.word	0x200005f4
 80076f4:	200005e0 	.word	0x200005e0
 80076f8:	200005d4 	.word	0x200005d4
 80076fc:	200004d0 	.word	0x200004d0
 8007700:	200004cc 	.word	0x200004cc

08007704 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10b      	bne.n	800772c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	60fb      	str	r3, [r7, #12]
}
 8007726:	bf00      	nop
 8007728:	bf00      	nop
 800772a:	e7fd      	b.n	8007728 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800772c:	4b07      	ldr	r3, [pc, #28]	@ (800774c <vTaskPlaceOnEventList+0x48>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	3318      	adds	r3, #24
 8007732:	4619      	mov	r1, r3
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f7fe feaf 	bl	8006498 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800773a:	2101      	movs	r1, #1
 800773c:	6838      	ldr	r0, [r7, #0]
 800773e:	f000 fa6d 	bl	8007c1c <prvAddCurrentTaskToDelayedList>
}
 8007742:	bf00      	nop
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	200004cc 	.word	0x200004cc

08007750 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10b      	bne.n	800777e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	60fb      	str	r3, [r7, #12]
}
 8007778:	bf00      	nop
 800777a:	bf00      	nop
 800777c:	e7fd      	b.n	800777a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	3318      	adds	r3, #24
 8007782:	4618      	mov	r0, r3
 8007784:	f7fe fec0 	bl	8006508 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007788:	4b1d      	ldr	r3, [pc, #116]	@ (8007800 <xTaskRemoveFromEventList+0xb0>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d11c      	bne.n	80077ca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	3304      	adds	r3, #4
 8007794:	4618      	mov	r0, r3
 8007796:	f7fe feb7 	bl	8006508 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779e:	2201      	movs	r2, #1
 80077a0:	409a      	lsls	r2, r3
 80077a2:	4b18      	ldr	r3, [pc, #96]	@ (8007804 <xTaskRemoveFromEventList+0xb4>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	4a16      	ldr	r2, [pc, #88]	@ (8007804 <xTaskRemoveFromEventList+0xb4>)
 80077aa:	6013      	str	r3, [r2, #0]
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077b0:	4613      	mov	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4a13      	ldr	r2, [pc, #76]	@ (8007808 <xTaskRemoveFromEventList+0xb8>)
 80077ba:	441a      	add	r2, r3
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	3304      	adds	r3, #4
 80077c0:	4619      	mov	r1, r3
 80077c2:	4610      	mov	r0, r2
 80077c4:	f7fe fe45 	bl	8006452 <vListInsertEnd>
 80077c8:	e005      	b.n	80077d6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	3318      	adds	r3, #24
 80077ce:	4619      	mov	r1, r3
 80077d0:	480e      	ldr	r0, [pc, #56]	@ (800780c <xTaskRemoveFromEventList+0xbc>)
 80077d2:	f7fe fe3e 	bl	8006452 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077da:	4b0d      	ldr	r3, [pc, #52]	@ (8007810 <xTaskRemoveFromEventList+0xc0>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d905      	bls.n	80077f0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80077e4:	2301      	movs	r3, #1
 80077e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80077e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007814 <xTaskRemoveFromEventList+0xc4>)
 80077ea:	2201      	movs	r2, #1
 80077ec:	601a      	str	r2, [r3, #0]
 80077ee:	e001      	b.n	80077f4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80077f0:	2300      	movs	r3, #0
 80077f2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80077f4:	697b      	ldr	r3, [r7, #20]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3718      	adds	r7, #24
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	200005f4 	.word	0x200005f4
 8007804:	200005d4 	.word	0x200005d4
 8007808:	200004d0 	.word	0x200004d0
 800780c:	2000058c 	.word	0x2000058c
 8007810:	200004cc 	.word	0x200004cc
 8007814:	200005e0 	.word	0x200005e0

08007818 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007820:	4b06      	ldr	r3, [pc, #24]	@ (800783c <vTaskInternalSetTimeOutState+0x24>)
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007828:	4b05      	ldr	r3, [pc, #20]	@ (8007840 <vTaskInternalSetTimeOutState+0x28>)
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	605a      	str	r2, [r3, #4]
}
 8007830:	bf00      	nop
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	bc80      	pop	{r7}
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	200005e4 	.word	0x200005e4
 8007840:	200005d0 	.word	0x200005d0

08007844 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b088      	sub	sp, #32
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10b      	bne.n	800786c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	613b      	str	r3, [r7, #16]
}
 8007866:	bf00      	nop
 8007868:	bf00      	nop
 800786a:	e7fd      	b.n	8007868 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10b      	bne.n	800788a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007876:	f383 8811 	msr	BASEPRI, r3
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	60fb      	str	r3, [r7, #12]
}
 8007884:	bf00      	nop
 8007886:	bf00      	nop
 8007888:	e7fd      	b.n	8007886 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800788a:	f000 fb1f 	bl	8007ecc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800788e:	4b1d      	ldr	r3, [pc, #116]	@ (8007904 <xTaskCheckForTimeOut+0xc0>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	69ba      	ldr	r2, [r7, #24]
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a6:	d102      	bne.n	80078ae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80078a8:	2300      	movs	r3, #0
 80078aa:	61fb      	str	r3, [r7, #28]
 80078ac:	e023      	b.n	80078f6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	4b15      	ldr	r3, [pc, #84]	@ (8007908 <xTaskCheckForTimeOut+0xc4>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d007      	beq.n	80078ca <xTaskCheckForTimeOut+0x86>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d302      	bcc.n	80078ca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80078c4:	2301      	movs	r3, #1
 80078c6:	61fb      	str	r3, [r7, #28]
 80078c8:	e015      	b.n	80078f6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	697a      	ldr	r2, [r7, #20]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d20b      	bcs.n	80078ec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	1ad2      	subs	r2, r2, r3
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7ff ff99 	bl	8007818 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80078e6:	2300      	movs	r3, #0
 80078e8:	61fb      	str	r3, [r7, #28]
 80078ea:	e004      	b.n	80078f6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	2200      	movs	r2, #0
 80078f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80078f2:	2301      	movs	r3, #1
 80078f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80078f6:	f000 fb19 	bl	8007f2c <vPortExitCritical>

	return xReturn;
 80078fa:	69fb      	ldr	r3, [r7, #28]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3720      	adds	r7, #32
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	200005d0 	.word	0x200005d0
 8007908:	200005e4 	.word	0x200005e4

0800790c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800790c:	b480      	push	{r7}
 800790e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007910:	4b03      	ldr	r3, [pc, #12]	@ (8007920 <vTaskMissedYield+0x14>)
 8007912:	2201      	movs	r2, #1
 8007914:	601a      	str	r2, [r3, #0]
}
 8007916:	bf00      	nop
 8007918:	46bd      	mov	sp, r7
 800791a:	bc80      	pop	{r7}
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	200005e0 	.word	0x200005e0

08007924 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800792c:	f000 f852 	bl	80079d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007930:	4b06      	ldr	r3, [pc, #24]	@ (800794c <prvIdleTask+0x28>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d9f9      	bls.n	800792c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007938:	4b05      	ldr	r3, [pc, #20]	@ (8007950 <prvIdleTask+0x2c>)
 800793a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007948:	e7f0      	b.n	800792c <prvIdleTask+0x8>
 800794a:	bf00      	nop
 800794c:	200004d0 	.word	0x200004d0
 8007950:	e000ed04 	.word	0xe000ed04

08007954 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800795a:	2300      	movs	r3, #0
 800795c:	607b      	str	r3, [r7, #4]
 800795e:	e00c      	b.n	800797a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4a12      	ldr	r2, [pc, #72]	@ (80079b4 <prvInitialiseTaskLists+0x60>)
 800796c:	4413      	add	r3, r2
 800796e:	4618      	mov	r0, r3
 8007970:	f7fe fd44 	bl	80063fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	3301      	adds	r3, #1
 8007978:	607b      	str	r3, [r7, #4]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2b06      	cmp	r3, #6
 800797e:	d9ef      	bls.n	8007960 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007980:	480d      	ldr	r0, [pc, #52]	@ (80079b8 <prvInitialiseTaskLists+0x64>)
 8007982:	f7fe fd3b 	bl	80063fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007986:	480d      	ldr	r0, [pc, #52]	@ (80079bc <prvInitialiseTaskLists+0x68>)
 8007988:	f7fe fd38 	bl	80063fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800798c:	480c      	ldr	r0, [pc, #48]	@ (80079c0 <prvInitialiseTaskLists+0x6c>)
 800798e:	f7fe fd35 	bl	80063fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007992:	480c      	ldr	r0, [pc, #48]	@ (80079c4 <prvInitialiseTaskLists+0x70>)
 8007994:	f7fe fd32 	bl	80063fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007998:	480b      	ldr	r0, [pc, #44]	@ (80079c8 <prvInitialiseTaskLists+0x74>)
 800799a:	f7fe fd2f 	bl	80063fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800799e:	4b0b      	ldr	r3, [pc, #44]	@ (80079cc <prvInitialiseTaskLists+0x78>)
 80079a0:	4a05      	ldr	r2, [pc, #20]	@ (80079b8 <prvInitialiseTaskLists+0x64>)
 80079a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80079a4:	4b0a      	ldr	r3, [pc, #40]	@ (80079d0 <prvInitialiseTaskLists+0x7c>)
 80079a6:	4a05      	ldr	r2, [pc, #20]	@ (80079bc <prvInitialiseTaskLists+0x68>)
 80079a8:	601a      	str	r2, [r3, #0]
}
 80079aa:	bf00      	nop
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	200004d0 	.word	0x200004d0
 80079b8:	2000055c 	.word	0x2000055c
 80079bc:	20000570 	.word	0x20000570
 80079c0:	2000058c 	.word	0x2000058c
 80079c4:	200005a0 	.word	0x200005a0
 80079c8:	200005b8 	.word	0x200005b8
 80079cc:	20000584 	.word	0x20000584
 80079d0:	20000588 	.word	0x20000588

080079d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079da:	e019      	b.n	8007a10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80079dc:	f000 fa76 	bl	8007ecc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079e0:	4b10      	ldr	r3, [pc, #64]	@ (8007a24 <prvCheckTasksWaitingTermination+0x50>)
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3304      	adds	r3, #4
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7fe fd8b 	bl	8006508 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80079f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007a28 <prvCheckTasksWaitingTermination+0x54>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	3b01      	subs	r3, #1
 80079f8:	4a0b      	ldr	r2, [pc, #44]	@ (8007a28 <prvCheckTasksWaitingTermination+0x54>)
 80079fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80079fc:	4b0b      	ldr	r3, [pc, #44]	@ (8007a2c <prvCheckTasksWaitingTermination+0x58>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	3b01      	subs	r3, #1
 8007a02:	4a0a      	ldr	r2, [pc, #40]	@ (8007a2c <prvCheckTasksWaitingTermination+0x58>)
 8007a04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a06:	f000 fa91 	bl	8007f2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f810 	bl	8007a30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a10:	4b06      	ldr	r3, [pc, #24]	@ (8007a2c <prvCheckTasksWaitingTermination+0x58>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1e1      	bne.n	80079dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a18:	bf00      	nop
 8007a1a:	bf00      	nop
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	200005a0 	.word	0x200005a0
 8007a28:	200005cc 	.word	0x200005cc
 8007a2c:	200005b4 	.word	0x200005b4

08007a30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d108      	bne.n	8007a54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 fc10 	bl	800826c <vPortFree>
				vPortFree( pxTCB );
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fc0d 	bl	800826c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a52:	e019      	b.n	8007a88 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d103      	bne.n	8007a66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fc04 	bl	800826c <vPortFree>
	}
 8007a64:	e010      	b.n	8007a88 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d00b      	beq.n	8007a88 <prvDeleteTCB+0x58>
	__asm volatile
 8007a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	60fb      	str	r3, [r7, #12]
}
 8007a82:	bf00      	nop
 8007a84:	bf00      	nop
 8007a86:	e7fd      	b.n	8007a84 <prvDeleteTCB+0x54>
	}
 8007a88:	bf00      	nop
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a96:	4b0c      	ldr	r3, [pc, #48]	@ (8007ac8 <prvResetNextTaskUnblockTime+0x38>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d104      	bne.n	8007aaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8007acc <prvResetNextTaskUnblockTime+0x3c>)
 8007aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007aa8:	e008      	b.n	8007abc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aaa:	4b07      	ldr	r3, [pc, #28]	@ (8007ac8 <prvResetNextTaskUnblockTime+0x38>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	4a04      	ldr	r2, [pc, #16]	@ (8007acc <prvResetNextTaskUnblockTime+0x3c>)
 8007aba:	6013      	str	r3, [r2, #0]
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bc80      	pop	{r7}
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	20000584 	.word	0x20000584
 8007acc:	200005ec 	.word	0x200005ec

08007ad0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8007b04 <xTaskGetSchedulerState+0x34>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d102      	bne.n	8007ae4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	607b      	str	r3, [r7, #4]
 8007ae2:	e008      	b.n	8007af6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ae4:	4b08      	ldr	r3, [pc, #32]	@ (8007b08 <xTaskGetSchedulerState+0x38>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d102      	bne.n	8007af2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007aec:	2302      	movs	r3, #2
 8007aee:	607b      	str	r3, [r7, #4]
 8007af0:	e001      	b.n	8007af6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007af2:	2300      	movs	r3, #0
 8007af4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007af6:	687b      	ldr	r3, [r7, #4]
	}
 8007af8:	4618      	mov	r0, r3
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bc80      	pop	{r7}
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	200005d8 	.word	0x200005d8
 8007b08:	200005f4 	.word	0x200005f4

08007b0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d070      	beq.n	8007c04 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007b22:	4b3b      	ldr	r3, [pc, #236]	@ (8007c10 <xTaskPriorityDisinherit+0x104>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d00b      	beq.n	8007b44 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b30:	f383 8811 	msr	BASEPRI, r3
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	60fb      	str	r3, [r7, #12]
}
 8007b3e:	bf00      	nop
 8007b40:	bf00      	nop
 8007b42:	e7fd      	b.n	8007b40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10b      	bne.n	8007b64 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b50:	f383 8811 	msr	BASEPRI, r3
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	60bb      	str	r3, [r7, #8]
}
 8007b5e:	bf00      	nop
 8007b60:	bf00      	nop
 8007b62:	e7fd      	b.n	8007b60 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b68:	1e5a      	subs	r2, r3, #1
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d044      	beq.n	8007c04 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d140      	bne.n	8007c04 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	3304      	adds	r3, #4
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7fe fcbe 	bl	8006508 <uxListRemove>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d115      	bne.n	8007bbe <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b96:	491f      	ldr	r1, [pc, #124]	@ (8007c14 <xTaskPriorityDisinherit+0x108>)
 8007b98:	4613      	mov	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	440b      	add	r3, r1
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10a      	bne.n	8007bbe <xTaskPriorityDisinherit+0xb2>
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bac:	2201      	movs	r2, #1
 8007bae:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb2:	43da      	mvns	r2, r3
 8007bb4:	4b18      	ldr	r3, [pc, #96]	@ (8007c18 <xTaskPriorityDisinherit+0x10c>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4013      	ands	r3, r2
 8007bba:	4a17      	ldr	r2, [pc, #92]	@ (8007c18 <xTaskPriorityDisinherit+0x10c>)
 8007bbc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bca:	f1c3 0207 	rsb	r2, r3, #7
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	409a      	lsls	r2, r3
 8007bda:	4b0f      	ldr	r3, [pc, #60]	@ (8007c18 <xTaskPriorityDisinherit+0x10c>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	4a0d      	ldr	r2, [pc, #52]	@ (8007c18 <xTaskPriorityDisinherit+0x10c>)
 8007be2:	6013      	str	r3, [r2, #0]
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007be8:	4613      	mov	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4a08      	ldr	r2, [pc, #32]	@ (8007c14 <xTaskPriorityDisinherit+0x108>)
 8007bf2:	441a      	add	r2, r3
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	3304      	adds	r3, #4
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	4610      	mov	r0, r2
 8007bfc:	f7fe fc29 	bl	8006452 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007c00:	2301      	movs	r3, #1
 8007c02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c04:	697b      	ldr	r3, [r7, #20]
	}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3718      	adds	r7, #24
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	200004cc 	.word	0x200004cc
 8007c14:	200004d0 	.word	0x200004d0
 8007c18:	200005d4 	.word	0x200005d4

08007c1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c26:	4b29      	ldr	r3, [pc, #164]	@ (8007ccc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c2c:	4b28      	ldr	r3, [pc, #160]	@ (8007cd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	3304      	adds	r3, #4
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fe fc68 	bl	8006508 <uxListRemove>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10b      	bne.n	8007c56 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007c3e:	4b24      	ldr	r3, [pc, #144]	@ (8007cd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c44:	2201      	movs	r2, #1
 8007c46:	fa02 f303 	lsl.w	r3, r2, r3
 8007c4a:	43da      	mvns	r2, r3
 8007c4c:	4b21      	ldr	r3, [pc, #132]	@ (8007cd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4013      	ands	r3, r2
 8007c52:	4a20      	ldr	r2, [pc, #128]	@ (8007cd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007c54:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5c:	d10a      	bne.n	8007c74 <prvAddCurrentTaskToDelayedList+0x58>
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d007      	beq.n	8007c74 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c64:	4b1a      	ldr	r3, [pc, #104]	@ (8007cd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3304      	adds	r3, #4
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	481a      	ldr	r0, [pc, #104]	@ (8007cd8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007c6e:	f7fe fbf0 	bl	8006452 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c72:	e026      	b.n	8007cc2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4413      	add	r3, r2
 8007c7a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c7c:	4b14      	ldr	r3, [pc, #80]	@ (8007cd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d209      	bcs.n	8007ca0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c8c:	4b13      	ldr	r3, [pc, #76]	@ (8007cdc <prvAddCurrentTaskToDelayedList+0xc0>)
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	4b0f      	ldr	r3, [pc, #60]	@ (8007cd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	3304      	adds	r3, #4
 8007c96:	4619      	mov	r1, r3
 8007c98:	4610      	mov	r0, r2
 8007c9a:	f7fe fbfd 	bl	8006498 <vListInsert>
}
 8007c9e:	e010      	b.n	8007cc2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8007ce0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8007cd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3304      	adds	r3, #4
 8007caa:	4619      	mov	r1, r3
 8007cac:	4610      	mov	r0, r2
 8007cae:	f7fe fbf3 	bl	8006498 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8007ce4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68ba      	ldr	r2, [r7, #8]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d202      	bcs.n	8007cc2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007cbc:	4a09      	ldr	r2, [pc, #36]	@ (8007ce4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	6013      	str	r3, [r2, #0]
}
 8007cc2:	bf00      	nop
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	200005d0 	.word	0x200005d0
 8007cd0:	200004cc 	.word	0x200004cc
 8007cd4:	200005d4 	.word	0x200005d4
 8007cd8:	200005b8 	.word	0x200005b8
 8007cdc:	20000588 	.word	0x20000588
 8007ce0:	20000584 	.word	0x20000584
 8007ce4:	200005ec 	.word	0x200005ec

08007ce8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	3b04      	subs	r3, #4
 8007cf8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007d00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	3b04      	subs	r3, #4
 8007d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f023 0201 	bic.w	r2, r3, #1
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	3b04      	subs	r3, #4
 8007d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d18:	4a08      	ldr	r2, [pc, #32]	@ (8007d3c <pxPortInitialiseStack+0x54>)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	3b14      	subs	r3, #20
 8007d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	3b20      	subs	r3, #32
 8007d2e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d30:	68fb      	ldr	r3, [r7, #12]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bc80      	pop	{r7}
 8007d3a:	4770      	bx	lr
 8007d3c:	08007d41 	.word	0x08007d41

08007d40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007d46:	2300      	movs	r3, #0
 8007d48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d4a:	4b12      	ldr	r3, [pc, #72]	@ (8007d94 <prvTaskExitError+0x54>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d52:	d00b      	beq.n	8007d6c <prvTaskExitError+0x2c>
	__asm volatile
 8007d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d58:	f383 8811 	msr	BASEPRI, r3
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	f3bf 8f4f 	dsb	sy
 8007d64:	60fb      	str	r3, [r7, #12]
}
 8007d66:	bf00      	nop
 8007d68:	bf00      	nop
 8007d6a:	e7fd      	b.n	8007d68 <prvTaskExitError+0x28>
	__asm volatile
 8007d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d70:	f383 8811 	msr	BASEPRI, r3
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	60bb      	str	r3, [r7, #8]
}
 8007d7e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d80:	bf00      	nop
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d0fc      	beq.n	8007d82 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d88:	bf00      	nop
 8007d8a:	bf00      	nop
 8007d8c:	3714      	adds	r7, #20
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bc80      	pop	{r7}
 8007d92:	4770      	bx	lr
 8007d94:	20000014 	.word	0x20000014
	...

08007da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007da0:	4b07      	ldr	r3, [pc, #28]	@ (8007dc0 <pxCurrentTCBConst2>)
 8007da2:	6819      	ldr	r1, [r3, #0]
 8007da4:	6808      	ldr	r0, [r1, #0]
 8007da6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007daa:	f380 8809 	msr	PSP, r0
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f04f 0000 	mov.w	r0, #0
 8007db6:	f380 8811 	msr	BASEPRI, r0
 8007dba:	f04e 0e0d 	orr.w	lr, lr, #13
 8007dbe:	4770      	bx	lr

08007dc0 <pxCurrentTCBConst2>:
 8007dc0:	200004cc 	.word	0x200004cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007dc4:	bf00      	nop
 8007dc6:	bf00      	nop

08007dc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007dc8:	4806      	ldr	r0, [pc, #24]	@ (8007de4 <prvPortStartFirstTask+0x1c>)
 8007dca:	6800      	ldr	r0, [r0, #0]
 8007dcc:	6800      	ldr	r0, [r0, #0]
 8007dce:	f380 8808 	msr	MSP, r0
 8007dd2:	b662      	cpsie	i
 8007dd4:	b661      	cpsie	f
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	df00      	svc	0
 8007de0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007de2:	bf00      	nop
 8007de4:	e000ed08 	.word	0xe000ed08

08007de8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007dee:	4b32      	ldr	r3, [pc, #200]	@ (8007eb8 <xPortStartScheduler+0xd0>)
 8007df0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	22ff      	movs	r2, #255	@ 0xff
 8007dfe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e08:	78fb      	ldrb	r3, [r7, #3]
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007e10:	b2da      	uxtb	r2, r3
 8007e12:	4b2a      	ldr	r3, [pc, #168]	@ (8007ebc <xPortStartScheduler+0xd4>)
 8007e14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e16:	4b2a      	ldr	r3, [pc, #168]	@ (8007ec0 <xPortStartScheduler+0xd8>)
 8007e18:	2207      	movs	r2, #7
 8007e1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e1c:	e009      	b.n	8007e32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007e1e:	4b28      	ldr	r3, [pc, #160]	@ (8007ec0 <xPortStartScheduler+0xd8>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3b01      	subs	r3, #1
 8007e24:	4a26      	ldr	r2, [pc, #152]	@ (8007ec0 <xPortStartScheduler+0xd8>)
 8007e26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e28:	78fb      	ldrb	r3, [r7, #3]
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	005b      	lsls	r3, r3, #1
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e32:	78fb      	ldrb	r3, [r7, #3]
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e3a:	2b80      	cmp	r3, #128	@ 0x80
 8007e3c:	d0ef      	beq.n	8007e1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e3e:	4b20      	ldr	r3, [pc, #128]	@ (8007ec0 <xPortStartScheduler+0xd8>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f1c3 0307 	rsb	r3, r3, #7
 8007e46:	2b04      	cmp	r3, #4
 8007e48:	d00b      	beq.n	8007e62 <xPortStartScheduler+0x7a>
	__asm volatile
 8007e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	60bb      	str	r3, [r7, #8]
}
 8007e5c:	bf00      	nop
 8007e5e:	bf00      	nop
 8007e60:	e7fd      	b.n	8007e5e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e62:	4b17      	ldr	r3, [pc, #92]	@ (8007ec0 <xPortStartScheduler+0xd8>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	021b      	lsls	r3, r3, #8
 8007e68:	4a15      	ldr	r2, [pc, #84]	@ (8007ec0 <xPortStartScheduler+0xd8>)
 8007e6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e6c:	4b14      	ldr	r3, [pc, #80]	@ (8007ec0 <xPortStartScheduler+0xd8>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007e74:	4a12      	ldr	r2, [pc, #72]	@ (8007ec0 <xPortStartScheduler+0xd8>)
 8007e76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e80:	4b10      	ldr	r3, [pc, #64]	@ (8007ec4 <xPortStartScheduler+0xdc>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a0f      	ldr	r2, [pc, #60]	@ (8007ec4 <xPortStartScheduler+0xdc>)
 8007e86:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007e8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8007ec4 <xPortStartScheduler+0xdc>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a0c      	ldr	r2, [pc, #48]	@ (8007ec4 <xPortStartScheduler+0xdc>)
 8007e92:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007e96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e98:	f000 f8b8 	bl	800800c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007ec8 <xPortStartScheduler+0xe0>)
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ea2:	f7ff ff91 	bl	8007dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ea6:	f7ff fbd1 	bl	800764c <vTaskSwitchContext>
	prvTaskExitError();
 8007eaa:	f7ff ff49 	bl	8007d40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	e000e400 	.word	0xe000e400
 8007ebc:	200005f8 	.word	0x200005f8
 8007ec0:	200005fc 	.word	0x200005fc
 8007ec4:	e000ed20 	.word	0xe000ed20
 8007ec8:	20000014 	.word	0x20000014

08007ecc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
	__asm volatile
 8007ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed6:	f383 8811 	msr	BASEPRI, r3
 8007eda:	f3bf 8f6f 	isb	sy
 8007ede:	f3bf 8f4f 	dsb	sy
 8007ee2:	607b      	str	r3, [r7, #4]
}
 8007ee4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8007f24 <vPortEnterCritical+0x58>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3301      	adds	r3, #1
 8007eec:	4a0d      	ldr	r2, [pc, #52]	@ (8007f24 <vPortEnterCritical+0x58>)
 8007eee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8007f24 <vPortEnterCritical+0x58>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d110      	bne.n	8007f1a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8007f28 <vPortEnterCritical+0x5c>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00b      	beq.n	8007f1a <vPortEnterCritical+0x4e>
	__asm volatile
 8007f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	603b      	str	r3, [r7, #0]
}
 8007f14:	bf00      	nop
 8007f16:	bf00      	nop
 8007f18:	e7fd      	b.n	8007f16 <vPortEnterCritical+0x4a>
	}
}
 8007f1a:	bf00      	nop
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bc80      	pop	{r7}
 8007f22:	4770      	bx	lr
 8007f24:	20000014 	.word	0x20000014
 8007f28:	e000ed04 	.word	0xe000ed04

08007f2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f32:	4b12      	ldr	r3, [pc, #72]	@ (8007f7c <vPortExitCritical+0x50>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10b      	bne.n	8007f52 <vPortExitCritical+0x26>
	__asm volatile
 8007f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f3e:	f383 8811 	msr	BASEPRI, r3
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	607b      	str	r3, [r7, #4]
}
 8007f4c:	bf00      	nop
 8007f4e:	bf00      	nop
 8007f50:	e7fd      	b.n	8007f4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007f52:	4b0a      	ldr	r3, [pc, #40]	@ (8007f7c <vPortExitCritical+0x50>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	3b01      	subs	r3, #1
 8007f58:	4a08      	ldr	r2, [pc, #32]	@ (8007f7c <vPortExitCritical+0x50>)
 8007f5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f5c:	4b07      	ldr	r3, [pc, #28]	@ (8007f7c <vPortExitCritical+0x50>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d105      	bne.n	8007f70 <vPortExitCritical+0x44>
 8007f64:	2300      	movs	r3, #0
 8007f66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	f383 8811 	msr	BASEPRI, r3
}
 8007f6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bc80      	pop	{r7}
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	20000014 	.word	0x20000014

08007f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007f80:	f3ef 8009 	mrs	r0, PSP
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc0 <pxCurrentTCBConst>)
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007f90:	6010      	str	r0, [r2, #0]
 8007f92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007f96:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007f9a:	f380 8811 	msr	BASEPRI, r0
 8007f9e:	f7ff fb55 	bl	800764c <vTaskSwitchContext>
 8007fa2:	f04f 0000 	mov.w	r0, #0
 8007fa6:	f380 8811 	msr	BASEPRI, r0
 8007faa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007fae:	6819      	ldr	r1, [r3, #0]
 8007fb0:	6808      	ldr	r0, [r1, #0]
 8007fb2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007fb6:	f380 8809 	msr	PSP, r0
 8007fba:	f3bf 8f6f 	isb	sy
 8007fbe:	4770      	bx	lr

08007fc0 <pxCurrentTCBConst>:
 8007fc0:	200004cc 	.word	0x200004cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007fc4:	bf00      	nop
 8007fc6:	bf00      	nop

08007fc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
	__asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	607b      	str	r3, [r7, #4]
}
 8007fe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007fe2:	f7ff fa79 	bl	80074d8 <xTaskIncrementTick>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d003      	beq.n	8007ff4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007fec:	4b06      	ldr	r3, [pc, #24]	@ (8008008 <xPortSysTickHandler+0x40>)
 8007fee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ff2:	601a      	str	r2, [r3, #0]
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	f383 8811 	msr	BASEPRI, r3
}
 8007ffe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008000:	bf00      	nop
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	e000ed04 	.word	0xe000ed04

0800800c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800800c:	b480      	push	{r7}
 800800e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008010:	4b0a      	ldr	r3, [pc, #40]	@ (800803c <vPortSetupTimerInterrupt+0x30>)
 8008012:	2200      	movs	r2, #0
 8008014:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008016:	4b0a      	ldr	r3, [pc, #40]	@ (8008040 <vPortSetupTimerInterrupt+0x34>)
 8008018:	2200      	movs	r2, #0
 800801a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800801c:	4b09      	ldr	r3, [pc, #36]	@ (8008044 <vPortSetupTimerInterrupt+0x38>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a09      	ldr	r2, [pc, #36]	@ (8008048 <vPortSetupTimerInterrupt+0x3c>)
 8008022:	fba2 2303 	umull	r2, r3, r2, r3
 8008026:	099b      	lsrs	r3, r3, #6
 8008028:	4a08      	ldr	r2, [pc, #32]	@ (800804c <vPortSetupTimerInterrupt+0x40>)
 800802a:	3b01      	subs	r3, #1
 800802c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800802e:	4b03      	ldr	r3, [pc, #12]	@ (800803c <vPortSetupTimerInterrupt+0x30>)
 8008030:	2207      	movs	r2, #7
 8008032:	601a      	str	r2, [r3, #0]
}
 8008034:	bf00      	nop
 8008036:	46bd      	mov	sp, r7
 8008038:	bc80      	pop	{r7}
 800803a:	4770      	bx	lr
 800803c:	e000e010 	.word	0xe000e010
 8008040:	e000e018 	.word	0xe000e018
 8008044:	20000008 	.word	0x20000008
 8008048:	10624dd3 	.word	0x10624dd3
 800804c:	e000e014 	.word	0xe000e014

08008050 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008056:	f3ef 8305 	mrs	r3, IPSR
 800805a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2b0f      	cmp	r3, #15
 8008060:	d915      	bls.n	800808e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008062:	4a17      	ldr	r2, [pc, #92]	@ (80080c0 <vPortValidateInterruptPriority+0x70>)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	4413      	add	r3, r2
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800806c:	4b15      	ldr	r3, [pc, #84]	@ (80080c4 <vPortValidateInterruptPriority+0x74>)
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	7afa      	ldrb	r2, [r7, #11]
 8008072:	429a      	cmp	r2, r3
 8008074:	d20b      	bcs.n	800808e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	607b      	str	r3, [r7, #4]
}
 8008088:	bf00      	nop
 800808a:	bf00      	nop
 800808c:	e7fd      	b.n	800808a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800808e:	4b0e      	ldr	r3, [pc, #56]	@ (80080c8 <vPortValidateInterruptPriority+0x78>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008096:	4b0d      	ldr	r3, [pc, #52]	@ (80080cc <vPortValidateInterruptPriority+0x7c>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	429a      	cmp	r2, r3
 800809c:	d90b      	bls.n	80080b6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800809e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	603b      	str	r3, [r7, #0]
}
 80080b0:	bf00      	nop
 80080b2:	bf00      	nop
 80080b4:	e7fd      	b.n	80080b2 <vPortValidateInterruptPriority+0x62>
	}
 80080b6:	bf00      	nop
 80080b8:	3714      	adds	r7, #20
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bc80      	pop	{r7}
 80080be:	4770      	bx	lr
 80080c0:	e000e3f0 	.word	0xe000e3f0
 80080c4:	200005f8 	.word	0x200005f8
 80080c8:	e000ed0c 	.word	0xe000ed0c
 80080cc:	200005fc 	.word	0x200005fc

080080d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b08a      	sub	sp, #40	@ 0x28
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80080d8:	2300      	movs	r3, #0
 80080da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80080dc:	f7ff f942 	bl	8007364 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80080e0:	4b5c      	ldr	r3, [pc, #368]	@ (8008254 <pvPortMalloc+0x184>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80080e8:	f000 f924 	bl	8008334 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80080ec:	4b5a      	ldr	r3, [pc, #360]	@ (8008258 <pvPortMalloc+0x188>)
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4013      	ands	r3, r2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f040 8095 	bne.w	8008224 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d01e      	beq.n	800813e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008100:	2208      	movs	r2, #8
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4413      	add	r3, r2
 8008106:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f003 0307 	and.w	r3, r3, #7
 800810e:	2b00      	cmp	r3, #0
 8008110:	d015      	beq.n	800813e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f023 0307 	bic.w	r3, r3, #7
 8008118:	3308      	adds	r3, #8
 800811a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f003 0307 	and.w	r3, r3, #7
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00b      	beq.n	800813e <pvPortMalloc+0x6e>
	__asm volatile
 8008126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800812a:	f383 8811 	msr	BASEPRI, r3
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	f3bf 8f4f 	dsb	sy
 8008136:	617b      	str	r3, [r7, #20]
}
 8008138:	bf00      	nop
 800813a:	bf00      	nop
 800813c:	e7fd      	b.n	800813a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d06f      	beq.n	8008224 <pvPortMalloc+0x154>
 8008144:	4b45      	ldr	r3, [pc, #276]	@ (800825c <pvPortMalloc+0x18c>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	429a      	cmp	r2, r3
 800814c:	d86a      	bhi.n	8008224 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800814e:	4b44      	ldr	r3, [pc, #272]	@ (8008260 <pvPortMalloc+0x190>)
 8008150:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008152:	4b43      	ldr	r3, [pc, #268]	@ (8008260 <pvPortMalloc+0x190>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008158:	e004      	b.n	8008164 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800815a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800815e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	429a      	cmp	r2, r3
 800816c:	d903      	bls.n	8008176 <pvPortMalloc+0xa6>
 800816e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1f1      	bne.n	800815a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008176:	4b37      	ldr	r3, [pc, #220]	@ (8008254 <pvPortMalloc+0x184>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800817c:	429a      	cmp	r2, r3
 800817e:	d051      	beq.n	8008224 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008180:	6a3b      	ldr	r3, [r7, #32]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2208      	movs	r2, #8
 8008186:	4413      	add	r3, r2
 8008188:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800818a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	6a3b      	ldr	r3, [r7, #32]
 8008190:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	1ad2      	subs	r2, r2, r3
 800819a:	2308      	movs	r3, #8
 800819c:	005b      	lsls	r3, r3, #1
 800819e:	429a      	cmp	r2, r3
 80081a0:	d920      	bls.n	80081e4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80081a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4413      	add	r3, r2
 80081a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	f003 0307 	and.w	r3, r3, #7
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00b      	beq.n	80081cc <pvPortMalloc+0xfc>
	__asm volatile
 80081b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b8:	f383 8811 	msr	BASEPRI, r3
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f3bf 8f4f 	dsb	sy
 80081c4:	613b      	str	r3, [r7, #16]
}
 80081c6:	bf00      	nop
 80081c8:	bf00      	nop
 80081ca:	e7fd      	b.n	80081c8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ce:	685a      	ldr	r2, [r3, #4]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	1ad2      	subs	r2, r2, r3
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80081d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081de:	69b8      	ldr	r0, [r7, #24]
 80081e0:	f000 f90a 	bl	80083f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081e4:	4b1d      	ldr	r3, [pc, #116]	@ (800825c <pvPortMalloc+0x18c>)
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	4a1b      	ldr	r2, [pc, #108]	@ (800825c <pvPortMalloc+0x18c>)
 80081f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80081f2:	4b1a      	ldr	r3, [pc, #104]	@ (800825c <pvPortMalloc+0x18c>)
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	4b1b      	ldr	r3, [pc, #108]	@ (8008264 <pvPortMalloc+0x194>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d203      	bcs.n	8008206 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80081fe:	4b17      	ldr	r3, [pc, #92]	@ (800825c <pvPortMalloc+0x18c>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a18      	ldr	r2, [pc, #96]	@ (8008264 <pvPortMalloc+0x194>)
 8008204:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008208:	685a      	ldr	r2, [r3, #4]
 800820a:	4b13      	ldr	r3, [pc, #76]	@ (8008258 <pvPortMalloc+0x188>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	431a      	orrs	r2, r3
 8008210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008212:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008216:	2200      	movs	r2, #0
 8008218:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800821a:	4b13      	ldr	r3, [pc, #76]	@ (8008268 <pvPortMalloc+0x198>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	3301      	adds	r3, #1
 8008220:	4a11      	ldr	r2, [pc, #68]	@ (8008268 <pvPortMalloc+0x198>)
 8008222:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008224:	f7ff f8ac 	bl	8007380 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	f003 0307 	and.w	r3, r3, #7
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00b      	beq.n	800824a <pvPortMalloc+0x17a>
	__asm volatile
 8008232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008236:	f383 8811 	msr	BASEPRI, r3
 800823a:	f3bf 8f6f 	isb	sy
 800823e:	f3bf 8f4f 	dsb	sy
 8008242:	60fb      	str	r3, [r7, #12]
}
 8008244:	bf00      	nop
 8008246:	bf00      	nop
 8008248:	e7fd      	b.n	8008246 <pvPortMalloc+0x176>
	return pvReturn;
 800824a:	69fb      	ldr	r3, [r7, #28]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3728      	adds	r7, #40	@ 0x28
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	20001208 	.word	0x20001208
 8008258:	2000121c 	.word	0x2000121c
 800825c:	2000120c 	.word	0x2000120c
 8008260:	20001200 	.word	0x20001200
 8008264:	20001210 	.word	0x20001210
 8008268:	20001214 	.word	0x20001214

0800826c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d04f      	beq.n	800831e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800827e:	2308      	movs	r3, #8
 8008280:	425b      	negs	r3, r3
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	4413      	add	r3, r2
 8008286:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	685a      	ldr	r2, [r3, #4]
 8008290:	4b25      	ldr	r3, [pc, #148]	@ (8008328 <vPortFree+0xbc>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4013      	ands	r3, r2
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10b      	bne.n	80082b2 <vPortFree+0x46>
	__asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	60fb      	str	r3, [r7, #12]
}
 80082ac:	bf00      	nop
 80082ae:	bf00      	nop
 80082b0:	e7fd      	b.n	80082ae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00b      	beq.n	80082d2 <vPortFree+0x66>
	__asm volatile
 80082ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082be:	f383 8811 	msr	BASEPRI, r3
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	60bb      	str	r3, [r7, #8]
}
 80082cc:	bf00      	nop
 80082ce:	bf00      	nop
 80082d0:	e7fd      	b.n	80082ce <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	4b14      	ldr	r3, [pc, #80]	@ (8008328 <vPortFree+0xbc>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4013      	ands	r3, r2
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d01e      	beq.n	800831e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d11a      	bne.n	800831e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	685a      	ldr	r2, [r3, #4]
 80082ec:	4b0e      	ldr	r3, [pc, #56]	@ (8008328 <vPortFree+0xbc>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	43db      	mvns	r3, r3
 80082f2:	401a      	ands	r2, r3
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082f8:	f7ff f834 	bl	8007364 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	4b0a      	ldr	r3, [pc, #40]	@ (800832c <vPortFree+0xc0>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4413      	add	r3, r2
 8008306:	4a09      	ldr	r2, [pc, #36]	@ (800832c <vPortFree+0xc0>)
 8008308:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800830a:	6938      	ldr	r0, [r7, #16]
 800830c:	f000 f874 	bl	80083f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008310:	4b07      	ldr	r3, [pc, #28]	@ (8008330 <vPortFree+0xc4>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	3301      	adds	r3, #1
 8008316:	4a06      	ldr	r2, [pc, #24]	@ (8008330 <vPortFree+0xc4>)
 8008318:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800831a:	f7ff f831 	bl	8007380 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800831e:	bf00      	nop
 8008320:	3718      	adds	r7, #24
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	2000121c 	.word	0x2000121c
 800832c:	2000120c 	.word	0x2000120c
 8008330:	20001218 	.word	0x20001218

08008334 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008334:	b480      	push	{r7}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800833a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800833e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008340:	4b27      	ldr	r3, [pc, #156]	@ (80083e0 <prvHeapInit+0xac>)
 8008342:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f003 0307 	and.w	r3, r3, #7
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00c      	beq.n	8008368 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	3307      	adds	r3, #7
 8008352:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f023 0307 	bic.w	r3, r3, #7
 800835a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	4a1f      	ldr	r2, [pc, #124]	@ (80083e0 <prvHeapInit+0xac>)
 8008364:	4413      	add	r3, r2
 8008366:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800836c:	4a1d      	ldr	r2, [pc, #116]	@ (80083e4 <prvHeapInit+0xb0>)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008372:	4b1c      	ldr	r3, [pc, #112]	@ (80083e4 <prvHeapInit+0xb0>)
 8008374:	2200      	movs	r2, #0
 8008376:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	4413      	add	r3, r2
 800837e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008380:	2208      	movs	r2, #8
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	1a9b      	subs	r3, r3, r2
 8008386:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f023 0307 	bic.w	r3, r3, #7
 800838e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	4a15      	ldr	r2, [pc, #84]	@ (80083e8 <prvHeapInit+0xb4>)
 8008394:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008396:	4b14      	ldr	r3, [pc, #80]	@ (80083e8 <prvHeapInit+0xb4>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2200      	movs	r2, #0
 800839c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800839e:	4b12      	ldr	r3, [pc, #72]	@ (80083e8 <prvHeapInit+0xb4>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2200      	movs	r2, #0
 80083a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	1ad2      	subs	r2, r2, r3
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80083b4:	4b0c      	ldr	r3, [pc, #48]	@ (80083e8 <prvHeapInit+0xb4>)
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	4a0a      	ldr	r2, [pc, #40]	@ (80083ec <prvHeapInit+0xb8>)
 80083c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	4a09      	ldr	r2, [pc, #36]	@ (80083f0 <prvHeapInit+0xbc>)
 80083ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80083cc:	4b09      	ldr	r3, [pc, #36]	@ (80083f4 <prvHeapInit+0xc0>)
 80083ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80083d2:	601a      	str	r2, [r3, #0]
}
 80083d4:	bf00      	nop
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	bc80      	pop	{r7}
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	20000600 	.word	0x20000600
 80083e4:	20001200 	.word	0x20001200
 80083e8:	20001208 	.word	0x20001208
 80083ec:	20001210 	.word	0x20001210
 80083f0:	2000120c 	.word	0x2000120c
 80083f4:	2000121c 	.word	0x2000121c

080083f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008400:	4b27      	ldr	r3, [pc, #156]	@ (80084a0 <prvInsertBlockIntoFreeList+0xa8>)
 8008402:	60fb      	str	r3, [r7, #12]
 8008404:	e002      	b.n	800840c <prvInsertBlockIntoFreeList+0x14>
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	60fb      	str	r3, [r7, #12]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	429a      	cmp	r2, r3
 8008414:	d8f7      	bhi.n	8008406 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	4413      	add	r3, r2
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	429a      	cmp	r2, r3
 8008426:	d108      	bne.n	800843a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	685a      	ldr	r2, [r3, #4]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	441a      	add	r2, r3
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	441a      	add	r2, r3
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	429a      	cmp	r2, r3
 800844c:	d118      	bne.n	8008480 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	4b14      	ldr	r3, [pc, #80]	@ (80084a4 <prvInsertBlockIntoFreeList+0xac>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	429a      	cmp	r2, r3
 8008458:	d00d      	beq.n	8008476 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	685a      	ldr	r2, [r3, #4]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	441a      	add	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	e008      	b.n	8008488 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008476:	4b0b      	ldr	r3, [pc, #44]	@ (80084a4 <prvInsertBlockIntoFreeList+0xac>)
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	601a      	str	r2, [r3, #0]
 800847e:	e003      	b.n	8008488 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	429a      	cmp	r2, r3
 800848e:	d002      	beq.n	8008496 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008496:	bf00      	nop
 8008498:	3714      	adds	r7, #20
 800849a:	46bd      	mov	sp, r7
 800849c:	bc80      	pop	{r7}
 800849e:	4770      	bx	lr
 80084a0:	20001200 	.word	0x20001200
 80084a4:	20001208 	.word	0x20001208

080084a8 <std>:
 80084a8:	2300      	movs	r3, #0
 80084aa:	b510      	push	{r4, lr}
 80084ac:	4604      	mov	r4, r0
 80084ae:	e9c0 3300 	strd	r3, r3, [r0]
 80084b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084b6:	6083      	str	r3, [r0, #8]
 80084b8:	8181      	strh	r1, [r0, #12]
 80084ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80084bc:	81c2      	strh	r2, [r0, #14]
 80084be:	6183      	str	r3, [r0, #24]
 80084c0:	4619      	mov	r1, r3
 80084c2:	2208      	movs	r2, #8
 80084c4:	305c      	adds	r0, #92	@ 0x5c
 80084c6:	f000 f9f9 	bl	80088bc <memset>
 80084ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008500 <std+0x58>)
 80084cc:	6224      	str	r4, [r4, #32]
 80084ce:	6263      	str	r3, [r4, #36]	@ 0x24
 80084d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008504 <std+0x5c>)
 80084d2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80084d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008508 <std+0x60>)
 80084d6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80084d8:	4b0c      	ldr	r3, [pc, #48]	@ (800850c <std+0x64>)
 80084da:	6323      	str	r3, [r4, #48]	@ 0x30
 80084dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008510 <std+0x68>)
 80084de:	429c      	cmp	r4, r3
 80084e0:	d006      	beq.n	80084f0 <std+0x48>
 80084e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80084e6:	4294      	cmp	r4, r2
 80084e8:	d002      	beq.n	80084f0 <std+0x48>
 80084ea:	33d0      	adds	r3, #208	@ 0xd0
 80084ec:	429c      	cmp	r4, r3
 80084ee:	d105      	bne.n	80084fc <std+0x54>
 80084f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80084f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084f8:	f000 ba58 	b.w	80089ac <__retarget_lock_init_recursive>
 80084fc:	bd10      	pop	{r4, pc}
 80084fe:	bf00      	nop
 8008500:	0800870d 	.word	0x0800870d
 8008504:	0800872f 	.word	0x0800872f
 8008508:	08008767 	.word	0x08008767
 800850c:	0800878b 	.word	0x0800878b
 8008510:	20001220 	.word	0x20001220

08008514 <stdio_exit_handler>:
 8008514:	4a02      	ldr	r2, [pc, #8]	@ (8008520 <stdio_exit_handler+0xc>)
 8008516:	4903      	ldr	r1, [pc, #12]	@ (8008524 <stdio_exit_handler+0x10>)
 8008518:	4803      	ldr	r0, [pc, #12]	@ (8008528 <stdio_exit_handler+0x14>)
 800851a:	f000 b869 	b.w	80085f0 <_fwalk_sglue>
 800851e:	bf00      	nop
 8008520:	20000018 	.word	0x20000018
 8008524:	08009261 	.word	0x08009261
 8008528:	20000028 	.word	0x20000028

0800852c <cleanup_stdio>:
 800852c:	6841      	ldr	r1, [r0, #4]
 800852e:	4b0c      	ldr	r3, [pc, #48]	@ (8008560 <cleanup_stdio+0x34>)
 8008530:	b510      	push	{r4, lr}
 8008532:	4299      	cmp	r1, r3
 8008534:	4604      	mov	r4, r0
 8008536:	d001      	beq.n	800853c <cleanup_stdio+0x10>
 8008538:	f000 fe92 	bl	8009260 <_fflush_r>
 800853c:	68a1      	ldr	r1, [r4, #8]
 800853e:	4b09      	ldr	r3, [pc, #36]	@ (8008564 <cleanup_stdio+0x38>)
 8008540:	4299      	cmp	r1, r3
 8008542:	d002      	beq.n	800854a <cleanup_stdio+0x1e>
 8008544:	4620      	mov	r0, r4
 8008546:	f000 fe8b 	bl	8009260 <_fflush_r>
 800854a:	68e1      	ldr	r1, [r4, #12]
 800854c:	4b06      	ldr	r3, [pc, #24]	@ (8008568 <cleanup_stdio+0x3c>)
 800854e:	4299      	cmp	r1, r3
 8008550:	d004      	beq.n	800855c <cleanup_stdio+0x30>
 8008552:	4620      	mov	r0, r4
 8008554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008558:	f000 be82 	b.w	8009260 <_fflush_r>
 800855c:	bd10      	pop	{r4, pc}
 800855e:	bf00      	nop
 8008560:	20001220 	.word	0x20001220
 8008564:	20001288 	.word	0x20001288
 8008568:	200012f0 	.word	0x200012f0

0800856c <global_stdio_init.part.0>:
 800856c:	b510      	push	{r4, lr}
 800856e:	4b0b      	ldr	r3, [pc, #44]	@ (800859c <global_stdio_init.part.0+0x30>)
 8008570:	4c0b      	ldr	r4, [pc, #44]	@ (80085a0 <global_stdio_init.part.0+0x34>)
 8008572:	4a0c      	ldr	r2, [pc, #48]	@ (80085a4 <global_stdio_init.part.0+0x38>)
 8008574:	4620      	mov	r0, r4
 8008576:	601a      	str	r2, [r3, #0]
 8008578:	2104      	movs	r1, #4
 800857a:	2200      	movs	r2, #0
 800857c:	f7ff ff94 	bl	80084a8 <std>
 8008580:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008584:	2201      	movs	r2, #1
 8008586:	2109      	movs	r1, #9
 8008588:	f7ff ff8e 	bl	80084a8 <std>
 800858c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008590:	2202      	movs	r2, #2
 8008592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008596:	2112      	movs	r1, #18
 8008598:	f7ff bf86 	b.w	80084a8 <std>
 800859c:	20001358 	.word	0x20001358
 80085a0:	20001220 	.word	0x20001220
 80085a4:	08008515 	.word	0x08008515

080085a8 <__sfp_lock_acquire>:
 80085a8:	4801      	ldr	r0, [pc, #4]	@ (80085b0 <__sfp_lock_acquire+0x8>)
 80085aa:	f000 ba00 	b.w	80089ae <__retarget_lock_acquire_recursive>
 80085ae:	bf00      	nop
 80085b0:	20001361 	.word	0x20001361

080085b4 <__sfp_lock_release>:
 80085b4:	4801      	ldr	r0, [pc, #4]	@ (80085bc <__sfp_lock_release+0x8>)
 80085b6:	f000 b9fb 	b.w	80089b0 <__retarget_lock_release_recursive>
 80085ba:	bf00      	nop
 80085bc:	20001361 	.word	0x20001361

080085c0 <__sinit>:
 80085c0:	b510      	push	{r4, lr}
 80085c2:	4604      	mov	r4, r0
 80085c4:	f7ff fff0 	bl	80085a8 <__sfp_lock_acquire>
 80085c8:	6a23      	ldr	r3, [r4, #32]
 80085ca:	b11b      	cbz	r3, 80085d4 <__sinit+0x14>
 80085cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085d0:	f7ff bff0 	b.w	80085b4 <__sfp_lock_release>
 80085d4:	4b04      	ldr	r3, [pc, #16]	@ (80085e8 <__sinit+0x28>)
 80085d6:	6223      	str	r3, [r4, #32]
 80085d8:	4b04      	ldr	r3, [pc, #16]	@ (80085ec <__sinit+0x2c>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1f5      	bne.n	80085cc <__sinit+0xc>
 80085e0:	f7ff ffc4 	bl	800856c <global_stdio_init.part.0>
 80085e4:	e7f2      	b.n	80085cc <__sinit+0xc>
 80085e6:	bf00      	nop
 80085e8:	0800852d 	.word	0x0800852d
 80085ec:	20001358 	.word	0x20001358

080085f0 <_fwalk_sglue>:
 80085f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085f4:	4607      	mov	r7, r0
 80085f6:	4688      	mov	r8, r1
 80085f8:	4614      	mov	r4, r2
 80085fa:	2600      	movs	r6, #0
 80085fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008600:	f1b9 0901 	subs.w	r9, r9, #1
 8008604:	d505      	bpl.n	8008612 <_fwalk_sglue+0x22>
 8008606:	6824      	ldr	r4, [r4, #0]
 8008608:	2c00      	cmp	r4, #0
 800860a:	d1f7      	bne.n	80085fc <_fwalk_sglue+0xc>
 800860c:	4630      	mov	r0, r6
 800860e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008612:	89ab      	ldrh	r3, [r5, #12]
 8008614:	2b01      	cmp	r3, #1
 8008616:	d907      	bls.n	8008628 <_fwalk_sglue+0x38>
 8008618:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800861c:	3301      	adds	r3, #1
 800861e:	d003      	beq.n	8008628 <_fwalk_sglue+0x38>
 8008620:	4629      	mov	r1, r5
 8008622:	4638      	mov	r0, r7
 8008624:	47c0      	blx	r8
 8008626:	4306      	orrs	r6, r0
 8008628:	3568      	adds	r5, #104	@ 0x68
 800862a:	e7e9      	b.n	8008600 <_fwalk_sglue+0x10>

0800862c <iprintf>:
 800862c:	b40f      	push	{r0, r1, r2, r3}
 800862e:	b507      	push	{r0, r1, r2, lr}
 8008630:	4906      	ldr	r1, [pc, #24]	@ (800864c <iprintf+0x20>)
 8008632:	ab04      	add	r3, sp, #16
 8008634:	6808      	ldr	r0, [r1, #0]
 8008636:	f853 2b04 	ldr.w	r2, [r3], #4
 800863a:	6881      	ldr	r1, [r0, #8]
 800863c:	9301      	str	r3, [sp, #4]
 800863e:	f000 fae5 	bl	8008c0c <_vfiprintf_r>
 8008642:	b003      	add	sp, #12
 8008644:	f85d eb04 	ldr.w	lr, [sp], #4
 8008648:	b004      	add	sp, #16
 800864a:	4770      	bx	lr
 800864c:	20000024 	.word	0x20000024

08008650 <_puts_r>:
 8008650:	6a03      	ldr	r3, [r0, #32]
 8008652:	b570      	push	{r4, r5, r6, lr}
 8008654:	4605      	mov	r5, r0
 8008656:	460e      	mov	r6, r1
 8008658:	6884      	ldr	r4, [r0, #8]
 800865a:	b90b      	cbnz	r3, 8008660 <_puts_r+0x10>
 800865c:	f7ff ffb0 	bl	80085c0 <__sinit>
 8008660:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008662:	07db      	lsls	r3, r3, #31
 8008664:	d405      	bmi.n	8008672 <_puts_r+0x22>
 8008666:	89a3      	ldrh	r3, [r4, #12]
 8008668:	0598      	lsls	r0, r3, #22
 800866a:	d402      	bmi.n	8008672 <_puts_r+0x22>
 800866c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800866e:	f000 f99e 	bl	80089ae <__retarget_lock_acquire_recursive>
 8008672:	89a3      	ldrh	r3, [r4, #12]
 8008674:	0719      	lsls	r1, r3, #28
 8008676:	d502      	bpl.n	800867e <_puts_r+0x2e>
 8008678:	6923      	ldr	r3, [r4, #16]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d135      	bne.n	80086ea <_puts_r+0x9a>
 800867e:	4621      	mov	r1, r4
 8008680:	4628      	mov	r0, r5
 8008682:	f000 f8c5 	bl	8008810 <__swsetup_r>
 8008686:	b380      	cbz	r0, 80086ea <_puts_r+0x9a>
 8008688:	f04f 35ff 	mov.w	r5, #4294967295
 800868c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800868e:	07da      	lsls	r2, r3, #31
 8008690:	d405      	bmi.n	800869e <_puts_r+0x4e>
 8008692:	89a3      	ldrh	r3, [r4, #12]
 8008694:	059b      	lsls	r3, r3, #22
 8008696:	d402      	bmi.n	800869e <_puts_r+0x4e>
 8008698:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800869a:	f000 f989 	bl	80089b0 <__retarget_lock_release_recursive>
 800869e:	4628      	mov	r0, r5
 80086a0:	bd70      	pop	{r4, r5, r6, pc}
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	da04      	bge.n	80086b0 <_puts_r+0x60>
 80086a6:	69a2      	ldr	r2, [r4, #24]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	dc17      	bgt.n	80086dc <_puts_r+0x8c>
 80086ac:	290a      	cmp	r1, #10
 80086ae:	d015      	beq.n	80086dc <_puts_r+0x8c>
 80086b0:	6823      	ldr	r3, [r4, #0]
 80086b2:	1c5a      	adds	r2, r3, #1
 80086b4:	6022      	str	r2, [r4, #0]
 80086b6:	7019      	strb	r1, [r3, #0]
 80086b8:	68a3      	ldr	r3, [r4, #8]
 80086ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80086be:	3b01      	subs	r3, #1
 80086c0:	60a3      	str	r3, [r4, #8]
 80086c2:	2900      	cmp	r1, #0
 80086c4:	d1ed      	bne.n	80086a2 <_puts_r+0x52>
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	da11      	bge.n	80086ee <_puts_r+0x9e>
 80086ca:	4622      	mov	r2, r4
 80086cc:	210a      	movs	r1, #10
 80086ce:	4628      	mov	r0, r5
 80086d0:	f000 f85f 	bl	8008792 <__swbuf_r>
 80086d4:	3001      	adds	r0, #1
 80086d6:	d0d7      	beq.n	8008688 <_puts_r+0x38>
 80086d8:	250a      	movs	r5, #10
 80086da:	e7d7      	b.n	800868c <_puts_r+0x3c>
 80086dc:	4622      	mov	r2, r4
 80086de:	4628      	mov	r0, r5
 80086e0:	f000 f857 	bl	8008792 <__swbuf_r>
 80086e4:	3001      	adds	r0, #1
 80086e6:	d1e7      	bne.n	80086b8 <_puts_r+0x68>
 80086e8:	e7ce      	b.n	8008688 <_puts_r+0x38>
 80086ea:	3e01      	subs	r6, #1
 80086ec:	e7e4      	b.n	80086b8 <_puts_r+0x68>
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	1c5a      	adds	r2, r3, #1
 80086f2:	6022      	str	r2, [r4, #0]
 80086f4:	220a      	movs	r2, #10
 80086f6:	701a      	strb	r2, [r3, #0]
 80086f8:	e7ee      	b.n	80086d8 <_puts_r+0x88>
	...

080086fc <puts>:
 80086fc:	4b02      	ldr	r3, [pc, #8]	@ (8008708 <puts+0xc>)
 80086fe:	4601      	mov	r1, r0
 8008700:	6818      	ldr	r0, [r3, #0]
 8008702:	f7ff bfa5 	b.w	8008650 <_puts_r>
 8008706:	bf00      	nop
 8008708:	20000024 	.word	0x20000024

0800870c <__sread>:
 800870c:	b510      	push	{r4, lr}
 800870e:	460c      	mov	r4, r1
 8008710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008714:	f000 f8fc 	bl	8008910 <_read_r>
 8008718:	2800      	cmp	r0, #0
 800871a:	bfab      	itete	ge
 800871c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800871e:	89a3      	ldrhlt	r3, [r4, #12]
 8008720:	181b      	addge	r3, r3, r0
 8008722:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008726:	bfac      	ite	ge
 8008728:	6563      	strge	r3, [r4, #84]	@ 0x54
 800872a:	81a3      	strhlt	r3, [r4, #12]
 800872c:	bd10      	pop	{r4, pc}

0800872e <__swrite>:
 800872e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008732:	461f      	mov	r7, r3
 8008734:	898b      	ldrh	r3, [r1, #12]
 8008736:	4605      	mov	r5, r0
 8008738:	05db      	lsls	r3, r3, #23
 800873a:	460c      	mov	r4, r1
 800873c:	4616      	mov	r6, r2
 800873e:	d505      	bpl.n	800874c <__swrite+0x1e>
 8008740:	2302      	movs	r3, #2
 8008742:	2200      	movs	r2, #0
 8008744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008748:	f000 f8d0 	bl	80088ec <_lseek_r>
 800874c:	89a3      	ldrh	r3, [r4, #12]
 800874e:	4632      	mov	r2, r6
 8008750:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008754:	81a3      	strh	r3, [r4, #12]
 8008756:	4628      	mov	r0, r5
 8008758:	463b      	mov	r3, r7
 800875a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800875e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008762:	f000 b8e7 	b.w	8008934 <_write_r>

08008766 <__sseek>:
 8008766:	b510      	push	{r4, lr}
 8008768:	460c      	mov	r4, r1
 800876a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800876e:	f000 f8bd 	bl	80088ec <_lseek_r>
 8008772:	1c43      	adds	r3, r0, #1
 8008774:	89a3      	ldrh	r3, [r4, #12]
 8008776:	bf15      	itete	ne
 8008778:	6560      	strne	r0, [r4, #84]	@ 0x54
 800877a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800877e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008782:	81a3      	strheq	r3, [r4, #12]
 8008784:	bf18      	it	ne
 8008786:	81a3      	strhne	r3, [r4, #12]
 8008788:	bd10      	pop	{r4, pc}

0800878a <__sclose>:
 800878a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800878e:	f000 b89d 	b.w	80088cc <_close_r>

08008792 <__swbuf_r>:
 8008792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008794:	460e      	mov	r6, r1
 8008796:	4614      	mov	r4, r2
 8008798:	4605      	mov	r5, r0
 800879a:	b118      	cbz	r0, 80087a4 <__swbuf_r+0x12>
 800879c:	6a03      	ldr	r3, [r0, #32]
 800879e:	b90b      	cbnz	r3, 80087a4 <__swbuf_r+0x12>
 80087a0:	f7ff ff0e 	bl	80085c0 <__sinit>
 80087a4:	69a3      	ldr	r3, [r4, #24]
 80087a6:	60a3      	str	r3, [r4, #8]
 80087a8:	89a3      	ldrh	r3, [r4, #12]
 80087aa:	071a      	lsls	r2, r3, #28
 80087ac:	d501      	bpl.n	80087b2 <__swbuf_r+0x20>
 80087ae:	6923      	ldr	r3, [r4, #16]
 80087b0:	b943      	cbnz	r3, 80087c4 <__swbuf_r+0x32>
 80087b2:	4621      	mov	r1, r4
 80087b4:	4628      	mov	r0, r5
 80087b6:	f000 f82b 	bl	8008810 <__swsetup_r>
 80087ba:	b118      	cbz	r0, 80087c4 <__swbuf_r+0x32>
 80087bc:	f04f 37ff 	mov.w	r7, #4294967295
 80087c0:	4638      	mov	r0, r7
 80087c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087c4:	6823      	ldr	r3, [r4, #0]
 80087c6:	6922      	ldr	r2, [r4, #16]
 80087c8:	b2f6      	uxtb	r6, r6
 80087ca:	1a98      	subs	r0, r3, r2
 80087cc:	6963      	ldr	r3, [r4, #20]
 80087ce:	4637      	mov	r7, r6
 80087d0:	4283      	cmp	r3, r0
 80087d2:	dc05      	bgt.n	80087e0 <__swbuf_r+0x4e>
 80087d4:	4621      	mov	r1, r4
 80087d6:	4628      	mov	r0, r5
 80087d8:	f000 fd42 	bl	8009260 <_fflush_r>
 80087dc:	2800      	cmp	r0, #0
 80087de:	d1ed      	bne.n	80087bc <__swbuf_r+0x2a>
 80087e0:	68a3      	ldr	r3, [r4, #8]
 80087e2:	3b01      	subs	r3, #1
 80087e4:	60a3      	str	r3, [r4, #8]
 80087e6:	6823      	ldr	r3, [r4, #0]
 80087e8:	1c5a      	adds	r2, r3, #1
 80087ea:	6022      	str	r2, [r4, #0]
 80087ec:	701e      	strb	r6, [r3, #0]
 80087ee:	6962      	ldr	r2, [r4, #20]
 80087f0:	1c43      	adds	r3, r0, #1
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d004      	beq.n	8008800 <__swbuf_r+0x6e>
 80087f6:	89a3      	ldrh	r3, [r4, #12]
 80087f8:	07db      	lsls	r3, r3, #31
 80087fa:	d5e1      	bpl.n	80087c0 <__swbuf_r+0x2e>
 80087fc:	2e0a      	cmp	r6, #10
 80087fe:	d1df      	bne.n	80087c0 <__swbuf_r+0x2e>
 8008800:	4621      	mov	r1, r4
 8008802:	4628      	mov	r0, r5
 8008804:	f000 fd2c 	bl	8009260 <_fflush_r>
 8008808:	2800      	cmp	r0, #0
 800880a:	d0d9      	beq.n	80087c0 <__swbuf_r+0x2e>
 800880c:	e7d6      	b.n	80087bc <__swbuf_r+0x2a>
	...

08008810 <__swsetup_r>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	4b29      	ldr	r3, [pc, #164]	@ (80088b8 <__swsetup_r+0xa8>)
 8008814:	4605      	mov	r5, r0
 8008816:	6818      	ldr	r0, [r3, #0]
 8008818:	460c      	mov	r4, r1
 800881a:	b118      	cbz	r0, 8008824 <__swsetup_r+0x14>
 800881c:	6a03      	ldr	r3, [r0, #32]
 800881e:	b90b      	cbnz	r3, 8008824 <__swsetup_r+0x14>
 8008820:	f7ff fece 	bl	80085c0 <__sinit>
 8008824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008828:	0719      	lsls	r1, r3, #28
 800882a:	d422      	bmi.n	8008872 <__swsetup_r+0x62>
 800882c:	06da      	lsls	r2, r3, #27
 800882e:	d407      	bmi.n	8008840 <__swsetup_r+0x30>
 8008830:	2209      	movs	r2, #9
 8008832:	602a      	str	r2, [r5, #0]
 8008834:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008838:	f04f 30ff 	mov.w	r0, #4294967295
 800883c:	81a3      	strh	r3, [r4, #12]
 800883e:	e033      	b.n	80088a8 <__swsetup_r+0x98>
 8008840:	0758      	lsls	r0, r3, #29
 8008842:	d512      	bpl.n	800886a <__swsetup_r+0x5a>
 8008844:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008846:	b141      	cbz	r1, 800885a <__swsetup_r+0x4a>
 8008848:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800884c:	4299      	cmp	r1, r3
 800884e:	d002      	beq.n	8008856 <__swsetup_r+0x46>
 8008850:	4628      	mov	r0, r5
 8008852:	f000 f8bd 	bl	80089d0 <_free_r>
 8008856:	2300      	movs	r3, #0
 8008858:	6363      	str	r3, [r4, #52]	@ 0x34
 800885a:	89a3      	ldrh	r3, [r4, #12]
 800885c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008860:	81a3      	strh	r3, [r4, #12]
 8008862:	2300      	movs	r3, #0
 8008864:	6063      	str	r3, [r4, #4]
 8008866:	6923      	ldr	r3, [r4, #16]
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	89a3      	ldrh	r3, [r4, #12]
 800886c:	f043 0308 	orr.w	r3, r3, #8
 8008870:	81a3      	strh	r3, [r4, #12]
 8008872:	6923      	ldr	r3, [r4, #16]
 8008874:	b94b      	cbnz	r3, 800888a <__swsetup_r+0x7a>
 8008876:	89a3      	ldrh	r3, [r4, #12]
 8008878:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800887c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008880:	d003      	beq.n	800888a <__swsetup_r+0x7a>
 8008882:	4621      	mov	r1, r4
 8008884:	4628      	mov	r0, r5
 8008886:	f000 fd38 	bl	80092fa <__smakebuf_r>
 800888a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800888e:	f013 0201 	ands.w	r2, r3, #1
 8008892:	d00a      	beq.n	80088aa <__swsetup_r+0x9a>
 8008894:	2200      	movs	r2, #0
 8008896:	60a2      	str	r2, [r4, #8]
 8008898:	6962      	ldr	r2, [r4, #20]
 800889a:	4252      	negs	r2, r2
 800889c:	61a2      	str	r2, [r4, #24]
 800889e:	6922      	ldr	r2, [r4, #16]
 80088a0:	b942      	cbnz	r2, 80088b4 <__swsetup_r+0xa4>
 80088a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088a6:	d1c5      	bne.n	8008834 <__swsetup_r+0x24>
 80088a8:	bd38      	pop	{r3, r4, r5, pc}
 80088aa:	0799      	lsls	r1, r3, #30
 80088ac:	bf58      	it	pl
 80088ae:	6962      	ldrpl	r2, [r4, #20]
 80088b0:	60a2      	str	r2, [r4, #8]
 80088b2:	e7f4      	b.n	800889e <__swsetup_r+0x8e>
 80088b4:	2000      	movs	r0, #0
 80088b6:	e7f7      	b.n	80088a8 <__swsetup_r+0x98>
 80088b8:	20000024 	.word	0x20000024

080088bc <memset>:
 80088bc:	4603      	mov	r3, r0
 80088be:	4402      	add	r2, r0
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d100      	bne.n	80088c6 <memset+0xa>
 80088c4:	4770      	bx	lr
 80088c6:	f803 1b01 	strb.w	r1, [r3], #1
 80088ca:	e7f9      	b.n	80088c0 <memset+0x4>

080088cc <_close_r>:
 80088cc:	b538      	push	{r3, r4, r5, lr}
 80088ce:	2300      	movs	r3, #0
 80088d0:	4d05      	ldr	r5, [pc, #20]	@ (80088e8 <_close_r+0x1c>)
 80088d2:	4604      	mov	r4, r0
 80088d4:	4608      	mov	r0, r1
 80088d6:	602b      	str	r3, [r5, #0]
 80088d8:	f7f9 ffb5 	bl	8002846 <_close>
 80088dc:	1c43      	adds	r3, r0, #1
 80088de:	d102      	bne.n	80088e6 <_close_r+0x1a>
 80088e0:	682b      	ldr	r3, [r5, #0]
 80088e2:	b103      	cbz	r3, 80088e6 <_close_r+0x1a>
 80088e4:	6023      	str	r3, [r4, #0]
 80088e6:	bd38      	pop	{r3, r4, r5, pc}
 80088e8:	2000135c 	.word	0x2000135c

080088ec <_lseek_r>:
 80088ec:	b538      	push	{r3, r4, r5, lr}
 80088ee:	4604      	mov	r4, r0
 80088f0:	4608      	mov	r0, r1
 80088f2:	4611      	mov	r1, r2
 80088f4:	2200      	movs	r2, #0
 80088f6:	4d05      	ldr	r5, [pc, #20]	@ (800890c <_lseek_r+0x20>)
 80088f8:	602a      	str	r2, [r5, #0]
 80088fa:	461a      	mov	r2, r3
 80088fc:	f7f9 ffc7 	bl	800288e <_lseek>
 8008900:	1c43      	adds	r3, r0, #1
 8008902:	d102      	bne.n	800890a <_lseek_r+0x1e>
 8008904:	682b      	ldr	r3, [r5, #0]
 8008906:	b103      	cbz	r3, 800890a <_lseek_r+0x1e>
 8008908:	6023      	str	r3, [r4, #0]
 800890a:	bd38      	pop	{r3, r4, r5, pc}
 800890c:	2000135c 	.word	0x2000135c

08008910 <_read_r>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	4604      	mov	r4, r0
 8008914:	4608      	mov	r0, r1
 8008916:	4611      	mov	r1, r2
 8008918:	2200      	movs	r2, #0
 800891a:	4d05      	ldr	r5, [pc, #20]	@ (8008930 <_read_r+0x20>)
 800891c:	602a      	str	r2, [r5, #0]
 800891e:	461a      	mov	r2, r3
 8008920:	f7f9 ff58 	bl	80027d4 <_read>
 8008924:	1c43      	adds	r3, r0, #1
 8008926:	d102      	bne.n	800892e <_read_r+0x1e>
 8008928:	682b      	ldr	r3, [r5, #0]
 800892a:	b103      	cbz	r3, 800892e <_read_r+0x1e>
 800892c:	6023      	str	r3, [r4, #0]
 800892e:	bd38      	pop	{r3, r4, r5, pc}
 8008930:	2000135c 	.word	0x2000135c

08008934 <_write_r>:
 8008934:	b538      	push	{r3, r4, r5, lr}
 8008936:	4604      	mov	r4, r0
 8008938:	4608      	mov	r0, r1
 800893a:	4611      	mov	r1, r2
 800893c:	2200      	movs	r2, #0
 800893e:	4d05      	ldr	r5, [pc, #20]	@ (8008954 <_write_r+0x20>)
 8008940:	602a      	str	r2, [r5, #0]
 8008942:	461a      	mov	r2, r3
 8008944:	f7f9 ff63 	bl	800280e <_write>
 8008948:	1c43      	adds	r3, r0, #1
 800894a:	d102      	bne.n	8008952 <_write_r+0x1e>
 800894c:	682b      	ldr	r3, [r5, #0]
 800894e:	b103      	cbz	r3, 8008952 <_write_r+0x1e>
 8008950:	6023      	str	r3, [r4, #0]
 8008952:	bd38      	pop	{r3, r4, r5, pc}
 8008954:	2000135c 	.word	0x2000135c

08008958 <__errno>:
 8008958:	4b01      	ldr	r3, [pc, #4]	@ (8008960 <__errno+0x8>)
 800895a:	6818      	ldr	r0, [r3, #0]
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	20000024 	.word	0x20000024

08008964 <__libc_init_array>:
 8008964:	b570      	push	{r4, r5, r6, lr}
 8008966:	2600      	movs	r6, #0
 8008968:	4d0c      	ldr	r5, [pc, #48]	@ (800899c <__libc_init_array+0x38>)
 800896a:	4c0d      	ldr	r4, [pc, #52]	@ (80089a0 <__libc_init_array+0x3c>)
 800896c:	1b64      	subs	r4, r4, r5
 800896e:	10a4      	asrs	r4, r4, #2
 8008970:	42a6      	cmp	r6, r4
 8008972:	d109      	bne.n	8008988 <__libc_init_array+0x24>
 8008974:	f000 fd62 	bl	800943c <_init>
 8008978:	2600      	movs	r6, #0
 800897a:	4d0a      	ldr	r5, [pc, #40]	@ (80089a4 <__libc_init_array+0x40>)
 800897c:	4c0a      	ldr	r4, [pc, #40]	@ (80089a8 <__libc_init_array+0x44>)
 800897e:	1b64      	subs	r4, r4, r5
 8008980:	10a4      	asrs	r4, r4, #2
 8008982:	42a6      	cmp	r6, r4
 8008984:	d105      	bne.n	8008992 <__libc_init_array+0x2e>
 8008986:	bd70      	pop	{r4, r5, r6, pc}
 8008988:	f855 3b04 	ldr.w	r3, [r5], #4
 800898c:	4798      	blx	r3
 800898e:	3601      	adds	r6, #1
 8008990:	e7ee      	b.n	8008970 <__libc_init_array+0xc>
 8008992:	f855 3b04 	ldr.w	r3, [r5], #4
 8008996:	4798      	blx	r3
 8008998:	3601      	adds	r6, #1
 800899a:	e7f2      	b.n	8008982 <__libc_init_array+0x1e>
 800899c:	080097f4 	.word	0x080097f4
 80089a0:	080097f4 	.word	0x080097f4
 80089a4:	080097f4 	.word	0x080097f4
 80089a8:	080097f8 	.word	0x080097f8

080089ac <__retarget_lock_init_recursive>:
 80089ac:	4770      	bx	lr

080089ae <__retarget_lock_acquire_recursive>:
 80089ae:	4770      	bx	lr

080089b0 <__retarget_lock_release_recursive>:
 80089b0:	4770      	bx	lr

080089b2 <memcpy>:
 80089b2:	440a      	add	r2, r1
 80089b4:	4291      	cmp	r1, r2
 80089b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80089ba:	d100      	bne.n	80089be <memcpy+0xc>
 80089bc:	4770      	bx	lr
 80089be:	b510      	push	{r4, lr}
 80089c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089c4:	4291      	cmp	r1, r2
 80089c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089ca:	d1f9      	bne.n	80089c0 <memcpy+0xe>
 80089cc:	bd10      	pop	{r4, pc}
	...

080089d0 <_free_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	4605      	mov	r5, r0
 80089d4:	2900      	cmp	r1, #0
 80089d6:	d040      	beq.n	8008a5a <_free_r+0x8a>
 80089d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089dc:	1f0c      	subs	r4, r1, #4
 80089de:	2b00      	cmp	r3, #0
 80089e0:	bfb8      	it	lt
 80089e2:	18e4      	addlt	r4, r4, r3
 80089e4:	f000 f8de 	bl	8008ba4 <__malloc_lock>
 80089e8:	4a1c      	ldr	r2, [pc, #112]	@ (8008a5c <_free_r+0x8c>)
 80089ea:	6813      	ldr	r3, [r2, #0]
 80089ec:	b933      	cbnz	r3, 80089fc <_free_r+0x2c>
 80089ee:	6063      	str	r3, [r4, #4]
 80089f0:	6014      	str	r4, [r2, #0]
 80089f2:	4628      	mov	r0, r5
 80089f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089f8:	f000 b8da 	b.w	8008bb0 <__malloc_unlock>
 80089fc:	42a3      	cmp	r3, r4
 80089fe:	d908      	bls.n	8008a12 <_free_r+0x42>
 8008a00:	6820      	ldr	r0, [r4, #0]
 8008a02:	1821      	adds	r1, r4, r0
 8008a04:	428b      	cmp	r3, r1
 8008a06:	bf01      	itttt	eq
 8008a08:	6819      	ldreq	r1, [r3, #0]
 8008a0a:	685b      	ldreq	r3, [r3, #4]
 8008a0c:	1809      	addeq	r1, r1, r0
 8008a0e:	6021      	streq	r1, [r4, #0]
 8008a10:	e7ed      	b.n	80089ee <_free_r+0x1e>
 8008a12:	461a      	mov	r2, r3
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	b10b      	cbz	r3, 8008a1c <_free_r+0x4c>
 8008a18:	42a3      	cmp	r3, r4
 8008a1a:	d9fa      	bls.n	8008a12 <_free_r+0x42>
 8008a1c:	6811      	ldr	r1, [r2, #0]
 8008a1e:	1850      	adds	r0, r2, r1
 8008a20:	42a0      	cmp	r0, r4
 8008a22:	d10b      	bne.n	8008a3c <_free_r+0x6c>
 8008a24:	6820      	ldr	r0, [r4, #0]
 8008a26:	4401      	add	r1, r0
 8008a28:	1850      	adds	r0, r2, r1
 8008a2a:	4283      	cmp	r3, r0
 8008a2c:	6011      	str	r1, [r2, #0]
 8008a2e:	d1e0      	bne.n	80089f2 <_free_r+0x22>
 8008a30:	6818      	ldr	r0, [r3, #0]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	4408      	add	r0, r1
 8008a36:	6010      	str	r0, [r2, #0]
 8008a38:	6053      	str	r3, [r2, #4]
 8008a3a:	e7da      	b.n	80089f2 <_free_r+0x22>
 8008a3c:	d902      	bls.n	8008a44 <_free_r+0x74>
 8008a3e:	230c      	movs	r3, #12
 8008a40:	602b      	str	r3, [r5, #0]
 8008a42:	e7d6      	b.n	80089f2 <_free_r+0x22>
 8008a44:	6820      	ldr	r0, [r4, #0]
 8008a46:	1821      	adds	r1, r4, r0
 8008a48:	428b      	cmp	r3, r1
 8008a4a:	bf01      	itttt	eq
 8008a4c:	6819      	ldreq	r1, [r3, #0]
 8008a4e:	685b      	ldreq	r3, [r3, #4]
 8008a50:	1809      	addeq	r1, r1, r0
 8008a52:	6021      	streq	r1, [r4, #0]
 8008a54:	6063      	str	r3, [r4, #4]
 8008a56:	6054      	str	r4, [r2, #4]
 8008a58:	e7cb      	b.n	80089f2 <_free_r+0x22>
 8008a5a:	bd38      	pop	{r3, r4, r5, pc}
 8008a5c:	20001368 	.word	0x20001368

08008a60 <sbrk_aligned>:
 8008a60:	b570      	push	{r4, r5, r6, lr}
 8008a62:	4e0f      	ldr	r6, [pc, #60]	@ (8008aa0 <sbrk_aligned+0x40>)
 8008a64:	460c      	mov	r4, r1
 8008a66:	6831      	ldr	r1, [r6, #0]
 8008a68:	4605      	mov	r5, r0
 8008a6a:	b911      	cbnz	r1, 8008a72 <sbrk_aligned+0x12>
 8008a6c:	f000 fca4 	bl	80093b8 <_sbrk_r>
 8008a70:	6030      	str	r0, [r6, #0]
 8008a72:	4621      	mov	r1, r4
 8008a74:	4628      	mov	r0, r5
 8008a76:	f000 fc9f 	bl	80093b8 <_sbrk_r>
 8008a7a:	1c43      	adds	r3, r0, #1
 8008a7c:	d103      	bne.n	8008a86 <sbrk_aligned+0x26>
 8008a7e:	f04f 34ff 	mov.w	r4, #4294967295
 8008a82:	4620      	mov	r0, r4
 8008a84:	bd70      	pop	{r4, r5, r6, pc}
 8008a86:	1cc4      	adds	r4, r0, #3
 8008a88:	f024 0403 	bic.w	r4, r4, #3
 8008a8c:	42a0      	cmp	r0, r4
 8008a8e:	d0f8      	beq.n	8008a82 <sbrk_aligned+0x22>
 8008a90:	1a21      	subs	r1, r4, r0
 8008a92:	4628      	mov	r0, r5
 8008a94:	f000 fc90 	bl	80093b8 <_sbrk_r>
 8008a98:	3001      	adds	r0, #1
 8008a9a:	d1f2      	bne.n	8008a82 <sbrk_aligned+0x22>
 8008a9c:	e7ef      	b.n	8008a7e <sbrk_aligned+0x1e>
 8008a9e:	bf00      	nop
 8008aa0:	20001364 	.word	0x20001364

08008aa4 <_malloc_r>:
 8008aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008aa8:	1ccd      	adds	r5, r1, #3
 8008aaa:	f025 0503 	bic.w	r5, r5, #3
 8008aae:	3508      	adds	r5, #8
 8008ab0:	2d0c      	cmp	r5, #12
 8008ab2:	bf38      	it	cc
 8008ab4:	250c      	movcc	r5, #12
 8008ab6:	2d00      	cmp	r5, #0
 8008ab8:	4606      	mov	r6, r0
 8008aba:	db01      	blt.n	8008ac0 <_malloc_r+0x1c>
 8008abc:	42a9      	cmp	r1, r5
 8008abe:	d904      	bls.n	8008aca <_malloc_r+0x26>
 8008ac0:	230c      	movs	r3, #12
 8008ac2:	6033      	str	r3, [r6, #0]
 8008ac4:	2000      	movs	r0, #0
 8008ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ba0 <_malloc_r+0xfc>
 8008ace:	f000 f869 	bl	8008ba4 <__malloc_lock>
 8008ad2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ad6:	461c      	mov	r4, r3
 8008ad8:	bb44      	cbnz	r4, 8008b2c <_malloc_r+0x88>
 8008ada:	4629      	mov	r1, r5
 8008adc:	4630      	mov	r0, r6
 8008ade:	f7ff ffbf 	bl	8008a60 <sbrk_aligned>
 8008ae2:	1c43      	adds	r3, r0, #1
 8008ae4:	4604      	mov	r4, r0
 8008ae6:	d158      	bne.n	8008b9a <_malloc_r+0xf6>
 8008ae8:	f8d8 4000 	ldr.w	r4, [r8]
 8008aec:	4627      	mov	r7, r4
 8008aee:	2f00      	cmp	r7, #0
 8008af0:	d143      	bne.n	8008b7a <_malloc_r+0xd6>
 8008af2:	2c00      	cmp	r4, #0
 8008af4:	d04b      	beq.n	8008b8e <_malloc_r+0xea>
 8008af6:	6823      	ldr	r3, [r4, #0]
 8008af8:	4639      	mov	r1, r7
 8008afa:	4630      	mov	r0, r6
 8008afc:	eb04 0903 	add.w	r9, r4, r3
 8008b00:	f000 fc5a 	bl	80093b8 <_sbrk_r>
 8008b04:	4581      	cmp	r9, r0
 8008b06:	d142      	bne.n	8008b8e <_malloc_r+0xea>
 8008b08:	6821      	ldr	r1, [r4, #0]
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	1a6d      	subs	r5, r5, r1
 8008b0e:	4629      	mov	r1, r5
 8008b10:	f7ff ffa6 	bl	8008a60 <sbrk_aligned>
 8008b14:	3001      	adds	r0, #1
 8008b16:	d03a      	beq.n	8008b8e <_malloc_r+0xea>
 8008b18:	6823      	ldr	r3, [r4, #0]
 8008b1a:	442b      	add	r3, r5
 8008b1c:	6023      	str	r3, [r4, #0]
 8008b1e:	f8d8 3000 	ldr.w	r3, [r8]
 8008b22:	685a      	ldr	r2, [r3, #4]
 8008b24:	bb62      	cbnz	r2, 8008b80 <_malloc_r+0xdc>
 8008b26:	f8c8 7000 	str.w	r7, [r8]
 8008b2a:	e00f      	b.n	8008b4c <_malloc_r+0xa8>
 8008b2c:	6822      	ldr	r2, [r4, #0]
 8008b2e:	1b52      	subs	r2, r2, r5
 8008b30:	d420      	bmi.n	8008b74 <_malloc_r+0xd0>
 8008b32:	2a0b      	cmp	r2, #11
 8008b34:	d917      	bls.n	8008b66 <_malloc_r+0xc2>
 8008b36:	1961      	adds	r1, r4, r5
 8008b38:	42a3      	cmp	r3, r4
 8008b3a:	6025      	str	r5, [r4, #0]
 8008b3c:	bf18      	it	ne
 8008b3e:	6059      	strne	r1, [r3, #4]
 8008b40:	6863      	ldr	r3, [r4, #4]
 8008b42:	bf08      	it	eq
 8008b44:	f8c8 1000 	streq.w	r1, [r8]
 8008b48:	5162      	str	r2, [r4, r5]
 8008b4a:	604b      	str	r3, [r1, #4]
 8008b4c:	4630      	mov	r0, r6
 8008b4e:	f000 f82f 	bl	8008bb0 <__malloc_unlock>
 8008b52:	f104 000b 	add.w	r0, r4, #11
 8008b56:	1d23      	adds	r3, r4, #4
 8008b58:	f020 0007 	bic.w	r0, r0, #7
 8008b5c:	1ac2      	subs	r2, r0, r3
 8008b5e:	bf1c      	itt	ne
 8008b60:	1a1b      	subne	r3, r3, r0
 8008b62:	50a3      	strne	r3, [r4, r2]
 8008b64:	e7af      	b.n	8008ac6 <_malloc_r+0x22>
 8008b66:	6862      	ldr	r2, [r4, #4]
 8008b68:	42a3      	cmp	r3, r4
 8008b6a:	bf0c      	ite	eq
 8008b6c:	f8c8 2000 	streq.w	r2, [r8]
 8008b70:	605a      	strne	r2, [r3, #4]
 8008b72:	e7eb      	b.n	8008b4c <_malloc_r+0xa8>
 8008b74:	4623      	mov	r3, r4
 8008b76:	6864      	ldr	r4, [r4, #4]
 8008b78:	e7ae      	b.n	8008ad8 <_malloc_r+0x34>
 8008b7a:	463c      	mov	r4, r7
 8008b7c:	687f      	ldr	r7, [r7, #4]
 8008b7e:	e7b6      	b.n	8008aee <_malloc_r+0x4a>
 8008b80:	461a      	mov	r2, r3
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	42a3      	cmp	r3, r4
 8008b86:	d1fb      	bne.n	8008b80 <_malloc_r+0xdc>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	6053      	str	r3, [r2, #4]
 8008b8c:	e7de      	b.n	8008b4c <_malloc_r+0xa8>
 8008b8e:	230c      	movs	r3, #12
 8008b90:	4630      	mov	r0, r6
 8008b92:	6033      	str	r3, [r6, #0]
 8008b94:	f000 f80c 	bl	8008bb0 <__malloc_unlock>
 8008b98:	e794      	b.n	8008ac4 <_malloc_r+0x20>
 8008b9a:	6005      	str	r5, [r0, #0]
 8008b9c:	e7d6      	b.n	8008b4c <_malloc_r+0xa8>
 8008b9e:	bf00      	nop
 8008ba0:	20001368 	.word	0x20001368

08008ba4 <__malloc_lock>:
 8008ba4:	4801      	ldr	r0, [pc, #4]	@ (8008bac <__malloc_lock+0x8>)
 8008ba6:	f7ff bf02 	b.w	80089ae <__retarget_lock_acquire_recursive>
 8008baa:	bf00      	nop
 8008bac:	20001360 	.word	0x20001360

08008bb0 <__malloc_unlock>:
 8008bb0:	4801      	ldr	r0, [pc, #4]	@ (8008bb8 <__malloc_unlock+0x8>)
 8008bb2:	f7ff befd 	b.w	80089b0 <__retarget_lock_release_recursive>
 8008bb6:	bf00      	nop
 8008bb8:	20001360 	.word	0x20001360

08008bbc <__sfputc_r>:
 8008bbc:	6893      	ldr	r3, [r2, #8]
 8008bbe:	b410      	push	{r4}
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	6093      	str	r3, [r2, #8]
 8008bc6:	da07      	bge.n	8008bd8 <__sfputc_r+0x1c>
 8008bc8:	6994      	ldr	r4, [r2, #24]
 8008bca:	42a3      	cmp	r3, r4
 8008bcc:	db01      	blt.n	8008bd2 <__sfputc_r+0x16>
 8008bce:	290a      	cmp	r1, #10
 8008bd0:	d102      	bne.n	8008bd8 <__sfputc_r+0x1c>
 8008bd2:	bc10      	pop	{r4}
 8008bd4:	f7ff bddd 	b.w	8008792 <__swbuf_r>
 8008bd8:	6813      	ldr	r3, [r2, #0]
 8008bda:	1c58      	adds	r0, r3, #1
 8008bdc:	6010      	str	r0, [r2, #0]
 8008bde:	7019      	strb	r1, [r3, #0]
 8008be0:	4608      	mov	r0, r1
 8008be2:	bc10      	pop	{r4}
 8008be4:	4770      	bx	lr

08008be6 <__sfputs_r>:
 8008be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be8:	4606      	mov	r6, r0
 8008bea:	460f      	mov	r7, r1
 8008bec:	4614      	mov	r4, r2
 8008bee:	18d5      	adds	r5, r2, r3
 8008bf0:	42ac      	cmp	r4, r5
 8008bf2:	d101      	bne.n	8008bf8 <__sfputs_r+0x12>
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	e007      	b.n	8008c08 <__sfputs_r+0x22>
 8008bf8:	463a      	mov	r2, r7
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c00:	f7ff ffdc 	bl	8008bbc <__sfputc_r>
 8008c04:	1c43      	adds	r3, r0, #1
 8008c06:	d1f3      	bne.n	8008bf0 <__sfputs_r+0xa>
 8008c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c0c <_vfiprintf_r>:
 8008c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c10:	460d      	mov	r5, r1
 8008c12:	4614      	mov	r4, r2
 8008c14:	4698      	mov	r8, r3
 8008c16:	4606      	mov	r6, r0
 8008c18:	b09d      	sub	sp, #116	@ 0x74
 8008c1a:	b118      	cbz	r0, 8008c24 <_vfiprintf_r+0x18>
 8008c1c:	6a03      	ldr	r3, [r0, #32]
 8008c1e:	b90b      	cbnz	r3, 8008c24 <_vfiprintf_r+0x18>
 8008c20:	f7ff fcce 	bl	80085c0 <__sinit>
 8008c24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c26:	07d9      	lsls	r1, r3, #31
 8008c28:	d405      	bmi.n	8008c36 <_vfiprintf_r+0x2a>
 8008c2a:	89ab      	ldrh	r3, [r5, #12]
 8008c2c:	059a      	lsls	r2, r3, #22
 8008c2e:	d402      	bmi.n	8008c36 <_vfiprintf_r+0x2a>
 8008c30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c32:	f7ff febc 	bl	80089ae <__retarget_lock_acquire_recursive>
 8008c36:	89ab      	ldrh	r3, [r5, #12]
 8008c38:	071b      	lsls	r3, r3, #28
 8008c3a:	d501      	bpl.n	8008c40 <_vfiprintf_r+0x34>
 8008c3c:	692b      	ldr	r3, [r5, #16]
 8008c3e:	b99b      	cbnz	r3, 8008c68 <_vfiprintf_r+0x5c>
 8008c40:	4629      	mov	r1, r5
 8008c42:	4630      	mov	r0, r6
 8008c44:	f7ff fde4 	bl	8008810 <__swsetup_r>
 8008c48:	b170      	cbz	r0, 8008c68 <_vfiprintf_r+0x5c>
 8008c4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c4c:	07dc      	lsls	r4, r3, #31
 8008c4e:	d504      	bpl.n	8008c5a <_vfiprintf_r+0x4e>
 8008c50:	f04f 30ff 	mov.w	r0, #4294967295
 8008c54:	b01d      	add	sp, #116	@ 0x74
 8008c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5a:	89ab      	ldrh	r3, [r5, #12]
 8008c5c:	0598      	lsls	r0, r3, #22
 8008c5e:	d4f7      	bmi.n	8008c50 <_vfiprintf_r+0x44>
 8008c60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c62:	f7ff fea5 	bl	80089b0 <__retarget_lock_release_recursive>
 8008c66:	e7f3      	b.n	8008c50 <_vfiprintf_r+0x44>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c6c:	2320      	movs	r3, #32
 8008c6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c72:	2330      	movs	r3, #48	@ 0x30
 8008c74:	f04f 0901 	mov.w	r9, #1
 8008c78:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c7c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008e28 <_vfiprintf_r+0x21c>
 8008c80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c84:	4623      	mov	r3, r4
 8008c86:	469a      	mov	sl, r3
 8008c88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c8c:	b10a      	cbz	r2, 8008c92 <_vfiprintf_r+0x86>
 8008c8e:	2a25      	cmp	r2, #37	@ 0x25
 8008c90:	d1f9      	bne.n	8008c86 <_vfiprintf_r+0x7a>
 8008c92:	ebba 0b04 	subs.w	fp, sl, r4
 8008c96:	d00b      	beq.n	8008cb0 <_vfiprintf_r+0xa4>
 8008c98:	465b      	mov	r3, fp
 8008c9a:	4622      	mov	r2, r4
 8008c9c:	4629      	mov	r1, r5
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	f7ff ffa1 	bl	8008be6 <__sfputs_r>
 8008ca4:	3001      	adds	r0, #1
 8008ca6:	f000 80a7 	beq.w	8008df8 <_vfiprintf_r+0x1ec>
 8008caa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cac:	445a      	add	r2, fp
 8008cae:	9209      	str	r2, [sp, #36]	@ 0x24
 8008cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f000 809f 	beq.w	8008df8 <_vfiprintf_r+0x1ec>
 8008cba:	2300      	movs	r3, #0
 8008cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cc4:	f10a 0a01 	add.w	sl, sl, #1
 8008cc8:	9304      	str	r3, [sp, #16]
 8008cca:	9307      	str	r3, [sp, #28]
 8008ccc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008cd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008cd2:	4654      	mov	r4, sl
 8008cd4:	2205      	movs	r2, #5
 8008cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cda:	4853      	ldr	r0, [pc, #332]	@ (8008e28 <_vfiprintf_r+0x21c>)
 8008cdc:	f000 fb7c 	bl	80093d8 <memchr>
 8008ce0:	9a04      	ldr	r2, [sp, #16]
 8008ce2:	b9d8      	cbnz	r0, 8008d1c <_vfiprintf_r+0x110>
 8008ce4:	06d1      	lsls	r1, r2, #27
 8008ce6:	bf44      	itt	mi
 8008ce8:	2320      	movmi	r3, #32
 8008cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cee:	0713      	lsls	r3, r2, #28
 8008cf0:	bf44      	itt	mi
 8008cf2:	232b      	movmi	r3, #43	@ 0x2b
 8008cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8008cfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cfe:	d015      	beq.n	8008d2c <_vfiprintf_r+0x120>
 8008d00:	4654      	mov	r4, sl
 8008d02:	2000      	movs	r0, #0
 8008d04:	f04f 0c0a 	mov.w	ip, #10
 8008d08:	9a07      	ldr	r2, [sp, #28]
 8008d0a:	4621      	mov	r1, r4
 8008d0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d10:	3b30      	subs	r3, #48	@ 0x30
 8008d12:	2b09      	cmp	r3, #9
 8008d14:	d94b      	bls.n	8008dae <_vfiprintf_r+0x1a2>
 8008d16:	b1b0      	cbz	r0, 8008d46 <_vfiprintf_r+0x13a>
 8008d18:	9207      	str	r2, [sp, #28]
 8008d1a:	e014      	b.n	8008d46 <_vfiprintf_r+0x13a>
 8008d1c:	eba0 0308 	sub.w	r3, r0, r8
 8008d20:	fa09 f303 	lsl.w	r3, r9, r3
 8008d24:	4313      	orrs	r3, r2
 8008d26:	46a2      	mov	sl, r4
 8008d28:	9304      	str	r3, [sp, #16]
 8008d2a:	e7d2      	b.n	8008cd2 <_vfiprintf_r+0xc6>
 8008d2c:	9b03      	ldr	r3, [sp, #12]
 8008d2e:	1d19      	adds	r1, r3, #4
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	9103      	str	r1, [sp, #12]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	bfbb      	ittet	lt
 8008d38:	425b      	neglt	r3, r3
 8008d3a:	f042 0202 	orrlt.w	r2, r2, #2
 8008d3e:	9307      	strge	r3, [sp, #28]
 8008d40:	9307      	strlt	r3, [sp, #28]
 8008d42:	bfb8      	it	lt
 8008d44:	9204      	strlt	r2, [sp, #16]
 8008d46:	7823      	ldrb	r3, [r4, #0]
 8008d48:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d4a:	d10a      	bne.n	8008d62 <_vfiprintf_r+0x156>
 8008d4c:	7863      	ldrb	r3, [r4, #1]
 8008d4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d50:	d132      	bne.n	8008db8 <_vfiprintf_r+0x1ac>
 8008d52:	9b03      	ldr	r3, [sp, #12]
 8008d54:	3402      	adds	r4, #2
 8008d56:	1d1a      	adds	r2, r3, #4
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	9203      	str	r2, [sp, #12]
 8008d5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d60:	9305      	str	r3, [sp, #20]
 8008d62:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008e2c <_vfiprintf_r+0x220>
 8008d66:	2203      	movs	r2, #3
 8008d68:	4650      	mov	r0, sl
 8008d6a:	7821      	ldrb	r1, [r4, #0]
 8008d6c:	f000 fb34 	bl	80093d8 <memchr>
 8008d70:	b138      	cbz	r0, 8008d82 <_vfiprintf_r+0x176>
 8008d72:	2240      	movs	r2, #64	@ 0x40
 8008d74:	9b04      	ldr	r3, [sp, #16]
 8008d76:	eba0 000a 	sub.w	r0, r0, sl
 8008d7a:	4082      	lsls	r2, r0
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	3401      	adds	r4, #1
 8008d80:	9304      	str	r3, [sp, #16]
 8008d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d86:	2206      	movs	r2, #6
 8008d88:	4829      	ldr	r0, [pc, #164]	@ (8008e30 <_vfiprintf_r+0x224>)
 8008d8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d8e:	f000 fb23 	bl	80093d8 <memchr>
 8008d92:	2800      	cmp	r0, #0
 8008d94:	d03f      	beq.n	8008e16 <_vfiprintf_r+0x20a>
 8008d96:	4b27      	ldr	r3, [pc, #156]	@ (8008e34 <_vfiprintf_r+0x228>)
 8008d98:	bb1b      	cbnz	r3, 8008de2 <_vfiprintf_r+0x1d6>
 8008d9a:	9b03      	ldr	r3, [sp, #12]
 8008d9c:	3307      	adds	r3, #7
 8008d9e:	f023 0307 	bic.w	r3, r3, #7
 8008da2:	3308      	adds	r3, #8
 8008da4:	9303      	str	r3, [sp, #12]
 8008da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008da8:	443b      	add	r3, r7
 8008daa:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dac:	e76a      	b.n	8008c84 <_vfiprintf_r+0x78>
 8008dae:	460c      	mov	r4, r1
 8008db0:	2001      	movs	r0, #1
 8008db2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008db6:	e7a8      	b.n	8008d0a <_vfiprintf_r+0xfe>
 8008db8:	2300      	movs	r3, #0
 8008dba:	f04f 0c0a 	mov.w	ip, #10
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	3401      	adds	r4, #1
 8008dc2:	9305      	str	r3, [sp, #20]
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dca:	3a30      	subs	r2, #48	@ 0x30
 8008dcc:	2a09      	cmp	r2, #9
 8008dce:	d903      	bls.n	8008dd8 <_vfiprintf_r+0x1cc>
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d0c6      	beq.n	8008d62 <_vfiprintf_r+0x156>
 8008dd4:	9105      	str	r1, [sp, #20]
 8008dd6:	e7c4      	b.n	8008d62 <_vfiprintf_r+0x156>
 8008dd8:	4604      	mov	r4, r0
 8008dda:	2301      	movs	r3, #1
 8008ddc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008de0:	e7f0      	b.n	8008dc4 <_vfiprintf_r+0x1b8>
 8008de2:	ab03      	add	r3, sp, #12
 8008de4:	9300      	str	r3, [sp, #0]
 8008de6:	462a      	mov	r2, r5
 8008de8:	4630      	mov	r0, r6
 8008dea:	4b13      	ldr	r3, [pc, #76]	@ (8008e38 <_vfiprintf_r+0x22c>)
 8008dec:	a904      	add	r1, sp, #16
 8008dee:	f3af 8000 	nop.w
 8008df2:	4607      	mov	r7, r0
 8008df4:	1c78      	adds	r0, r7, #1
 8008df6:	d1d6      	bne.n	8008da6 <_vfiprintf_r+0x19a>
 8008df8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dfa:	07d9      	lsls	r1, r3, #31
 8008dfc:	d405      	bmi.n	8008e0a <_vfiprintf_r+0x1fe>
 8008dfe:	89ab      	ldrh	r3, [r5, #12]
 8008e00:	059a      	lsls	r2, r3, #22
 8008e02:	d402      	bmi.n	8008e0a <_vfiprintf_r+0x1fe>
 8008e04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e06:	f7ff fdd3 	bl	80089b0 <__retarget_lock_release_recursive>
 8008e0a:	89ab      	ldrh	r3, [r5, #12]
 8008e0c:	065b      	lsls	r3, r3, #25
 8008e0e:	f53f af1f 	bmi.w	8008c50 <_vfiprintf_r+0x44>
 8008e12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e14:	e71e      	b.n	8008c54 <_vfiprintf_r+0x48>
 8008e16:	ab03      	add	r3, sp, #12
 8008e18:	9300      	str	r3, [sp, #0]
 8008e1a:	462a      	mov	r2, r5
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	4b06      	ldr	r3, [pc, #24]	@ (8008e38 <_vfiprintf_r+0x22c>)
 8008e20:	a904      	add	r1, sp, #16
 8008e22:	f000 f87d 	bl	8008f20 <_printf_i>
 8008e26:	e7e4      	b.n	8008df2 <_vfiprintf_r+0x1e6>
 8008e28:	080097be 	.word	0x080097be
 8008e2c:	080097c4 	.word	0x080097c4
 8008e30:	080097c8 	.word	0x080097c8
 8008e34:	00000000 	.word	0x00000000
 8008e38:	08008be7 	.word	0x08008be7

08008e3c <_printf_common>:
 8008e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e40:	4616      	mov	r6, r2
 8008e42:	4698      	mov	r8, r3
 8008e44:	688a      	ldr	r2, [r1, #8]
 8008e46:	690b      	ldr	r3, [r1, #16]
 8008e48:	4607      	mov	r7, r0
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	bfb8      	it	lt
 8008e4e:	4613      	movlt	r3, r2
 8008e50:	6033      	str	r3, [r6, #0]
 8008e52:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008e56:	460c      	mov	r4, r1
 8008e58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e5c:	b10a      	cbz	r2, 8008e62 <_printf_common+0x26>
 8008e5e:	3301      	adds	r3, #1
 8008e60:	6033      	str	r3, [r6, #0]
 8008e62:	6823      	ldr	r3, [r4, #0]
 8008e64:	0699      	lsls	r1, r3, #26
 8008e66:	bf42      	ittt	mi
 8008e68:	6833      	ldrmi	r3, [r6, #0]
 8008e6a:	3302      	addmi	r3, #2
 8008e6c:	6033      	strmi	r3, [r6, #0]
 8008e6e:	6825      	ldr	r5, [r4, #0]
 8008e70:	f015 0506 	ands.w	r5, r5, #6
 8008e74:	d106      	bne.n	8008e84 <_printf_common+0x48>
 8008e76:	f104 0a19 	add.w	sl, r4, #25
 8008e7a:	68e3      	ldr	r3, [r4, #12]
 8008e7c:	6832      	ldr	r2, [r6, #0]
 8008e7e:	1a9b      	subs	r3, r3, r2
 8008e80:	42ab      	cmp	r3, r5
 8008e82:	dc2b      	bgt.n	8008edc <_printf_common+0xa0>
 8008e84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e88:	6822      	ldr	r2, [r4, #0]
 8008e8a:	3b00      	subs	r3, #0
 8008e8c:	bf18      	it	ne
 8008e8e:	2301      	movne	r3, #1
 8008e90:	0692      	lsls	r2, r2, #26
 8008e92:	d430      	bmi.n	8008ef6 <_printf_common+0xba>
 8008e94:	4641      	mov	r1, r8
 8008e96:	4638      	mov	r0, r7
 8008e98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e9c:	47c8      	blx	r9
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	d023      	beq.n	8008eea <_printf_common+0xae>
 8008ea2:	6823      	ldr	r3, [r4, #0]
 8008ea4:	6922      	ldr	r2, [r4, #16]
 8008ea6:	f003 0306 	and.w	r3, r3, #6
 8008eaa:	2b04      	cmp	r3, #4
 8008eac:	bf14      	ite	ne
 8008eae:	2500      	movne	r5, #0
 8008eb0:	6833      	ldreq	r3, [r6, #0]
 8008eb2:	f04f 0600 	mov.w	r6, #0
 8008eb6:	bf08      	it	eq
 8008eb8:	68e5      	ldreq	r5, [r4, #12]
 8008eba:	f104 041a 	add.w	r4, r4, #26
 8008ebe:	bf08      	it	eq
 8008ec0:	1aed      	subeq	r5, r5, r3
 8008ec2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008ec6:	bf08      	it	eq
 8008ec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	bfc4      	itt	gt
 8008ed0:	1a9b      	subgt	r3, r3, r2
 8008ed2:	18ed      	addgt	r5, r5, r3
 8008ed4:	42b5      	cmp	r5, r6
 8008ed6:	d11a      	bne.n	8008f0e <_printf_common+0xd2>
 8008ed8:	2000      	movs	r0, #0
 8008eda:	e008      	b.n	8008eee <_printf_common+0xb2>
 8008edc:	2301      	movs	r3, #1
 8008ede:	4652      	mov	r2, sl
 8008ee0:	4641      	mov	r1, r8
 8008ee2:	4638      	mov	r0, r7
 8008ee4:	47c8      	blx	r9
 8008ee6:	3001      	adds	r0, #1
 8008ee8:	d103      	bne.n	8008ef2 <_printf_common+0xb6>
 8008eea:	f04f 30ff 	mov.w	r0, #4294967295
 8008eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ef2:	3501      	adds	r5, #1
 8008ef4:	e7c1      	b.n	8008e7a <_printf_common+0x3e>
 8008ef6:	2030      	movs	r0, #48	@ 0x30
 8008ef8:	18e1      	adds	r1, r4, r3
 8008efa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008efe:	1c5a      	adds	r2, r3, #1
 8008f00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f04:	4422      	add	r2, r4
 8008f06:	3302      	adds	r3, #2
 8008f08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f0c:	e7c2      	b.n	8008e94 <_printf_common+0x58>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	4622      	mov	r2, r4
 8008f12:	4641      	mov	r1, r8
 8008f14:	4638      	mov	r0, r7
 8008f16:	47c8      	blx	r9
 8008f18:	3001      	adds	r0, #1
 8008f1a:	d0e6      	beq.n	8008eea <_printf_common+0xae>
 8008f1c:	3601      	adds	r6, #1
 8008f1e:	e7d9      	b.n	8008ed4 <_printf_common+0x98>

08008f20 <_printf_i>:
 8008f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f24:	7e0f      	ldrb	r7, [r1, #24]
 8008f26:	4691      	mov	r9, r2
 8008f28:	2f78      	cmp	r7, #120	@ 0x78
 8008f2a:	4680      	mov	r8, r0
 8008f2c:	460c      	mov	r4, r1
 8008f2e:	469a      	mov	sl, r3
 8008f30:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f36:	d807      	bhi.n	8008f48 <_printf_i+0x28>
 8008f38:	2f62      	cmp	r7, #98	@ 0x62
 8008f3a:	d80a      	bhi.n	8008f52 <_printf_i+0x32>
 8008f3c:	2f00      	cmp	r7, #0
 8008f3e:	f000 80d3 	beq.w	80090e8 <_printf_i+0x1c8>
 8008f42:	2f58      	cmp	r7, #88	@ 0x58
 8008f44:	f000 80ba 	beq.w	80090bc <_printf_i+0x19c>
 8008f48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008f50:	e03a      	b.n	8008fc8 <_printf_i+0xa8>
 8008f52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008f56:	2b15      	cmp	r3, #21
 8008f58:	d8f6      	bhi.n	8008f48 <_printf_i+0x28>
 8008f5a:	a101      	add	r1, pc, #4	@ (adr r1, 8008f60 <_printf_i+0x40>)
 8008f5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f60:	08008fb9 	.word	0x08008fb9
 8008f64:	08008fcd 	.word	0x08008fcd
 8008f68:	08008f49 	.word	0x08008f49
 8008f6c:	08008f49 	.word	0x08008f49
 8008f70:	08008f49 	.word	0x08008f49
 8008f74:	08008f49 	.word	0x08008f49
 8008f78:	08008fcd 	.word	0x08008fcd
 8008f7c:	08008f49 	.word	0x08008f49
 8008f80:	08008f49 	.word	0x08008f49
 8008f84:	08008f49 	.word	0x08008f49
 8008f88:	08008f49 	.word	0x08008f49
 8008f8c:	080090cf 	.word	0x080090cf
 8008f90:	08008ff7 	.word	0x08008ff7
 8008f94:	08009089 	.word	0x08009089
 8008f98:	08008f49 	.word	0x08008f49
 8008f9c:	08008f49 	.word	0x08008f49
 8008fa0:	080090f1 	.word	0x080090f1
 8008fa4:	08008f49 	.word	0x08008f49
 8008fa8:	08008ff7 	.word	0x08008ff7
 8008fac:	08008f49 	.word	0x08008f49
 8008fb0:	08008f49 	.word	0x08008f49
 8008fb4:	08009091 	.word	0x08009091
 8008fb8:	6833      	ldr	r3, [r6, #0]
 8008fba:	1d1a      	adds	r2, r3, #4
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	6032      	str	r2, [r6, #0]
 8008fc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e09e      	b.n	800910a <_printf_i+0x1ea>
 8008fcc:	6833      	ldr	r3, [r6, #0]
 8008fce:	6820      	ldr	r0, [r4, #0]
 8008fd0:	1d19      	adds	r1, r3, #4
 8008fd2:	6031      	str	r1, [r6, #0]
 8008fd4:	0606      	lsls	r6, r0, #24
 8008fd6:	d501      	bpl.n	8008fdc <_printf_i+0xbc>
 8008fd8:	681d      	ldr	r5, [r3, #0]
 8008fda:	e003      	b.n	8008fe4 <_printf_i+0xc4>
 8008fdc:	0645      	lsls	r5, r0, #25
 8008fde:	d5fb      	bpl.n	8008fd8 <_printf_i+0xb8>
 8008fe0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008fe4:	2d00      	cmp	r5, #0
 8008fe6:	da03      	bge.n	8008ff0 <_printf_i+0xd0>
 8008fe8:	232d      	movs	r3, #45	@ 0x2d
 8008fea:	426d      	negs	r5, r5
 8008fec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ff0:	230a      	movs	r3, #10
 8008ff2:	4859      	ldr	r0, [pc, #356]	@ (8009158 <_printf_i+0x238>)
 8008ff4:	e011      	b.n	800901a <_printf_i+0xfa>
 8008ff6:	6821      	ldr	r1, [r4, #0]
 8008ff8:	6833      	ldr	r3, [r6, #0]
 8008ffa:	0608      	lsls	r0, r1, #24
 8008ffc:	f853 5b04 	ldr.w	r5, [r3], #4
 8009000:	d402      	bmi.n	8009008 <_printf_i+0xe8>
 8009002:	0649      	lsls	r1, r1, #25
 8009004:	bf48      	it	mi
 8009006:	b2ad      	uxthmi	r5, r5
 8009008:	2f6f      	cmp	r7, #111	@ 0x6f
 800900a:	6033      	str	r3, [r6, #0]
 800900c:	bf14      	ite	ne
 800900e:	230a      	movne	r3, #10
 8009010:	2308      	moveq	r3, #8
 8009012:	4851      	ldr	r0, [pc, #324]	@ (8009158 <_printf_i+0x238>)
 8009014:	2100      	movs	r1, #0
 8009016:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800901a:	6866      	ldr	r6, [r4, #4]
 800901c:	2e00      	cmp	r6, #0
 800901e:	bfa8      	it	ge
 8009020:	6821      	ldrge	r1, [r4, #0]
 8009022:	60a6      	str	r6, [r4, #8]
 8009024:	bfa4      	itt	ge
 8009026:	f021 0104 	bicge.w	r1, r1, #4
 800902a:	6021      	strge	r1, [r4, #0]
 800902c:	b90d      	cbnz	r5, 8009032 <_printf_i+0x112>
 800902e:	2e00      	cmp	r6, #0
 8009030:	d04b      	beq.n	80090ca <_printf_i+0x1aa>
 8009032:	4616      	mov	r6, r2
 8009034:	fbb5 f1f3 	udiv	r1, r5, r3
 8009038:	fb03 5711 	mls	r7, r3, r1, r5
 800903c:	5dc7      	ldrb	r7, [r0, r7]
 800903e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009042:	462f      	mov	r7, r5
 8009044:	42bb      	cmp	r3, r7
 8009046:	460d      	mov	r5, r1
 8009048:	d9f4      	bls.n	8009034 <_printf_i+0x114>
 800904a:	2b08      	cmp	r3, #8
 800904c:	d10b      	bne.n	8009066 <_printf_i+0x146>
 800904e:	6823      	ldr	r3, [r4, #0]
 8009050:	07df      	lsls	r7, r3, #31
 8009052:	d508      	bpl.n	8009066 <_printf_i+0x146>
 8009054:	6923      	ldr	r3, [r4, #16]
 8009056:	6861      	ldr	r1, [r4, #4]
 8009058:	4299      	cmp	r1, r3
 800905a:	bfde      	ittt	le
 800905c:	2330      	movle	r3, #48	@ 0x30
 800905e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009062:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009066:	1b92      	subs	r2, r2, r6
 8009068:	6122      	str	r2, [r4, #16]
 800906a:	464b      	mov	r3, r9
 800906c:	4621      	mov	r1, r4
 800906e:	4640      	mov	r0, r8
 8009070:	f8cd a000 	str.w	sl, [sp]
 8009074:	aa03      	add	r2, sp, #12
 8009076:	f7ff fee1 	bl	8008e3c <_printf_common>
 800907a:	3001      	adds	r0, #1
 800907c:	d14a      	bne.n	8009114 <_printf_i+0x1f4>
 800907e:	f04f 30ff 	mov.w	r0, #4294967295
 8009082:	b004      	add	sp, #16
 8009084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009088:	6823      	ldr	r3, [r4, #0]
 800908a:	f043 0320 	orr.w	r3, r3, #32
 800908e:	6023      	str	r3, [r4, #0]
 8009090:	2778      	movs	r7, #120	@ 0x78
 8009092:	4832      	ldr	r0, [pc, #200]	@ (800915c <_printf_i+0x23c>)
 8009094:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009098:	6823      	ldr	r3, [r4, #0]
 800909a:	6831      	ldr	r1, [r6, #0]
 800909c:	061f      	lsls	r7, r3, #24
 800909e:	f851 5b04 	ldr.w	r5, [r1], #4
 80090a2:	d402      	bmi.n	80090aa <_printf_i+0x18a>
 80090a4:	065f      	lsls	r7, r3, #25
 80090a6:	bf48      	it	mi
 80090a8:	b2ad      	uxthmi	r5, r5
 80090aa:	6031      	str	r1, [r6, #0]
 80090ac:	07d9      	lsls	r1, r3, #31
 80090ae:	bf44      	itt	mi
 80090b0:	f043 0320 	orrmi.w	r3, r3, #32
 80090b4:	6023      	strmi	r3, [r4, #0]
 80090b6:	b11d      	cbz	r5, 80090c0 <_printf_i+0x1a0>
 80090b8:	2310      	movs	r3, #16
 80090ba:	e7ab      	b.n	8009014 <_printf_i+0xf4>
 80090bc:	4826      	ldr	r0, [pc, #152]	@ (8009158 <_printf_i+0x238>)
 80090be:	e7e9      	b.n	8009094 <_printf_i+0x174>
 80090c0:	6823      	ldr	r3, [r4, #0]
 80090c2:	f023 0320 	bic.w	r3, r3, #32
 80090c6:	6023      	str	r3, [r4, #0]
 80090c8:	e7f6      	b.n	80090b8 <_printf_i+0x198>
 80090ca:	4616      	mov	r6, r2
 80090cc:	e7bd      	b.n	800904a <_printf_i+0x12a>
 80090ce:	6833      	ldr	r3, [r6, #0]
 80090d0:	6825      	ldr	r5, [r4, #0]
 80090d2:	1d18      	adds	r0, r3, #4
 80090d4:	6961      	ldr	r1, [r4, #20]
 80090d6:	6030      	str	r0, [r6, #0]
 80090d8:	062e      	lsls	r6, r5, #24
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	d501      	bpl.n	80090e2 <_printf_i+0x1c2>
 80090de:	6019      	str	r1, [r3, #0]
 80090e0:	e002      	b.n	80090e8 <_printf_i+0x1c8>
 80090e2:	0668      	lsls	r0, r5, #25
 80090e4:	d5fb      	bpl.n	80090de <_printf_i+0x1be>
 80090e6:	8019      	strh	r1, [r3, #0]
 80090e8:	2300      	movs	r3, #0
 80090ea:	4616      	mov	r6, r2
 80090ec:	6123      	str	r3, [r4, #16]
 80090ee:	e7bc      	b.n	800906a <_printf_i+0x14a>
 80090f0:	6833      	ldr	r3, [r6, #0]
 80090f2:	2100      	movs	r1, #0
 80090f4:	1d1a      	adds	r2, r3, #4
 80090f6:	6032      	str	r2, [r6, #0]
 80090f8:	681e      	ldr	r6, [r3, #0]
 80090fa:	6862      	ldr	r2, [r4, #4]
 80090fc:	4630      	mov	r0, r6
 80090fe:	f000 f96b 	bl	80093d8 <memchr>
 8009102:	b108      	cbz	r0, 8009108 <_printf_i+0x1e8>
 8009104:	1b80      	subs	r0, r0, r6
 8009106:	6060      	str	r0, [r4, #4]
 8009108:	6863      	ldr	r3, [r4, #4]
 800910a:	6123      	str	r3, [r4, #16]
 800910c:	2300      	movs	r3, #0
 800910e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009112:	e7aa      	b.n	800906a <_printf_i+0x14a>
 8009114:	4632      	mov	r2, r6
 8009116:	4649      	mov	r1, r9
 8009118:	4640      	mov	r0, r8
 800911a:	6923      	ldr	r3, [r4, #16]
 800911c:	47d0      	blx	sl
 800911e:	3001      	adds	r0, #1
 8009120:	d0ad      	beq.n	800907e <_printf_i+0x15e>
 8009122:	6823      	ldr	r3, [r4, #0]
 8009124:	079b      	lsls	r3, r3, #30
 8009126:	d413      	bmi.n	8009150 <_printf_i+0x230>
 8009128:	68e0      	ldr	r0, [r4, #12]
 800912a:	9b03      	ldr	r3, [sp, #12]
 800912c:	4298      	cmp	r0, r3
 800912e:	bfb8      	it	lt
 8009130:	4618      	movlt	r0, r3
 8009132:	e7a6      	b.n	8009082 <_printf_i+0x162>
 8009134:	2301      	movs	r3, #1
 8009136:	4632      	mov	r2, r6
 8009138:	4649      	mov	r1, r9
 800913a:	4640      	mov	r0, r8
 800913c:	47d0      	blx	sl
 800913e:	3001      	adds	r0, #1
 8009140:	d09d      	beq.n	800907e <_printf_i+0x15e>
 8009142:	3501      	adds	r5, #1
 8009144:	68e3      	ldr	r3, [r4, #12]
 8009146:	9903      	ldr	r1, [sp, #12]
 8009148:	1a5b      	subs	r3, r3, r1
 800914a:	42ab      	cmp	r3, r5
 800914c:	dcf2      	bgt.n	8009134 <_printf_i+0x214>
 800914e:	e7eb      	b.n	8009128 <_printf_i+0x208>
 8009150:	2500      	movs	r5, #0
 8009152:	f104 0619 	add.w	r6, r4, #25
 8009156:	e7f5      	b.n	8009144 <_printf_i+0x224>
 8009158:	080097cf 	.word	0x080097cf
 800915c:	080097e0 	.word	0x080097e0

08009160 <__sflush_r>:
 8009160:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009166:	0716      	lsls	r6, r2, #28
 8009168:	4605      	mov	r5, r0
 800916a:	460c      	mov	r4, r1
 800916c:	d454      	bmi.n	8009218 <__sflush_r+0xb8>
 800916e:	684b      	ldr	r3, [r1, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	dc02      	bgt.n	800917a <__sflush_r+0x1a>
 8009174:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009176:	2b00      	cmp	r3, #0
 8009178:	dd48      	ble.n	800920c <__sflush_r+0xac>
 800917a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800917c:	2e00      	cmp	r6, #0
 800917e:	d045      	beq.n	800920c <__sflush_r+0xac>
 8009180:	2300      	movs	r3, #0
 8009182:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009186:	682f      	ldr	r7, [r5, #0]
 8009188:	6a21      	ldr	r1, [r4, #32]
 800918a:	602b      	str	r3, [r5, #0]
 800918c:	d030      	beq.n	80091f0 <__sflush_r+0x90>
 800918e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009190:	89a3      	ldrh	r3, [r4, #12]
 8009192:	0759      	lsls	r1, r3, #29
 8009194:	d505      	bpl.n	80091a2 <__sflush_r+0x42>
 8009196:	6863      	ldr	r3, [r4, #4]
 8009198:	1ad2      	subs	r2, r2, r3
 800919a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800919c:	b10b      	cbz	r3, 80091a2 <__sflush_r+0x42>
 800919e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80091a0:	1ad2      	subs	r2, r2, r3
 80091a2:	2300      	movs	r3, #0
 80091a4:	4628      	mov	r0, r5
 80091a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091a8:	6a21      	ldr	r1, [r4, #32]
 80091aa:	47b0      	blx	r6
 80091ac:	1c43      	adds	r3, r0, #1
 80091ae:	89a3      	ldrh	r3, [r4, #12]
 80091b0:	d106      	bne.n	80091c0 <__sflush_r+0x60>
 80091b2:	6829      	ldr	r1, [r5, #0]
 80091b4:	291d      	cmp	r1, #29
 80091b6:	d82b      	bhi.n	8009210 <__sflush_r+0xb0>
 80091b8:	4a28      	ldr	r2, [pc, #160]	@ (800925c <__sflush_r+0xfc>)
 80091ba:	410a      	asrs	r2, r1
 80091bc:	07d6      	lsls	r6, r2, #31
 80091be:	d427      	bmi.n	8009210 <__sflush_r+0xb0>
 80091c0:	2200      	movs	r2, #0
 80091c2:	6062      	str	r2, [r4, #4]
 80091c4:	6922      	ldr	r2, [r4, #16]
 80091c6:	04d9      	lsls	r1, r3, #19
 80091c8:	6022      	str	r2, [r4, #0]
 80091ca:	d504      	bpl.n	80091d6 <__sflush_r+0x76>
 80091cc:	1c42      	adds	r2, r0, #1
 80091ce:	d101      	bne.n	80091d4 <__sflush_r+0x74>
 80091d0:	682b      	ldr	r3, [r5, #0]
 80091d2:	b903      	cbnz	r3, 80091d6 <__sflush_r+0x76>
 80091d4:	6560      	str	r0, [r4, #84]	@ 0x54
 80091d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80091d8:	602f      	str	r7, [r5, #0]
 80091da:	b1b9      	cbz	r1, 800920c <__sflush_r+0xac>
 80091dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091e0:	4299      	cmp	r1, r3
 80091e2:	d002      	beq.n	80091ea <__sflush_r+0x8a>
 80091e4:	4628      	mov	r0, r5
 80091e6:	f7ff fbf3 	bl	80089d0 <_free_r>
 80091ea:	2300      	movs	r3, #0
 80091ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80091ee:	e00d      	b.n	800920c <__sflush_r+0xac>
 80091f0:	2301      	movs	r3, #1
 80091f2:	4628      	mov	r0, r5
 80091f4:	47b0      	blx	r6
 80091f6:	4602      	mov	r2, r0
 80091f8:	1c50      	adds	r0, r2, #1
 80091fa:	d1c9      	bne.n	8009190 <__sflush_r+0x30>
 80091fc:	682b      	ldr	r3, [r5, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d0c6      	beq.n	8009190 <__sflush_r+0x30>
 8009202:	2b1d      	cmp	r3, #29
 8009204:	d001      	beq.n	800920a <__sflush_r+0xaa>
 8009206:	2b16      	cmp	r3, #22
 8009208:	d11d      	bne.n	8009246 <__sflush_r+0xe6>
 800920a:	602f      	str	r7, [r5, #0]
 800920c:	2000      	movs	r0, #0
 800920e:	e021      	b.n	8009254 <__sflush_r+0xf4>
 8009210:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009214:	b21b      	sxth	r3, r3
 8009216:	e01a      	b.n	800924e <__sflush_r+0xee>
 8009218:	690f      	ldr	r7, [r1, #16]
 800921a:	2f00      	cmp	r7, #0
 800921c:	d0f6      	beq.n	800920c <__sflush_r+0xac>
 800921e:	0793      	lsls	r3, r2, #30
 8009220:	bf18      	it	ne
 8009222:	2300      	movne	r3, #0
 8009224:	680e      	ldr	r6, [r1, #0]
 8009226:	bf08      	it	eq
 8009228:	694b      	ldreq	r3, [r1, #20]
 800922a:	1bf6      	subs	r6, r6, r7
 800922c:	600f      	str	r7, [r1, #0]
 800922e:	608b      	str	r3, [r1, #8]
 8009230:	2e00      	cmp	r6, #0
 8009232:	ddeb      	ble.n	800920c <__sflush_r+0xac>
 8009234:	4633      	mov	r3, r6
 8009236:	463a      	mov	r2, r7
 8009238:	4628      	mov	r0, r5
 800923a:	6a21      	ldr	r1, [r4, #32]
 800923c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009240:	47e0      	blx	ip
 8009242:	2800      	cmp	r0, #0
 8009244:	dc07      	bgt.n	8009256 <__sflush_r+0xf6>
 8009246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800924a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800924e:	f04f 30ff 	mov.w	r0, #4294967295
 8009252:	81a3      	strh	r3, [r4, #12]
 8009254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009256:	4407      	add	r7, r0
 8009258:	1a36      	subs	r6, r6, r0
 800925a:	e7e9      	b.n	8009230 <__sflush_r+0xd0>
 800925c:	dfbffffe 	.word	0xdfbffffe

08009260 <_fflush_r>:
 8009260:	b538      	push	{r3, r4, r5, lr}
 8009262:	690b      	ldr	r3, [r1, #16]
 8009264:	4605      	mov	r5, r0
 8009266:	460c      	mov	r4, r1
 8009268:	b913      	cbnz	r3, 8009270 <_fflush_r+0x10>
 800926a:	2500      	movs	r5, #0
 800926c:	4628      	mov	r0, r5
 800926e:	bd38      	pop	{r3, r4, r5, pc}
 8009270:	b118      	cbz	r0, 800927a <_fflush_r+0x1a>
 8009272:	6a03      	ldr	r3, [r0, #32]
 8009274:	b90b      	cbnz	r3, 800927a <_fflush_r+0x1a>
 8009276:	f7ff f9a3 	bl	80085c0 <__sinit>
 800927a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d0f3      	beq.n	800926a <_fflush_r+0xa>
 8009282:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009284:	07d0      	lsls	r0, r2, #31
 8009286:	d404      	bmi.n	8009292 <_fflush_r+0x32>
 8009288:	0599      	lsls	r1, r3, #22
 800928a:	d402      	bmi.n	8009292 <_fflush_r+0x32>
 800928c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800928e:	f7ff fb8e 	bl	80089ae <__retarget_lock_acquire_recursive>
 8009292:	4628      	mov	r0, r5
 8009294:	4621      	mov	r1, r4
 8009296:	f7ff ff63 	bl	8009160 <__sflush_r>
 800929a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800929c:	4605      	mov	r5, r0
 800929e:	07da      	lsls	r2, r3, #31
 80092a0:	d4e4      	bmi.n	800926c <_fflush_r+0xc>
 80092a2:	89a3      	ldrh	r3, [r4, #12]
 80092a4:	059b      	lsls	r3, r3, #22
 80092a6:	d4e1      	bmi.n	800926c <_fflush_r+0xc>
 80092a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092aa:	f7ff fb81 	bl	80089b0 <__retarget_lock_release_recursive>
 80092ae:	e7dd      	b.n	800926c <_fflush_r+0xc>

080092b0 <__swhatbuf_r>:
 80092b0:	b570      	push	{r4, r5, r6, lr}
 80092b2:	460c      	mov	r4, r1
 80092b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092b8:	4615      	mov	r5, r2
 80092ba:	2900      	cmp	r1, #0
 80092bc:	461e      	mov	r6, r3
 80092be:	b096      	sub	sp, #88	@ 0x58
 80092c0:	da0c      	bge.n	80092dc <__swhatbuf_r+0x2c>
 80092c2:	89a3      	ldrh	r3, [r4, #12]
 80092c4:	2100      	movs	r1, #0
 80092c6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80092ca:	bf14      	ite	ne
 80092cc:	2340      	movne	r3, #64	@ 0x40
 80092ce:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80092d2:	2000      	movs	r0, #0
 80092d4:	6031      	str	r1, [r6, #0]
 80092d6:	602b      	str	r3, [r5, #0]
 80092d8:	b016      	add	sp, #88	@ 0x58
 80092da:	bd70      	pop	{r4, r5, r6, pc}
 80092dc:	466a      	mov	r2, sp
 80092de:	f000 f849 	bl	8009374 <_fstat_r>
 80092e2:	2800      	cmp	r0, #0
 80092e4:	dbed      	blt.n	80092c2 <__swhatbuf_r+0x12>
 80092e6:	9901      	ldr	r1, [sp, #4]
 80092e8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80092ec:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80092f0:	4259      	negs	r1, r3
 80092f2:	4159      	adcs	r1, r3
 80092f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092f8:	e7eb      	b.n	80092d2 <__swhatbuf_r+0x22>

080092fa <__smakebuf_r>:
 80092fa:	898b      	ldrh	r3, [r1, #12]
 80092fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092fe:	079d      	lsls	r5, r3, #30
 8009300:	4606      	mov	r6, r0
 8009302:	460c      	mov	r4, r1
 8009304:	d507      	bpl.n	8009316 <__smakebuf_r+0x1c>
 8009306:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800930a:	6023      	str	r3, [r4, #0]
 800930c:	6123      	str	r3, [r4, #16]
 800930e:	2301      	movs	r3, #1
 8009310:	6163      	str	r3, [r4, #20]
 8009312:	b003      	add	sp, #12
 8009314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009316:	466a      	mov	r2, sp
 8009318:	ab01      	add	r3, sp, #4
 800931a:	f7ff ffc9 	bl	80092b0 <__swhatbuf_r>
 800931e:	9f00      	ldr	r7, [sp, #0]
 8009320:	4605      	mov	r5, r0
 8009322:	4639      	mov	r1, r7
 8009324:	4630      	mov	r0, r6
 8009326:	f7ff fbbd 	bl	8008aa4 <_malloc_r>
 800932a:	b948      	cbnz	r0, 8009340 <__smakebuf_r+0x46>
 800932c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009330:	059a      	lsls	r2, r3, #22
 8009332:	d4ee      	bmi.n	8009312 <__smakebuf_r+0x18>
 8009334:	f023 0303 	bic.w	r3, r3, #3
 8009338:	f043 0302 	orr.w	r3, r3, #2
 800933c:	81a3      	strh	r3, [r4, #12]
 800933e:	e7e2      	b.n	8009306 <__smakebuf_r+0xc>
 8009340:	89a3      	ldrh	r3, [r4, #12]
 8009342:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800934a:	81a3      	strh	r3, [r4, #12]
 800934c:	9b01      	ldr	r3, [sp, #4]
 800934e:	6020      	str	r0, [r4, #0]
 8009350:	b15b      	cbz	r3, 800936a <__smakebuf_r+0x70>
 8009352:	4630      	mov	r0, r6
 8009354:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009358:	f000 f81e 	bl	8009398 <_isatty_r>
 800935c:	b128      	cbz	r0, 800936a <__smakebuf_r+0x70>
 800935e:	89a3      	ldrh	r3, [r4, #12]
 8009360:	f023 0303 	bic.w	r3, r3, #3
 8009364:	f043 0301 	orr.w	r3, r3, #1
 8009368:	81a3      	strh	r3, [r4, #12]
 800936a:	89a3      	ldrh	r3, [r4, #12]
 800936c:	431d      	orrs	r5, r3
 800936e:	81a5      	strh	r5, [r4, #12]
 8009370:	e7cf      	b.n	8009312 <__smakebuf_r+0x18>
	...

08009374 <_fstat_r>:
 8009374:	b538      	push	{r3, r4, r5, lr}
 8009376:	2300      	movs	r3, #0
 8009378:	4d06      	ldr	r5, [pc, #24]	@ (8009394 <_fstat_r+0x20>)
 800937a:	4604      	mov	r4, r0
 800937c:	4608      	mov	r0, r1
 800937e:	4611      	mov	r1, r2
 8009380:	602b      	str	r3, [r5, #0]
 8009382:	f7f9 fa6b 	bl	800285c <_fstat>
 8009386:	1c43      	adds	r3, r0, #1
 8009388:	d102      	bne.n	8009390 <_fstat_r+0x1c>
 800938a:	682b      	ldr	r3, [r5, #0]
 800938c:	b103      	cbz	r3, 8009390 <_fstat_r+0x1c>
 800938e:	6023      	str	r3, [r4, #0]
 8009390:	bd38      	pop	{r3, r4, r5, pc}
 8009392:	bf00      	nop
 8009394:	2000135c 	.word	0x2000135c

08009398 <_isatty_r>:
 8009398:	b538      	push	{r3, r4, r5, lr}
 800939a:	2300      	movs	r3, #0
 800939c:	4d05      	ldr	r5, [pc, #20]	@ (80093b4 <_isatty_r+0x1c>)
 800939e:	4604      	mov	r4, r0
 80093a0:	4608      	mov	r0, r1
 80093a2:	602b      	str	r3, [r5, #0]
 80093a4:	f7f9 fa69 	bl	800287a <_isatty>
 80093a8:	1c43      	adds	r3, r0, #1
 80093aa:	d102      	bne.n	80093b2 <_isatty_r+0x1a>
 80093ac:	682b      	ldr	r3, [r5, #0]
 80093ae:	b103      	cbz	r3, 80093b2 <_isatty_r+0x1a>
 80093b0:	6023      	str	r3, [r4, #0]
 80093b2:	bd38      	pop	{r3, r4, r5, pc}
 80093b4:	2000135c 	.word	0x2000135c

080093b8 <_sbrk_r>:
 80093b8:	b538      	push	{r3, r4, r5, lr}
 80093ba:	2300      	movs	r3, #0
 80093bc:	4d05      	ldr	r5, [pc, #20]	@ (80093d4 <_sbrk_r+0x1c>)
 80093be:	4604      	mov	r4, r0
 80093c0:	4608      	mov	r0, r1
 80093c2:	602b      	str	r3, [r5, #0]
 80093c4:	f7f9 fa70 	bl	80028a8 <_sbrk>
 80093c8:	1c43      	adds	r3, r0, #1
 80093ca:	d102      	bne.n	80093d2 <_sbrk_r+0x1a>
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	b103      	cbz	r3, 80093d2 <_sbrk_r+0x1a>
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	bd38      	pop	{r3, r4, r5, pc}
 80093d4:	2000135c 	.word	0x2000135c

080093d8 <memchr>:
 80093d8:	4603      	mov	r3, r0
 80093da:	b510      	push	{r4, lr}
 80093dc:	b2c9      	uxtb	r1, r1
 80093de:	4402      	add	r2, r0
 80093e0:	4293      	cmp	r3, r2
 80093e2:	4618      	mov	r0, r3
 80093e4:	d101      	bne.n	80093ea <memchr+0x12>
 80093e6:	2000      	movs	r0, #0
 80093e8:	e003      	b.n	80093f2 <memchr+0x1a>
 80093ea:	7804      	ldrb	r4, [r0, #0]
 80093ec:	3301      	adds	r3, #1
 80093ee:	428c      	cmp	r4, r1
 80093f0:	d1f6      	bne.n	80093e0 <memchr+0x8>
 80093f2:	bd10      	pop	{r4, pc}

080093f4 <roundf>:
 80093f4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80093f8:	3b7f      	subs	r3, #127	@ 0x7f
 80093fa:	2b16      	cmp	r3, #22
 80093fc:	4601      	mov	r1, r0
 80093fe:	b510      	push	{r4, lr}
 8009400:	dc14      	bgt.n	800942c <roundf+0x38>
 8009402:	2b00      	cmp	r3, #0
 8009404:	da07      	bge.n	8009416 <roundf+0x22>
 8009406:	3301      	adds	r3, #1
 8009408:	f000 4100 	and.w	r1, r0, #2147483648	@ 0x80000000
 800940c:	d101      	bne.n	8009412 <roundf+0x1e>
 800940e:	f041 517e 	orr.w	r1, r1, #1065353216	@ 0x3f800000
 8009412:	4608      	mov	r0, r1
 8009414:	bd10      	pop	{r4, pc}
 8009416:	4a08      	ldr	r2, [pc, #32]	@ (8009438 <roundf+0x44>)
 8009418:	411a      	asrs	r2, r3
 800941a:	4202      	tst	r2, r0
 800941c:	d0f9      	beq.n	8009412 <roundf+0x1e>
 800941e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009422:	4119      	asrs	r1, r3
 8009424:	4401      	add	r1, r0
 8009426:	ea21 0102 	bic.w	r1, r1, r2
 800942a:	e7f2      	b.n	8009412 <roundf+0x1e>
 800942c:	2b80      	cmp	r3, #128	@ 0x80
 800942e:	d1f0      	bne.n	8009412 <roundf+0x1e>
 8009430:	f7f7 fada 	bl	80009e8 <__addsf3>
 8009434:	4601      	mov	r1, r0
 8009436:	e7ec      	b.n	8009412 <roundf+0x1e>
 8009438:	007fffff 	.word	0x007fffff

0800943c <_init>:
 800943c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800943e:	bf00      	nop
 8009440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009442:	bc08      	pop	{r3}
 8009444:	469e      	mov	lr, r3
 8009446:	4770      	bx	lr

08009448 <_fini>:
 8009448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800944a:	bf00      	nop
 800944c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800944e:	bc08      	pop	{r3}
 8009450:	469e      	mov	lr, r3
 8009452:	4770      	bx	lr
